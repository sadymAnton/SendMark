//#Область ПодключаемыйМодуль_НачалоПримера

Перем ТиповойМодульДиадока;
Перем ОсновнойМодуль Экспорт;

Перем настройки_НаименованияИНоменклатура;
Перем настройки_НаименованиеПоУмолчанию;


//**************************************
//{ СЕРВИСНЫЕ ФУНКЦИИ

// Обеспечивает контроль совместимости подключаемого модуля и основного	
Функция ЭДО_ВерсияAPIПодключаемогоМодуля() Экспорт
	Возврат 1;
КонецФункции

Функция НовыйКонтент(ИмяКонтента)
	//для отладки/разработки
	Возврат ОсновнойМодуль.ДД_Компонента_ПолучитьПустойКонтент(ИмяКонтента,Истина);
КонецФункции

// прослойка для отладки: перехватывает исключение при установке значения неподходящего типа в реквизит.
Процедура УстановитьЗначениеXDTO(Элемент,ИмяРеквизита,ЗначениеРеквизита,ЭтоСсылка = Ложь)

	Если ЗначениеРеквизита=Неопределено
		Или ЗначениеРеквизита=NULL Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		//здесь можно добавить проверки на заполненность, вывод сообщений и т.д.
		
		Если ЭтоСсылка Тогда
			Элемент[ИмяРеквизита] = ЗначениеВСтрокуВнутр(ЗначениеРеквизита);
		Иначе	
			Элемент[ИмяРеквизита] = ЗначениеРеквизита;
		КонецЕсли;
		
		//Элемент.Установить(ИмяРеквизита,ЗначениеРеквизита);
		
	Исключение
		Сообщить("Исключение при заполнении реквизита """+ИмяРеквизита+""":
		|"+ОписаниеОшибки());
	КонецПопытки;

КонецПроцедуры

// Может пригодиться при отладке в режиме управляемых форм, когда точки остановки в открытом модуле не срабатывают.
// Достаточно вставить вызов данной процедуры в нужном месте и включить остановку по ошибке.
Процедура ПриглашениеОтладки()
	
	Попытка
		ВызватьИсключение "catch me if you can";
	Исключение
	КонецПопытки;
	
КонецПроцедуры

Процедура ДобавитьСтрокуВТаблицуЗначений(ТЗ, Значение0=Неопределено, Значение1=Неопределено, Значение2=Неопределено)
	
	СтрокаТЗ = ТЗ.Добавить();
	
	Если Значение1 <> Неопределено Тогда
		СтрокаТЗ[0] = Значение0;
	КонецЕсли;
	
	Если Значение1 <> Неопределено Тогда
		СтрокаТЗ[1] = Значение1;
	КонецЕсли;
	
	Если Значение2 <> Неопределено Тогда
		СтрокаТЗ[2] = Значение2;
	КонецЕсли;
		
КонецПроцедуры

//} СЕРВИСНЫЕ ФУНКЦИИ


//**************************************
//{ ФУНКЦИИ ДЛЯ ПОДКЛЮЧЕНИЯ ТИПОВОГО МОДУЛЯ ДИАДОКА КАК ИСТОЧНИКА ДАННЫХ ДЛЯ ДОКУМЕНТОВ

// Возвращает инициализированный объект типового модуля диадока
Функция ТиповойМодульДиадока()
	
	мРежимОтладки = Ложь;
	
	Если ТиповойМодульДиадока=неопределено Тогда
		
		Попытка
			// вдруг модуль уже был подключен. А мы не можем у менеджера внешних обработок спросить, какие обработки подключены.
			ТиповойМодульДиадока = ВнешниеОбработки.Создать("ТиповойМодульДиадока",Ложь);
		Исключение
			
			Если мРежимОтладки Тогда
				//возьмем файл с диска
				
				ИмяФайлаСМодулем = "c:\temp\Diadoc1C_UF_5_11_07_exports.epf";
				ДД = Новый ДвоичныеДанные(ИмяФайлаСМодулем);
				
			Иначе
				
				//развернем файл из макета
				ДД = ОсновнойМодуль.ПолучитьМакет("ТиповойМодульДиадокУФ_epf");
				
			КонецЕсли;
			
			АдресВХ = ПоместитьВоВременноеХранилище(ДД);
			ТиповойМодульДиадока = ВнешниеОбработки.Подключить(АдресВХ,"ТиповойМодульДиадока",Ложь);
			УдалитьИзВременногоХранилища(АдресВХ);
			
			ТиповойМодульДиадока = ВнешниеОбработки.Создать("ТиповойМодульДиадока",Ложь);
			
		КонецПопытки;
		
//		ТиповойМодульДиадока.ИнициализироватьМодуль(); // это в ОФ
		ИнициализацияТиповогоМодуляУФ(ТиповойМодульДиадока); // а так будет в УФ
	КонецЕсли;
	
	Возврат ТиповойМодульДиадока;
	
КонецФункции

Процедура ИнициализацияТиповогоМодуляУФ(ТиповойМодульДиадока)
	
	// с этим минимумом он уже взлетает
	ТиповойМодульДиадока.ПараметрыКлиентСервер = Новый Структура;
	
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("СинонимКонфигурации", Метаданные.Синоним);
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("ВерсияКонфигурации" , Метаданные.Версия);
	
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("РежимОтладкиСервера",	Ложь);
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("ИмяОбработки",			"___");
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("ПодключаемыйМодуль",	Новый Структура("ИспользоватьМодуль",Ложь));
	
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("ВременноеХранилище",	Новый Структура);
	
	ТиповойМодульДиадока.ПараметрыКлиентСервер.ВременноеХранилище.Вставить("АдресКэшаСервераНаВремяСеанса",	ПоместитьВоВременноеХранилище(Неопределено));
	ТиповойМодульДиадока.ПараметрыКлиентСервер.ВременноеХранилище.Вставить("АдресНеСуществующиеОбработки",	ПоместитьВоВременноеХранилище(Неопределено));
	ТиповойМодульДиадока.ПараметрыКлиентСервер.ВременноеХранилище.Вставить("АдресПодключенныеОбработки",	ПоместитьВоВременноеХранилище(Неопределено));
	
	ТиповойМодульДиадока.ЗаполнитьМанифест(ТиповойМодульДиадока,"Платформа");
	
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("МаркерКонфигурации",	ТиповойМодульДиадока.МетодСервера(,"ПолучитьМаркерКонфигурации"));
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("ИмяФормыИнтеграции",	ТиповойМодульДиадока.МетодСервера(,"ИмяФормыИнтеграции"));
	
КонецПроцедуры

// Трансформация Структуры, выданной типовым модулем Диадока, в XDTO
// Может, стоит затащить это в типовой модуль?
Процедура ЗаполнитьКонтентXDTOПоСтруктуре(Контент,Структура)
	
	Для Каждого Эл Из Структура Цикл
		
		Если ТипЗнч(Эл.Значение)=Тип("Структура") Тогда
			
			Если Эл.Ключ = "ЕдиницаИзмеренияСсылка"
				Или Эл.Ключ = "СсылкаНаЕИ" Тогда
				УстановитьЗначениеXDTO(Контент, Эл.Ключ, Эл.Значение.Ссылка, Истина);
				Продолжить;
			КонецЕсли;
			
			Если НЕ Контент.Свойства().Получить(Эл.Ключ)=Неопределено Тогда
				ЗаполнитьКонтентXDTOПоСтруктуре(Контент[Эл.Ключ],Эл.Значение)
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(Эл.Значение)=Тип("Массив")
			Или ТипЗнч(Эл.Значение)=Тип("ТаблицаЗначений") Тогда
			
			ТипСтроки = Контент.Свойства().Получить(Эл.Ключ).Тип.Имя;
			
			Если ТипЗнч(Эл.Значение) = Тип("ТаблицаЗначений") Тогда
				_Массив = ОсновнойМодуль.ТаблицаЗначений_2_МассивСтруктур(Эл.Значение);
			Иначе
				_Массив = Эл.Значение;
			КонецЕсли;
			
			Для Каждого ЭлементМассива Из _Массив Цикл
				
				НовЭлемент = Контент[Эл.Ключ].Добавить(НовыйКонтент(ТипСтроки));
				ЗаполнитьКонтентXDTOПоСтруктуре(НовЭлемент,ЭлементМассива)
			
			КонецЦикла;
			
		ИначеЕсли ЗначениеЗаполнено(Эл.Значение) Тогда
			
			Если НЕ Контент.Свойства().Получить(Эл.Ключ)=Неопределено Тогда
				
				Если Эл.Ключ = "Price" Тогда
					
					Попытка
						Контент.Price = Эл.Значение;
					Исключение
						Контент.Price = Число(Эл.Значение);
					КонецПопытки;
					
				Иначе
					
					УстановитьЗначениеXDTO(Контент, Эл.Ключ, Эл.Значение, ЭтоИмяСвойстваСсылки(Эл.Ключ));
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

Функция ЭтоИмяСвойстваСсылки(Имя)
	Возврат (
			Имя = "ВалютаСсылка" Или
			Имя = "СтранаПроисхожденияСсылка" Или
			Имя = "ЕдиницаИзмеренияСсылка" Или
			Имя = "Ссылка" Или
			Имя = "СсылкаНаЕИ"
	);
КонецФункции
                                 
//} ФУНКЦИИ ДЛЯ ПОДКЛЮЧЕНИЯ ТИПОВОГО МОДУЛЯ ДИАДОКА КАК ИСТОЧНИКА ДАННЫХ ДЛЯ ДОКУМЕНТОВ


//**************************************
//{		ПОДКЛЮЧЕНИЕ ВО ВНЕШНИЕ ОБРАБОТКИ
	
&Насервере
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид",			 	"ДополнительнаяОбработка");
	ПараметрыРегистрации.Вставить("Наименование", 		"Диадок (СКБ Контур): Подключаемый модуль");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", 	Ложь);
	ПараметрыРегистрации.Вставить("Версия", 			"1.0");
	ПараметрыРегистрации.Вставить("Информация", 		"Модуль работы с электронными первичными документами через Диадок (подключаемая часть)");
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

&Насервере
Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	
	Команды.Колонки.Добавить("Представление", 			Новый ОписаниеТипов("Строка")); 
	Команды.Колонки.Добавить("Идентификатор", 			Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Использование", 			Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", 	Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", 			Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

&Насервере
Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда=						ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление=			Представление;
	НоваяКоманда.Идентификатор=			Идентификатор;
	НоваяКоманда.Использование=			Использование;
	НоваяКоманда.ПоказыватьОповещение=	ПоказыватьОповещение;
	НоваяКоманда.Модификатор=			Модификатор;
	
КонецПроцедуры

//}		ПОДКЛЮЧЕНИЕ ВО ВНЕШНИЕ ОБРАБОТКИ


//**************************************
//{ СОБЫТИЯ ПОДКЛЮЧАЕМОГО МОДУЛЯ

// Обработка всех событий подключаемого модуля
Функция ОбработатьСобытие(ИмяСобытия,Параметры) Экспорт
	
	Если ИмяСобытия = "ПослеПодготовкиПакета" Тогда
		
		//ПослеПодготовкиПакета(Параметры.Пакет);
		Возврат Неопределено;
		
	ИначеЕсли ИмяСобытия = "ПодготовитьЭлектронныйДокумент" Тогда
		
		ПодготовитьЭлектронныйДокумент(Параметры.Результат,Параметры.ВидДокументаРазвернутый,Параметры.ДополнительныеПараметры);
		Возврат Неопределено;
		
	ИначеЕсли ИмяСобытия = "ПолучитьТекстЗапросаДляСпискаПакетовНаОтправку" Тогда
		
		Возврат ПолучитьТекстЗапросаДляВидаПакета(Параметры.ВидПакетаРазвернутый); // для построения списка пакетов на отправку
		
	ИначеЕсли ИмяСобытия = "ПодготовитьПакет" Тогда
		
		ПодготовитьПакет(Параметры.ВидПакетаРазвернутый, Параметры.СтрокаСписка, Параметры.Пакет); // для подготовки единичного пакета
		Возврат Неопределено;
		
	ИначеЕсли ИмяСобытия = "ПолучитьТаблицуИспользуемыхПакетов" Тогда
		
		Возврат ПолучитьТаблицуИспользуемыхПакетов();
		
	ИначеЕсли ИмяСобытия = "ПолучитьТаблицуИспользуемыхВидовДокументов" Тогда
		
		Возврат ПолучитьТаблицуИспользуемыхВидовДокументов();
		
	ИначеЕсли ИмяСобытия = "ПолучитьЗаполненныйОбъектДокумента1С" Тогда
		
		Возврат ПолучитьЗаполненныйОбъектДокумента1С(Параметры);
		
	КонецЕсли;
	
КонецФункции

//{ СэндМарк

Функция ПолучитьЗаполненныйОбъектДокумента1С(Параметры)
	
	Если ЭтоНакладнаяИлиАкт(Параметры.ДокументДД) Тогда
		
		ВыполнитьПроверкуГотовностиКОбработке(Параметры.ДокументДД);
		
		Результат = ЗагрузитьЭлектроннуюНакладнуюИлиАктВПТУ(Параметры.ДокументДД, Параметры.Контент, Параметры.ПараметрыДляГрупповойПостОбработки);
		
		Возврат Результат;
		
	ИначеЕсли ЭтоСчетФактура(Параметры.ДокументДД) Тогда
		
		ВыполнитьПроверкуГотовностиКОбработке(Параметры.ДокументДД);
		
		// формирование дерева здесь, потому что далее необходимо установить валюту документа
		деревоКонтентаСчетаФактуры = СформироватьДеревоКонтента(Параметры.Контент);
		
		Если ЭтоСчетФактураПоАгентскойСхеме(Параметры.ДокументДД, Параметры.ПакетДД, деревоКонтентаСчетаФактуры) Тогда
			
			Результат = ЗагрузитьЭлектронныйСчетФактуруВПТУИСчетФактуру(Параметры.ДокументДД, Параметры.Контент, Параметры.ПараметрыДляГрупповойПостОбработки);
			
			Возврат Результат;
			
		Иначе
			
			Результат = ЗагрузитьЭлектронныйСчетФактуруВСчетФактуру(Параметры.ДокументДД, Параметры.ПакетДД, Параметры.Контент);
			
			Возврат Результат;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

//{ Бизнес-логика

Процедура ВыполнитьПроверкуГотовностиКОбработке(ДокументДД)
	
	ПроверитьНаЗаполненность(Контрагент1СПоДокументу(ДокументДД), "Невозможно определить контрагента для документа");
	ПроверитьНаЗначение(ДокументДД.ТипКонтента, "UniversalTransferDocument", "Формат документа должен соответствовать УПД");
	
КонецПроцедуры

Функция ЭтоНакладнаяИлиАкт(ДокументДД)
	
	Если ДокументДД.ТипДокумента = "XmlAcceptanceCertificate" или ДокументДД.ТипДокумента = "XmlTorg12" Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоСчетФактура(ДокументДД)
	
	Если ДокументДД.ТипДокумента = "Invoice" Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоСчетФактураПоАгентскойСхеме(ДокументДД, ПакетДД, деревоКонтентаСчетаФактуры)
	
	Если ЭтоСчетФактураВВалюте(деревоКонтентаСчетаФактуры) И ВПакетеОтсутствуютАктИНакладная(ПакетДД) и ЭтоАгентскиеУслуги( Контрагент1СПоДокументу(ДокументДД) ) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭтоСчетФактураВВалюте(деревоКонтентаСчетаФактуры)
	
	Если деревоКонтентаСчетаФактуры.Документ.СвСчФакт.КодОКВ <> КодВалютыРубль() Тогда
		
		Возврат Истина;
		
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ВПакетеОтсутствуютАктИНакладная(ПакетДД)
	
	Для Каждого документДД Из ПолучитьДокументыПакета(ПакетДД) Цикл
		
		Если ЭтоНакладнаяИлиАкт(документДД) Тогда
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

//}

//{ Загрузка электронных документов

Функция ЗагрузитьЭлектроннуюНакладнуюИлиАктВПТУ(ДокументДД, Контент, ПараметрыДляГрупповойПостОбработки)
	
	Контрагент = Контрагент1СПоДокументу(ДокументДД);
	//Сэндмарк+
	ЭтоАгентскиеУслуги = ЭтоАгентскиеУслуги(Контрагент);
	//Сэндмарк-
	
	деревоКонтента = СформироватьДеревоКонтента(Контент);
	
	ДокументОбъект = Документы.ПоступлениеТоваровУслуг.СоздатьДокумент();
	
	//Сэндмарк+
	Если деревоКонтента.Документ.СвСчФакт.КодОКВ = "840" Тогда
		ДокументОбъект.ВалютаДокумента = ПолучитьСсылкуВалюты("840");
	Иначе
		ДокументОбъект.ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;		
	//Сэндмарк-	
	
	ДокументОбъект.Дата 					= ТекущаяДата();
	ДокументОбъект.Ответственный			= ПараметрыСеанса.ТекущийПользователь;
	
	ДокументОбъект.Организация				= Организация1СПоДокументу(ДокументДД);			
	ДокументОбъект.Контрагент				= Контрагент;
	
//{ Если возможно несколько договоров, то запоминаем для постобработки	
	массивВозможныхДоговоров = Неопределено;
	ДокументОбъект.ДоговорКонтрагента		= Договор1СПоДокументу(ДокументДД, ДокументОбъект.ВалютаДокумента, массивВозможныхДоговоров);
	
	Если массивВозможныхДоговоров.Количество() > 0 Тогда
		Если ПараметрыДляГрупповойПостОбработки = Неопределено Тогда
			ПараметрыДляГрупповойПостОбработки = Новый Структура;
		КонецЕсли;
		
		ПараметрыДляГрупповойПостОбработки.Вставить("массивВозможныхДоговоров", массивВозможныхДоговоров);
	КонецЕсли;
//}
	
	ПроверитьНаЗаполненность(ДокументОбъект.ДоговорКонтрагента, "Невозможно определить договор контрагента");
	ДокументОбъект.ДатаВходящегоДокумента	= ДатаПоСтроке(деревоКонтента.Документ.СвСчФакт.ДатаСчФ);
	ДокументОбъект.НомерВходящегоДокумента	= деревоКонтента.Документ.СвСчФакт.НомерСчФ;			
	
	Если ЭтоАгентскиеУслуги Тогда
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.ПокупкаКомиссия;
	Иначе
		ДокументОбъект.ВидОперации = Перечисления.ВидыОперацийПоступлениеТоваровУслуг.Услуги;
	КонецЕсли;
	
	
	ДокументОбъект.СуммаВключаетНДС			= Истина;
	ДокументОбъект.КратностьВзаиморасчетов=	1;
	ТипЦен = ТиповойМодульДиадока().МетодСервера("Модуль_ИнтеграцияУниверсальный","ПолучитьТипЦенПоДоговору", ДокументОбъект.ДоговорКонтрагента);
	Если НЕ ТипЦен = Неопределено Тогда
		ДокументОбъект.ТипЦен= ТипЦен;
	КонецЕсли;
	
	// Заполнить табличную часть
	ТабличнаяЧасть = СписокXDTOИзЭлемента(ДеревоКонтента.Документ.ТаблСчФакт.СведТов);
	
	Для Каждого СтрокаТоваров Из ТабличнаяЧасть Цикл
		
		Номенклатура = Неопределено;
		КодТовараВДокументе = "";
		
		Если СтрокаТоваров.Свойства().Получить("ДопСведТов") <> Неопределено Тогда
			Если СтрокаТоваров.ДопСведТов.Свойства().Получить("КодТов") <> Неопределено Тогда
				КодТовараВДокументе = СтрокаТоваров.ДопСведТов.КодТов;
			КонецЕсли;
		КонецЕсли;
		
		
		//+Сэндмарк
		НоменклатураПоУмолчанию = ПроверкаНоменклатурыПоУмолчанию(Контрагент);
		Если НоменклатураПоУмолчанию.Количество() > 0 Тогда
			Номенклатура = НоменклатураПоУмолчанию[0].Значение;
		Иначе
			Номенклатура=	ПолучитьНоменклатуруПоставщика(Контрагент, КодТовараВДокументе, КодТовараВДокументе, СтрокаТоваров.НаимТов);
		КонецЕсли;	
		//-Сэндмарк	
		
		Если НЕ ЗначениеЗаполнено(Номенклатура) И ЗначениеЗаполнено(КодТовараВДокументе) Тогда
			Номенклатура = ПолучитьНоменклатуруПоАртикулу(КодТовараВДокументе);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
			Номенклатура = АвтоматическиОпределитьНоменклатуруПоСтрокеЭлектронногоДокумента(СтрокаТоваров);
		КонецЕсли;

		ПроверитьНаЗаполненность(Номенклатура, "Невозможно определить номенклатуру");
		
		ЕдиницаИзмерения = Неопределено;
		СтрокаGUID= ТиповойМодульДиадока().МетодСервера(,"ПолучитьЗначениеСвойства", Номенклатура, ТиповойМодульДиадока().МетодСервера(,"ИдентификаторСвойстваЕдиницаИзмеренияНоменклатуры"));
		Если ЗначениеЗаполнено(СтрокаGUID) Тогда
			
			Если ТиповойМодульДиадока().МетодСервера(,"СуществуетОбъектМетаданных", "Справочник.ЕдиницыИзмерения") Тогда
				ИмяСправочника = "ЕдиницыИзмерения";
			ИначеЕсли ТиповойМодульДиадока().МетодСервера(,"СуществуетОбъектМетаданных", "Справочник.УпаковкиЕдиницыИзмерения") Тогда
				ИмяСправочника = "УпаковкиЕдиницыИзмерения";
			ИначеЕсли ТиповойМодульДиадока().МетодСервера(,"СуществуетОбъектМетаданных", "Справочник.КлассификаторЕдиницИзмерения") Тогда
				ИмяСправочника = "КлассификаторЕдиницИзмерения";
			Иначе
				ИмяСправочника= "";
			КонецЕсли;
			
			Если НЕ ПустаяСтрока(ИмяСправочника) Тогда
				
				ЕдиницаИзмерения= Вычислить("Справочники."+ИмяСправочника+".ПолучитьСсылку(Новый УникальныйИдентификатор(СтрокаGUID))");
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ЕдиницаИзмерения) Тогда
			ЕдиницаИзмерения = ТиповойМодульДиадока().МетодСервера(,"ПолучитьЕдиницуИзмерения", КодТовараВДокументе, СтрокаТоваров.НаимТов, Номенклатура)
		КонецЕсли;
		
		Если НЕ Номенклатура.Услуга Тогда
			ПроверитьНаЗаполненность(ЕдиницаИзмерения, "Невозможно определить единицу измерения для номенклатуры: " + Номенклатура);
		КонецЕсли;
		
		Если ЭтоАгентскиеУслуги Тогда
			СтрокаТЧ = ДокументОбъект.АгентскиеУслуги.Добавить();
		Иначе
			СтрокаТЧ = ДокументОбъект.Услуги.Добавить();
		КонецЕсли;
		
		Если ЭтоАгентскиеУслуги Тогда
			СтрокаТЧ.Контрагент = ДокументОбъект.Контрагент;
		КонецЕсли;
		
		СтрокаТЧ.Номенклатура = Номенклатура;
		СтрокаТЧ.Содержание = СтрокаТоваров.НаимТов;
		
		Если НЕ Номенклатура.Услуга Тогда
			СтрокаТЧ.ЕдиницаИзмерения = ЕдиницаИзмерения;
		КонецЕсли;
		
		Если СтрокаТоваров.Свойства().Получить("КолТов") <> Неопределено Тогда
			СтрокаТЧ.Количество = СтрокаТоваров.КолТов;
		КонецЕсли;
		
		Если СтрокаТоваров.Свойства().Получить("ЦенаТов") <> Неопределено Тогда
			СтрокаТЧ.Цена = СтрокаТоваров.ЦенаТов;
		КонецЕсли;
		
		СтрокаТЧ.Сумма = СтрокаТоваров.СтТовУчНал;
		СтрокаТЧ.СуммаНДС = СтрокаТоваров.СумНал.СумНал;
	
		СтрокаТЧ.СтавкаНДС = ТиповойМодульДиадока().МетодСервера(,"ПолучитьСтавкуНДСДиадок", СтрокаТоваров.НалСт);
		Если Не ЗначениеЗаполнено(СтрокаТЧ.СтавкаНДС) Тогда
			СтрокаТЧ.СтавкаНДС = ВернутьСтавкуБезНДС();
		КонецЕсли;
		
		//Сэндмарк+
		Если НЕ ЭтоАгентскиеУслуги Тогда
			ЗаполнитьСчетаУчетаНоменклатуры(ДокументОбъект, СтрокаТЧ, СтрокаТоваров);
		КонецЕсли;
		//Сэндмарк-
		
	КонецЦикла;
	
	Возврат ДокументОбъект;
	
КонецФункции

Функция ЗагрузитьЭлектронныйСчетФактуруВСчетФактуру(ДокументДД, ПакетДД, Контент, ДокументОснование = Неопределено)
	
	СчетФактураПолученный 			= Документы.СчетФактураПолученный.СоздатьДокумент();
	
	Если ДокументОснование = Неопределено Тогда
	
		МассивСсылокДокументовОснований = Новый Массив;
		
		Для Каждого документИзПакета Из ПолучитьДокументыПакета(ПакетДД) Цикл
			Если ЗначениеЗаполнено(документИзПакета.Документ) Тогда
				МассивСсылокДокументовОснований.Добавить(документИзПакета.Документ);
			КонецЕсли;
		КонецЦикла;
		
		Если МассивСсылокДокументовОснований.Количество() = 0 Тогда
			ВызватьИсключение "Невозможно определить связанные документы ""Поступление товаров и услуг""";
		КонецЕсли;
		
		Если МассивСсылокДокументовОснований.Количество()>1 Тогда		
			ЗаполнитьСчетФактуруПолученнуюНаОснованииМассиваСсылокРНК(СчетФактураПолученный, МассивСсылокДокументовОснований);
		ИначеЕсли МассивСсылокДокументовОснований.Количество() = 1 Тогда  
			
			ДокументОснование = МассивСсылокДокументовОснований[0];
			
		КонецЕсли;
		
	КонецЕсли;
	
	СчетФактураПолученный.Заполнить(ДокументОснование);
	
	Попытка
		ПараметрыСФ= Вычислить("УчетНДСПереопределяемый.ПолучитьПараметрыСчетаФактуры(СчетФактураПолученный)");
	Исключение
		ПараметрыСФ= Вычислить("УчетНДСПереопределяемый.ПараметрыСчетаФактуры(СчетФактураПолученный)");
	КонецПопытки;
	
	Если НЕ ПараметрыСФ=Неопределено Тогда
		СчетФактураПолученный.СуммаДокумента = ПараметрыСФ.СуммаДокумента;
		Если НЕ СчетФактураПолученный.Метаданные().Реквизиты.Найти("СуммаНДСДокумента")=Неопределено Тогда
			СчетФактураПолученный.СуммаНДСДокумента = ПараметрыСФ.СуммаНДСДокумента;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьРеквизитыСчетФактурыПолученной(СчетФактураПолученный, СформироватьДеревоКонтента(Контент));
	
	Возврат СчетФактураПолученный;
	
КонецФункции

Функция ЗагрузитьЭлектронныйСчетФактуруВПТУИСчетФактуру(ДокументДД, Контент, ПараметрыДляГрупповойПостОбработки)
	
	ПТУОбъект = ЗагрузитьЭлектроннуюНакладнуюИлиАктВПТУ(ДокументДД, Контент, ПараметрыДляГрупповойПостОбработки);
	ПТУОбъект.Записать();
	
	СФОбъект = ЗагрузитьЭлектронныйСчетФактуруВСчетФактуру(ДокументДД, Неопределено, Контент, ПТУОбъект.Ссылка);
	СФОбъект.Контрагент = ПТУОбъект.Контрагент;
	
	Возврат СФОбъект;
	
КонецФункции

Функция СформироватьДеревоКонтента(Контент)
	
	ТекстXML = ОсновнойМодуль.ДвоичныеДанные_В_Текст(Контент);
	Возврат ОсновнойМодуль.XML_В_XDTO(ТекстXML);
	
КонецФункции

// Функция, реализующаяч автоматическое определение номенклатуры, согласно второму ТЗ.
Функция АвтоматическиОпределитьНоменклатуруПоСтрокеЭлектронногоДокумента(СтрокаТоваров)
	
	Попытка
		наименованиеТовара = СтрокаТоваров.НаимТов;
	Исключение
		ВызватьИсключение "Не известный формат электронного документа. Ожидается поле: ""НаимТов"".";
	КонецПопытки;
	
	//{ Определить максимальное количество слов во фразах поиска в наименовании номенклатуры
	максимальноеКоличествоСловВНастройкеПоиска = 0;
	Для каждого структураНаименования Из настройки_НаименованияИНоменклатура Цикл
	
		количествоСлов = СтрРазделить(структураНаименования.НаименованиеВДокументе, " ").Количество();
		максимальноеКоличествоСловВНастройкеПоиска = Макс(максимальноеКоличествоСловВНастройкеПоиска, количествоСлов);
	
	КонецЦикла;
	//}
	
	НормализованноеНаименование = ПолучитьПервыеСловаСНормализованнымиПробелами(наименованиеТовара, максимальноеКоличествоСловВНастройкеПоиска);
	
	//{ Поиск эталлоных фраз в нормализованном наименовании
	наименованиеВ1СДляПоиска = Неопределено;
	Для каждого структураНаименования Из настройки_НаименованияИНоменклатура Цикл
	
		Если СтрНайти(НормализованноеНаименование, структураНаименования.НаименованиеВДокументе) <> 0 Тогда
			наименованиеВ1СДляПоиска = структураНаименования.НаименованиеВ1С;
			Прервать;
		КонецЕсли;
	
	КонецЦикла;
	//}
	
	Если ЗначениеЗаполнено(наименованиеВ1СДляПоиска) Тогда
		Возврат Справочники.Номенклатура.НайтиПоНаименованию(наименованиеВ1СДляПоиска);
	Иначе
		Возврат Справочники.Номенклатура.НайтиПоНаименованию(настройки_НаименованиеПоУмолчанию);
	КонецЕсли;
	
КонецФункции

//}

//{ Работа с данными 1С/ДД

Процедура ЗаполнитьРеквизитыСчетФактурыПолученной(СчетФактураПолученный, деревоКонтента)
	
	ИсходныеДанные = Неопределено;
	
	СчетФактураПолученный.НомерВходящегоДокумента 	= деревоКонтента.Документ.СвСчФакт.НомерСчФ;
	СчетФактураПолученный.ДатаВходящегоДокумента 	= ДатаПоСтроке(деревоКонтента.Документ.СвСчФакт.ДатаСчФ);	
	
	СчетФактураПолученный.КодВидаОперации = "01";
	СчетФактураПолученный.КодСпособаПолучения = 2;
	
	ДатаПоставки = ?(СчетФактураПолученный.ДокументыОснования.Количество()>0,  СчетФактураПолученный.ДокументыОснования[0].ДокументОснование.Дата, Неопределено);
	ДатаВходящегоДокумента = СчетФактураПолученный.ДатаВходящегоДокумента;
	
	ПериодЗакрытияМесяца = ТиповойМодульДиадока().МетодСервера(,"ПолучитьКоличествоДнейОтсрочки", СчетФактураПолученный.Организация);
	
	СчетФактураПолученный.Дата = ПолучитьДатуУчетаСФ(ДатаПоставки, СчетФактураПолученный.ДатаВходящегоДокумента, ПериодЗакрытияМесяца);
	
КонецПроцедуры

Функция ПолучитьДатуУчетаСФ(ДатаПоставки, ДатаУчета, ПериодЗакрытияМесяца)
	
	Если ЗначениеЗаполнено(ДатаПоставки) Тогда
		
		ДатаОкончанияМесяца		= КонецМесяца(ДатаПоставки) + ПериодЗакрытияМесяца*24*3600;
		ДатаОкончанияКвартала	= КонецКвартала(ДатаПоставки) + ПериодЗакрытияМесяца*24*3600;
		
		Если ДатаУчета <= ДатаОкончанияМесяца Тогда
			Возврат ДатаПоставки;
		ИначеЕсли ДатаУчета <= ДатаОкончанияКвартала Тогда
			Возврат КонецКвартала(ДатаПоставки);
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаУчета)=Истина Тогда
		Возврат ДатаУчета;
	Иначе
		Возврат ТекущаяДата();
	КонецЕсли;
	
КонецФункции


Функция Контрагент1СПоДокументу(ДокументДД)
	
	Возврат ДокументДД.КонтрагентДиадок.СвязанныйСправочник1;
	
КонецФункции

Функция Организация1СПоДокументу(ДокументДД)
	
	Возврат ДокументДД.ОрганизацияДиадок.СвязанныйСправочник1;
	
КонецФункции

Функция Договор1СПоДокументу(ДокументДД, ВалютаДокумента, массивВозможныхДоговоров = Неопределено)
	
	списокВидовДоговоров = ТиповойМодульДиадока().МетодСервера("", "ПолучитьСписокВидовДоговоров");
	массивВозможныхДоговоров = ПолучитьВозможныеДоговоры(Контрагент1СПоДокументу(ДокументДД), Организация1СПоДокументу(ДокументДД), списокВидовДоговоров, ВалютаДокумента);
	
	Если массивВозможныхДоговоров.Количество() > 0 Тогда
		Возврат массивВозможныхДоговоров[0];
	КонецЕсли;
	
	Возврат Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	
КонецФункции

Функция ПолучитьНоменклатуруПоставщика(Контрагент, КодНоменклатуры, АртикулНоменклатуры, НоменклатураИзЭД=Неопределено) Экспорт
	
	КодНоменклатуры=		?(НЕ ЗначениеЗаполнено(КодНоменклатуры), Неопределено, КодНоменклатуры);
	АртикулНоменклатуры=	?(НЕ ЗначениеЗаполнено(АртикулНоменклатуры), Неопределено, АртикулНоменклатуры);
	
	НоменклатураИзЭД = ?(ЗначениеЗаполнено(НоменклатураИзЭД)=Ложь, Неопределено, НоменклатураИзЭД);	
		
	Если ТиповойМодульДиадока().МетодСервера(,"СформироватьПрофильКонфигурации").ХранениеНоменклатурыПоставщиков.Вариант = "Справочник_НоменклатураПоставщиков" Тогда
		
		РезультатПоиска = НайтиНоменклатуруПоставщика("ПолучитьНоменклатуру", Контрагент, НоменклатураИзЭД, , КодНоменклатуры, АртикулНоменклатуры);
			
		Если НЕ РезультатПоиска.Пустой() Тогда
			Выборка=	РезультатПоиска.Выбрать();
			Если Выборка.Количество() = 1 Тогда
				Выборка.Следующий();
				Возврат Выборка.Номенклатура;
			Иначе
				Возврат Неопределено;
			КонецЕсли;
		Иначе 
			Возврат Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Неопределено;

КонецФункции

Функция НайтиНоменклатуруПоставщика(Направление, Контрагент, НоменклатураИзЭД=Неопределено, НоменклатураСсылка=Неопределено, КодНоменклатуры, АртикулНоменклатуры)
	
	Запрос=	Новый Запрос;
	Запрос.Текст=	
		"ВЫБРАТЬ
		|	НоменклатураПоставщиков.Ссылка КАК НоменклатураПоставщика,
		|	НоменклатураПоставщиков.Номенклатура
		|ИЗ
		|	Справочник.НоменклатураПоставщиков КАК НоменклатураПоставщиков
		|ГДЕ
		|	ВЫБОР
		|			КОГДА &НоменклатураИзЭД = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НоменклатураПоставщиков.Наименование = &НоменклатураИзЭД
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Номенклатура = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НоменклатураПоставщиков.Номенклатура = &Номенклатура
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Идентификатор = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НоменклатураПоставщиков.Идентификатор = &Идентификатор
		|		КОНЕЦ
		|	И ВЫБОР
		|			КОГДА &Артикул = НЕОПРЕДЕЛЕНО
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ НоменклатураПоставщиков.Артикул = &Артикул
		|		КОНЕЦ
		|	И НоменклатураПоставщиков.Владелец = &Владелец";
		
	Владелец=	Вычислить("?(ЗначениеЗаполнено(Контрагент), Контрагент, Справочники.Контрагенты.ПустаяСсылка())");
	Запрос.УстановитьПараметр("Владелец", Владелец);
	
	Если Направление = "ПолучитьНоменклатуру" Тогда
		
		НоменклатураИзЭД = ?(ЗначениеЗаполнено(НоменклатураИзЭД)=Истина, НоменклатураИзЭД, Неопределено);
		Запрос.УстановитьПараметр("НоменклатураИзЭД", НоменклатураИзЭД);
		Запрос.УстановитьПараметр("Номенклатура", Неопределено);		
		
	ИначеЕсли Направление = "УстановитьНоменклатуру" Тогда
		
		НоменклатураСсылка = ?(ЗначениеЗаполнено(НоменклатураСсылка)=Истина, НоменклатураСсылка, Неопределено);
		Запрос.УстановитьПараметр("Номенклатура", НоменклатураСсылка);
		Запрос.УстановитьПараметр("НоменклатураИзЭД", Неопределено);		
		
	Иначе
		Запрос.УстановитьПараметр("НоменклатураИзЭД", Неопределено);
		Запрос.УстановитьПараметр("Номенклатура", Неопределено);		
	КонецЕсли;
	
	
	//Сначала поиск по идентификатору потом по артикулу
	Если ЗначениеЗаполнено(КодНоменклатуры) Тогда
		Запрос.УстановитьПараметр("Идентификатор", КодНоменклатуры);
		Запрос.УстановитьПараметр("Артикул", Неопределено);
	ИначеЕсли НЕ ЗначениеЗаполнено(КодНоменклатуры) И ЗначениеЗаполнено(АртикулНоменклатуры) Тогда
		Запрос.УстановитьПараметр("Идентификатор", Неопределено);
		Запрос.УстановитьПараметр("Артикул", АртикулНоменклатуры);
	Иначе
		Запрос.УстановитьПараметр("Идентификатор", Неопределено);
		Запрос.УстановитьПараметр("Артикул", Неопределено);
	КонецЕсли;
		
	Возврат Запрос.Выполнить();
	
КонецФункции

Функция ПолучитьНоменклатуруПоАртикулу(АртикулНоменклатуры) Экспорт
	
	Если ЗначениеЗаполнено(АртикулНоменклатуры)=Ложь Тогда
		возврат неопределено 
	ИначеЕсли ТиповойМодульДиадока().МетодСервера(,"СформироватьПрофильКонфигурации").ЕстьАртикул Тогда
		
		Запрос=			Новый Запрос;
		Запрос.Текст=
			"ВЫБРАТЬ
			|	Номенклатура.Ссылка
			|ИЗ
			|	Справочник.Номенклатура КАК Номенклатура
			|ГДЕ
			|	Номенклатура.Артикул = &АртикулНоменклатуры";
		
		Запрос.УстановитьПараметр("АртикулНоменклатуры", АртикулНоменклатуры);
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Количество() = 1 Тогда
			Выборка.Следующий();
			Возврат Выборка.Ссылка;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьСчетФактуруПолученнуюНаОснованииМассиваСсылокРНК(СчетФактураПолученный, МассивСсылокРНК)
	
	Инд = 1;
	Для каждого Эл Из МассивСсылокРНК Цикл
		Если Инд = 1 Тогда
			СчетФактураПолученный.Заполнить(МассивСсылокРНК[0]);
		Иначе
			СтрОсн = СчетФактураПолученный.ДокументыОснования.Добавить();
			СтрОсн.ДокументОснование = Эл;
		КонецЕсли;
		
		Инд = Инд + 1;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьВозможныеДоговоры(Контрагент1С, Организация1С, списокВидовДоговоров, Валюта1С)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|ВЫБРАТЬ
	|	ДоговорыКонтрагентов.Ссылка КАК Договор,
	|	ВЫБОР
	|		КОГДА ОсновныеДоговорыКонтрагентов.Договор ЕСТЬ НЕ NULL 
	|			ТОГДА 1
	|		ИНАЧЕ 2
	|	КОНЕЦ КАК ПриоритетДоговора
	|ИЗ
	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ОсновныеДоговорыКонтрагента КАК ОсновныеДоговорыКонтрагентов
	|		ПО ДоговорыКонтрагентов.Владелец = ОсновныеДоговорыКонтрагентов.Контрагент
	|			И ДоговорыКонтрагентов.Ссылка = ОсновныеДоговорыКонтрагентов.Договор
	|ГДЕ
	|	ДоговорыКонтрагентов.Владелец = &Владелец
	|	И ДоговорыКонтрагентов.Организация = &Организация
	|	И ДоговорыКонтрагентов.ПометкаУдаления = ЛОЖЬ
	|	И ДоговорыКонтрагентов.ВидДоговора В(&СписокДоговоров)
	|	И ДоговорыКонтрагентов.ВалютаВзаиморасчетов = &Валюта
	|  	
	|УПОРЯДОЧИТЬ ПО
	|	ПриоритетДоговора";
	
	Запрос.УстановитьПараметр("Владелец", Контрагент1С);
	Запрос.УстановитьПараметр("Организация", Организация1С);
	Запрос.УстановитьПараметр("СписокДоговоров", списокВидовДоговоров);
	Запрос.УстановитьПараметр("Валюта", Валюта1С);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Договор");
	
КонецФункции

//}

//{ Перенесенные Сэндмарк+

Функция ЭтоАгентскиеУслуги(Контрагент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеСведения.Значение
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Объект = &Объект
	               |	И ДополнительныеСведения.Свойство = &Свойство";
	Запрос.УстановитьПараметр("Объект", Контрагент);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("Агентские")); 
	
	Результат = Запрос.Выполнить();
	
	Если Результат.Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;		
	
КонецФункции

Функция ПроверкаНоменклатурыПоУмолчанию(Контрагент)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДополнительныеСведения.Значение
	               |ИЗ
	               |	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
	               |ГДЕ
	               |	ДополнительныеСведения.Объект = &Объект
	               |	И ДополнительныеСведения.Свойство = &Свойство";
	Запрос.УстановитьПараметр("Объект", Контрагент);
	Запрос.УстановитьПараметр("Свойство", ПланыВидовХарактеристик.ДополнительныеРеквизитыИСведения.НайтиПоНаименованию("НоменклатураСсылка")); 
	
	Результат = Запрос.Выполнить().Выгрузить();
	Возврат Результат;
	
	//Если Результат.Пустой() Тогда
	//	Возврат Ложь;
	//Иначе
	//	Возврат Истина;
	//КонецЕсли;		
	
КонецФункции

Процедура ЗаполнитьСчетаУчетаНоменклатуры(ДокОбъект, СтрокаТаблицы, СтрЭД)
	
	СчетаУчета=	БухгалтерскийУчетПереопределяемыйПолучитьСчетаУчетаНоменклатуры(ДокОбъект.Организация, СтрокаТаблицы.Номенклатура, ДокОбъект.Склад);
	ЗаполнитьЗначенияСвойств(СтрокаТаблицы, СчетаУчета);
	
КонецПроцедуры

Функция БухгалтерскийУчетПереопределяемыйПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура, Склад);
	Возврат Вычислить("БухгалтерскийУчетПереопределяемый.ПолучитьСчетаУчетаНоменклатуры(Организация, Номенклатура, Склад)");
КонецФункции

Функция ПолучитьСсылкуВалюты(КодВалюты)
	
	Запрос = Новый Запрос;
	Запрос.Текст= "ВЫБРАТЬ
	              |	Валюты.Ссылка КАК ВалютаСсылка
	              |ИЗ
	              |	Справочник.Валюты КАК Валюты
	              |ГДЕ
	              |	Валюты.Код = &Код" ;
	Запрос.УстановитьПараметр("Код", КодВалюты);
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	
	Пока РезультатЗапроса.Следующий() Цикл
		ВалютаСсылка = РезультатЗапроса.ВалютаСсылка;
	КонецЦикла;
	
	Возврат ВалютаСсылка;
	
КонецФункции

//}

//{ Вспомогательные методы


Функция СписокXDTOИзЭлемента(Элемент) Экспорт
	
	Если ТипЗнч(Элемент) = Тип("СписокXDTO") Тогда
		Возврат Элемент;
	Иначе
		Список = Новый Массив;
		Список.Добавить(Элемент);
		Возврат Список;
	КонецЕсли;
	
КонецФункции

Процедура ПроверитьНаЗаполненность(значение, текстИсключения)
	
	Если НЕ ЗначениеЗаполнено(значение) Тогда
		
		ВызватьИсключение текстИсключения;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПроверитьНаЗначение(значениеПеременно, Эталон, текстИсключения)
	
	Если значениеПеременно <> Эталон Тогда
		
		ВызватьИсключение текстИсключения;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьДокументыПакета(ПакетДД)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "
	|выбрать
	|	ддДок.Ссылка
	|из
	|	справочник.Диадок_Документы как ддДок
	|где
	|	ддДок.Пакет = &Пакет";
	Запрос.УстановитьПараметр("Пакет", ПакетДД);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции

Функция ДатаПоСтроке(строкаДаты)
	
	Возврат Дата(Сред(строкаДаты, 7, 4), Сред(строкаДаты, 4, 2), Сред(строкаДаты, 1, 2));
	
КонецФункции

Функция КодВалютыРубль()
	
	Возврат "643";
	
КонецФункции

Функция ВернутьСтавкуБезНДС()
	
	Если НЕ Метаданные.Справочники.Найти("СтавкиНДС") = Неопределено Тогда
		СтавкаБезНДС= Справочники.СтавкиНДС.НайтиПоНаименованию("Без НДС");
	Иначе
		СтавкаБезНДС= Перечисления.СтавкиНДС.БезНДС;	
	КонецЕсли;
	
	Возврат СтавкаБезНДС;
	
КонецФункции

Функция ПолучитьПервыеСловаСНормализованнымиПробелами(наименованиеТовара, КоличествоСлов)
	
	слова = СтрРазделить(наименованиеТовара, " ");
	результат = "";
	
	Для Инд = 1 По КоличествоСлов Цикл
	
		Если Инд > слова.Количество() Тогда
			Прервать;
		КонецЕсли;
		
		Если Инд > 1 Тогда
			Результат = результат + " ";
		КонецЕсли;
		
		Результат = результат + слова[Инд - 1];
	
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//}

//}

// Тут можно переопределить отправителя/получателя/подразделения/заблокированность/тестовость
// Но можно закинуть и в код подготовки пакета.
Процедура ПослеПодготовкиПакета(Пакет)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ВЫБОР
	|		КОГДА Диадок_ЮрФизЛица.ID_ВладелецПодразделения <> """"
	|			ТОГДА Диадок_ЮрФизЛица.ID_ВладелецПодразделения
	|		ИНАЧЕ Диадок_ЮрФизЛица.ID
	|	КОНЕЦ КАК ID
	|ИЗ
	|	Справочник.Диадок_ЮрФизЛица КАК Диадок_ЮрФизЛица
	|ГДЕ
	|	Диадок_ЮрФизЛица.СвязанныйСправочник1 = &СвязанныйСправочник1"   //это можно и в коробку попробовать
	);
	Запрос.УстановитьПараметр("СвязанныйСправочник1",Пакет.Данные1С.Организация);
	Пакет.ДанныеДД.OrganizationId = ОсновнойМодуль.ЭДО_Служебные_ПолучитьРезультатЗапроса(Запрос, "ID");
	
	Запрос.УстановитьПараметр("СвязанныйСправочник1",Пакет.Данные1С.Контрагент);
	Пакет.ДанныеДД.CounteragentId = ОсновнойМодуль.ЭДО_Служебные_ПолучитьРезультатЗапроса(Запрос, "ID");
	
	//1. FromDepartmentId - по Организации
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Диадок_ЮрФизЛица.ID КАК ID
	|ИЗ
	|	Справочник.Диадок_ЮрФизЛица КАК Диадок_ЮрФизЛица
	|ГДЕ
	|	Диадок_ЮрФизЛица.СвязанныйСправочник1 = &СвязанныйСправочник1
	|	И Диадок_ЮрФизЛица.ИмяСправочника = ""ПодразделенияОрганизаций"""
	);
	Запрос.УстановитьПараметр("СвязанныйСправочник1",Пакет.Данные1С.Организация);
	Пакет.ДанныеДД.FromDepartmentId = ОсновнойМодуль.ЭДО_Служебные_ПолучитьРезультатЗапроса(Запрос, "ID");
	
	//2. ToDepartmentId - по Договору
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Диадок_ЮрФизЛица.ID КАК ID
	|ИЗ
	|	Справочник.Диадок_ЮрФизЛица КАК Диадок_ЮрФизЛица
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК спрДоговорыКонтрагентов
	|		ПО (спрДоговорыКонтрагентов.Ссылка = &ТекущийДоговор)
	|			И Диадок_ЮрФизЛица.СвязанныйСправочник2 = спрДоговорыКонтрагентов.Родитель
	|			И (Диадок_ЮрФизЛица.СвязанныйСправочник2 ССЫЛКА Справочник.ДоговорыКонтрагентов)
	|			И (Диадок_ЮрФизЛица.ИмяСправочника = ""ПодразделенияКонтрагентов"")"
	);
	Запрос.УстановитьПараметр("ТекущийДоговор",Пакет.Данные1С.Документ.ДоговорКонтрагента);
	Пакет.ДанныеДД.ToDepartmentId = ОсновнойМодуль.ЭДО_Служебные_ПолучитьРезультатЗапроса(Запрос, "ID");
	
//	Пакет.ДанныеДД.DelaySend = Истина; //отладка
	
КонецПроцедуры

// Основная точка входа для подготовки исходящего документа
Функция ПодготовитьЭлектронныйДокумент(Результат, ВидДокументаРазвернутый, ДополнительныеПараметры)

	Документ1С					= Результат.Документ1С;
	ВидДокументаНаименование	= ВидДокументаРазвернутый.Наименование;
	ТипКонтента					= ВидДокументаРазвернутый.ТипКонтента;
	
	Если ВРЕГ(ТипКонтента)=ВРЕГ("Torg12SellerContent") Тогда
		
		Допсведения = Неопределено;
		ФИОПодписанта = " ";
		
		XmlTorg12Content= ТиповойМодульДиадока().МетодСервера("Модуль_ИнтеграцияУниверсальный","ПолучитьXmlTorg12Content", Документ1С, Неопределено, Неопределено, ДопСведения, ФИОПодписанта);
		
		ОтвЛица = ОтветственныеЛицаБП.ОтветственныеЛица(Документ1С.Организация,Документ1С.Дата);
		ЗаполнитьПодпись(XmlTorg12Content.SupplyAllowedBy,ОтвЛица.РуководительФИО,ОтвЛица.РуководительДолжностьПредставление);
		
		//СписокОшибок=	  ТиповойМодульДиадока().МетодСервера(,"ВалидацияXmlTorg12Content", XmlTorg12Content);
		//Если ЗначениеЗаполнено(СписокОшибок) Тогда
		//	ВызватьИсключение(СписокОшибок);
		//КонецЕсли; 
		
		ЗаполнитьКонтентXDTOПоСтруктуре(Результат.Content,XmlTorg12Content);
		
	ИначеЕсли ВРЕГ(ТипКонтента)=ВРЕГ("InvoiceContent") Тогда
		
		Если НЕ ТипЗнч(Документ1С) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда
			ВызватьИсключение "Неизвестный тип счета-фактуры";
		КонецЕсли;
		
		Допсведения = Неопределено;
		ФИОПодписанта = " ";
		InvoiceContent=	ТиповойМодульДиадока().МетодСервера("Модуль_ИнтеграцияУниверсальный","ПолучитьInvoiceContent", Документ1С, Неопределено, Допсведения, ФИОПодписанта);
		СписокОшибок= 	ТиповойМодульДиадока().МетодСервера(,"ВалидацияInvoiceContent", InvoiceContent, Документ1С);
		Если ЗначениеЗаполнено(СписокОшибок) тогда
			ВызватьИсключение(СписокОшибок)
		КонецЕсли;	 
		
		ЗаполнитьКонтентXDTOПоСтруктуре(Результат.Content,InvoiceContent);
		
		Возврат Истина;
			
	ИначеЕсли ВРЕГ(ТипКонтента)=ВРЕГ("NonformilizedContent") Тогда
		
		Если ВидДокументаНаименование = "Рассылка_PDF" Тогда
			
			ПолныйПутьКФайлу = Документ1С.ТекущаяВерсияТом.ПолныйПутьWindows + Документ1С.ТекущаяВерсия.ПутьКФайлу;
			Результат.ДвоичныеДанные			= Новый ДвоичныеДанные(ПолныйПутьКФайлу);
			Результат.ИмяФайла					= Документ1С.Наименование;
			
			Возврат Истина;
			
		ИначеЕсли ВидДокументаНаименование = "Транзакционный отчет" Тогда
			
			CcылканаВПФ = Справочники.ДополнительныеОтчетыИОбработки.НайтиПоНаименованию(ВидДокументаНаименование); // предполагаем, что он именно так и будет называться
			// Но вообще это лучше уже прямо ссылкой задавать.
			// Ссылку выпустим в следующих релизах.
			
			ИмяВремФайла = "";
			ПредставлениеФайла = "";
			СформироватьВнешнююПечатнуюФорму(Документ1С,CcылканаВПФ,Неопределено,ИмяВремФайла,ПредставлениеФайла);
			
			Результат.ДвоичныеДанные			= Новый ДвоичныеДанные(ИмяВремФайла);
			Результат.ИмяФайла					= ПредставлениеФайла;
			
			УдалитьФайлы(ИмяВремФайла);
			
			Возврат Истина;
			
		ИначеЕсли ВидДокументаНаименование = "АктСверки" Тогда
			
			ФИОПодписанта = " ";
			СтруктураАктаСверки = ТиповойМодульДиадока().МетодСервера("Модуль_ИнтеграцияУниверсальный", "СформироватьПечатнуюФормуАктаСверки", Документ1С, Неопределено, ФИОПодписанта);
			
			ПолныйПутьКФайлу = СтруктураАктаСверки.ИмяВременногоФайла;
			
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолныйПутьКФайлу);
			Результат.Content.Date						= Документ1С.Дата;
			Результат.Content.Number					= Документ1С.Номер;
			Результат.Content.NeedRecipientSignature	= Ложь;
			Результат.ДвоичныеДанные					= ДвоичныеДанные;
			Результат.ИмяФайла							= СтруктураАктаСверки.ИмяФайла;
			
			Возврат Истина;
			
		Иначе
			
			ВызватьИсключение "Неизвестный тип документа: "+ВидДокументаНаименование;
			
		КонецЕсли;
		
	Иначе
		
		ВызватьИсключение "Неизвестный тип документа: "+ВидДокументаНаименование;
		
	КонецЕсли;
	
КонецФункции

Процедура ЗаполнитьПодпись(КонтентПодписи, ФИО, Должность)
	
	КонтентПодписи.FirstName	= ФИО.Имя;
	КонтентПодписи.SurName		= ФИО.Фамилия;
	КонтентПодписи.Patronymic	= ФИО.Отчество;
	
	КонтентПодписи.JobTitle		= Должность;
	
КонецПроцедуры

// Шаблонная функция для вывода внешней печатной формы.
// Если все ок, возвращает Истина
// Результат сохраняется в параметрах ИмяВремФайла и ПредставлениеФайла. Первые 3 параметра - входные.
Функция СформироватьВнешнююПечатнуюФорму(Документ,	ВнешняяПечатнаяФорма, ДопПараметры=Неопределено, ИмяВремФайла, ПредставлениеФайла)
	
	РезультатПечати = Неопределено;
			
	ОбъектыНазначения = Новый Массив;
	ОбъектыНазначения.Добавить(Документ);
	ПараметрыВывода = Неопределено;
	ПараметрыИсточника = Новый Структура("ИдентификаторКоманды,ОбъектыНазначения","ТранзакционныйОтчет",ОбъектыНазначения);
	ОбъектыПечати = Новый СписокЗначений;
	
	МодульДополнительныеОтчетыИОбработки = ОбщегоНазначения.ОбщийМодуль("ДополнительныеОтчетыИОбработки");
	
	МодульДополнительныеОтчетыИОбработки.ПечатьПоВнешнемуИсточнику(ВнешняяПечатнаяФорма,
		ПараметрыИсточника, РезультатПечати, ОбъектыПечати, ПараметрыВывода);
		
	Если НЕ ТипЗнч(РезультатПечати)=Тип("ТаблицаЗначений")
		Или РезультатПечати.Количество()<>1 Тогда
		ВызватьИсключение "Не удалось сформировать печатную форму """ + ВнешняяПечатнаяФорма + """ объекта " + Документ;
	КонецЕсли;
	
	ИмяВремФайла = ПолучитьИмяВременногоФайла();
	
	РезультатПечати[0].ТабличныйДокумент.Записать(ИмяВремФайла,ТипФайлаТабличногоДокумента.PDF);
	
	ПредставлениеФайла = РезультатПечати[0].СинонимМакета + " № " + Документ.Номер + " от " + Формат(Документ.Дата,"ДФ=dd.MM.yyyy") + ".pdf";
			
	Возврат Истина; // все ок
	
КонецФункции

Функция ПолучитьТекстЗапросаДляВидаПакета(ВидПакетаРазвернутый)
	
	Если НЕ ВидПакетаРазвернутый.Свойство("ID") Тогда
		Сообщить("Отсутствует ID для пакета: " + ВидПакетаРазвернутый.Наименование);
		Возврат Неопределено;
	КонецЕсли;
	
	Если ВидПакетаРазвернутый.ID = "ID_ОсновнойПакет" Тогда
		
		Возврат 
		"ВЫБРАТЬ
		|	Диадок_НастройкиКонтрагентов.Организация.СвязанныйСправочник1 КАК Организация1С,
		|	Диадок_НастройкиКонтрагентов.Контрагент.СвязанныйСправочник1 КАК Контрагент1С,
		|	Диадок_НастройкиКонтрагентов.Организация КАК Организация,
		|	Диадок_НастройкиКонтрагентов.Контрагент КАК Контрагент,
		|	Диадок_НастройкиКонтрагентов.Организация.ID,
		|	Диадок_НастройкиКонтрагентов.Контрагент.ID,
		|	Диадок_НастройкиКонтрагентов.Организация.ID_ОсновноеПодразделение КАК ПодразделениеОрганизацииID,
		|	Диадок_НастройкиКонтрагентов.Контрагент.ID_ОсновноеПодразделение КАК ПодразделениеКонтрагентаID
		|ПОМЕСТИТЬ КэшКонтрагентов
		|ИЗ
		|	РегистрСведений.Диадок_НастройкиКонтрагентов КАК Диадок_НастройкиКонтрагентов
		|ГДЕ
		|	Диадок_НастройкиКонтрагентов.ИмяСвойства = ""Статус""
		|	И Диадок_НастройкиКонтрагентов.Значение = ""IsMyCounteragent""
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	РеализацияТоваровУслуг.Ссылка КАК Документ,
		|	РеализацияТоваровУслуг.Номер КАК НомерДокумента,
		|	РеализацияТоваровУслуг.Дата КАК ДатаДокумента,
		|	РеализацияТоваровУслуг.Контрагент КАК Контрагент,
		|	РеализацияТоваровУслуг.Организация КАК Организация,
		|	РеализацияТоваровУслуг.СуммаДокумента КАК СуммаДокумента,
		|	Диадок_ПакетыДокументов.Ссылка КАК Пакет
		|ИЗ
		|	Документ.РеализацияТоваровУслуг КАК РеализацияТоваровУслуг
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КэшКонтрагентов КАК КэшКонтрагентов
		|		ПО (КэшКонтрагентов.Контрагент1С = РеализацияТоваровУслуг.Контрагент)
		|			И (КэшКонтрагентов.Организация1С = РеализацияТоваровУслуг.Организация)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Диадок_ПакетыДокументов КАК Диадок_ПакетыДокументов
		|		ПО РеализацияТоваровУслуг.Ссылка = Диадок_ПакетыДокументов.Документ
		|ГДЕ
		|	РеализацияТоваровУслуг.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И РеализацияТоваровУслуг.Проведен
		|	И Диадок_ПакетыДокументов.Ссылка ЕСТЬ NULL";
		
	ИначеЕсли ВидПакетаРазвернутый.ID = "ID_АктСверки" Тогда
		
		Возврат 
		"ВЫБРАТЬ
		|	Диадок_НастройкиКонтрагентов.Организация.СвязанныйСправочник1 КАК Организация1С,
		|	Диадок_НастройкиКонтрагентов.Контрагент.СвязанныйСправочник1 КАК Контрагент1С,
		|	Диадок_НастройкиКонтрагентов.Организация КАК Организация,
		|	Диадок_НастройкиКонтрагентов.Контрагент КАК Контрагент,
		|	Диадок_НастройкиКонтрагентов.Организация.ID,
		|	Диадок_НастройкиКонтрагентов.Контрагент.ID,
		|	Диадок_НастройкиКонтрагентов.Организация.ID_ОсновноеПодразделение КАК ПодразделениеОрганизацииID,
		|	Диадок_НастройкиКонтрагентов.Контрагент.ID_ОсновноеПодразделение КАК ПодразделениеКонтрагентаID
		|ПОМЕСТИТЬ КэшКонтрагентов4
		|ИЗ
		|	РегистрСведений.Диадок_НастройкиКонтрагентов КАК Диадок_НастройкиКонтрагентов
		|ГДЕ
		|	Диадок_НастройкиКонтрагентов.ИмяСвойства = ""Статус""
		|	И Диадок_НастройкиКонтрагентов.Значение = ""IsMyCounteragent""
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	АктСверкиВзаиморасчетов.Ссылка КАК Документ,
		|	АктСверкиВзаиморасчетов.Номер КАК НомерДокумента,
		|	АктСверкиВзаиморасчетов.Дата КАК ДатаДокумента,
		|	АктСверкиВзаиморасчетов.Контрагент КАК Контрагент,
		|	АктСверкиВзаиморасчетов.Организация КАК Организация,
		|	АктСверкиВзаиморасчетов.Расхождение КАК СуммаДокумента,
		|	Диадок_ПакетыДокументов.Ссылка КАК Пакет
		|ИЗ
		|	Документ.АктСверкиВзаиморасчетов КАК АктСверкиВзаиморасчетов
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ КэшКонтрагентов4 КАК КэшКонтрагентов
		|		ПО (КэшКонтрагентов.Контрагент1С = АктСверкиВзаиморасчетов.Контрагент)
		|			И (КэшКонтрагентов.Организация1С = АктСверкиВзаиморасчетов.Организация)
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Диадок_ПакетыДокументов КАК Диадок_ПакетыДокументов
		|		ПО АктСверкиВзаиморасчетов.Ссылка = Диадок_ПакетыДокументов.Документ
		|ГДЕ
		|	АктСверкиВзаиморасчетов.Дата МЕЖДУ &НачалоПериода И &КонецПериода
		|	И НЕ АктСверкиВзаиморасчетов.ПометкаУдаления
		|	И Диадок_ПакетыДокументов.Ссылка ЕСТЬ NULL";
		
	ИначеЕсли ВидПакетаРазвернутый.ID = "ID_Рассылка" Тогда
		
		Возврат 
		"ВЫБРАТЬ
		|	Диадок_НастройкиКонтрагентов.Организация.СвязанныйСправочник1 КАК Организация1С,
		|	Диадок_НастройкиКонтрагентов.Контрагент.СвязанныйСправочник1 КАК Контрагент1С,
		|	Диадок_НастройкиКонтрагентов.Организация КАК Организация,
		|	Диадок_НастройкиКонтрагентов.Контрагент КАК Контрагент,
		|	Диадок_НастройкиКонтрагентов.Организация.ID,
		|	Диадок_НастройкиКонтрагентов.Контрагент.ID,
		|	Диадок_НастройкиКонтрагентов.Организация.ID_ОсновноеПодразделение КАК ПодразделениеОрганизацииID,
		|	Диадок_НастройкиКонтрагентов.Контрагент.ID_ОсновноеПодразделение КАК ПодразделениеКонтрагентаID
		|ПОМЕСТИТЬ КэшКонтрагентов2
		|ИЗ
		|	РегистрСведений.Диадок_НастройкиКонтрагентов КАК Диадок_НастройкиКонтрагентов
		|ГДЕ
		|	Диадок_НастройкиКонтрагентов.ИмяСвойства = ""Статус""
		|	И Диадок_НастройкиКонтрагентов.Значение = ""IsMyCounteragent""
		|	И НЕ Диадок_НастройкиКонтрагентов.Организация.СвязанныйСправочник1 = НЕОПРЕДЕЛЕНО
		|	И НЕ Диадок_НастройкиКонтрагентов.Контрагент.СвязанныйСправочник1 = НЕОПРЕДЕЛЕНО
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	Организация,
		|	Контрагент
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	Файлы.Ссылка КАК Документ,
		|	Файлы.Наименование КАК НомерДокумента,
		|	Файлы.ДатаСоздания КАК ДатаДокумента,
		|	КэшКонтрагентов.Контрагент1С КАК Контрагент,
		|	КэшКонтрагентов.Организация1С КАК Организация,
		|	0 КАК СуммаДокумента
		|ПОМЕСТИТЬ ВТДекартоваНаОтправку
		|ИЗ
		|	Справочник.Файлы КАК Файлы,
		|	КэшКонтрагентов2 КАК КэшКонтрагентов
		|ГДЕ
		|	Файлы.ДатаСоздания МЕЖДУ &НачалоПериода И &КонецПериода
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТДекартоваНаОтправку.Документ КАК Документ,
		|	ВТДекартоваНаОтправку.НомерДокумента КАК НомерДокумента,
		|	ВТДекартоваНаОтправку.ДатаДокумента КАК ДатаДокумента,
		|	ВТДекартоваНаОтправку.Контрагент КАК Контрагент,
		|	ВТДекартоваНаОтправку.Организация КАК Организация,
		|	ВТДекартоваНаОтправку.СуммаДокумента КАК СуммаДокумента,
		|	Диадок_ПакетыДокументов.Ссылка КАК Пакет
		|ИЗ
		|	ВТДекартоваНаОтправку КАК ВТДекартоваНаОтправку
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Диадок_ПакетыДокументов КАК Диадок_ПакетыДокументов
		|		ПО ВТДекартоваНаОтправку.Документ = Диадок_ПакетыДокументов.Документ
		|			И ВТДекартоваНаОтправку.Контрагент = Диадок_ПакетыДокументов.Контрагент
		|			И ВТДекартоваНаОтправку.Организация = Диадок_ПакетыДокументов.Организация
		|ГДЕ
		|	Диадок_ПакетыДокументов.Ссылка ЕСТЬ NULL";
		
	Иначе
		
		//ВызватьИсключение "Неизвестный вид пакета: " + ВидПакетаРазвернутый.ID;	
		Сообщить("Неизвестный ID пакета: " + ВидПакетаРазвернутый.ID);
		
	КонецЕсли;
	
КонецФункции

Функция ПодготовитьПакет(ВидПакетаРазвернутый, СтрокаСписка, Пакет)
	
	Если ВидПакетаРазвернутый.Наименование = "Основной пакет" Тогда
		
		СчетФактура = УчетНДСПереопределяемый.НайтиПодчиненныйСчетФактуруВыданныйНаРеализацию(СтрокаСписка.Документ);
		Если Не ЗначениеЗаполнено(СчетФактура) Тогда
			ВызватьИсключение "Отсутствует счет-фактура по документу " + СтрокаСписка.Документ;
		КонецЕсли;

		ОсновнойМодуль.ЭДО_ДокументМенеджер_ПодготовитьИДобавитьДокументВПакет(Пакет,	СчетФактура,			"СчетФактура");
		ОсновнойМодуль.ЭДО_ДокументМенеджер_ПодготовитьИДобавитьДокументВПакет(Пакет,	СтрокаСписка.Документ,	"ТОРГ12");
		//ОсновнойМодуль.ЭДО_ДокументМенеджер_ПодготовитьИДобавитьДокументВПакет(Пакет,	СтрокаСписка.Документ,	"Транзакционный отчет");
		
	ИначеЕсли ВидПакетаРазвернутый.Наименование = "АктСверки" Тогда
		
		ОсновнойМодуль.ЭДО_ДокументМенеджер_ПодготовитьИДобавитьДокументВПакет(Пакет,	СтрокаСписка.Документ,	"АктСверки");

	ИначеЕсли ВидПакетаРазвернутый.Наименование = "Рассылка" Тогда
		
		
		ОсновнойМодуль.ЭДО_ДокументМенеджер_ПодготовитьИДобавитьДокументВПакет(Пакет,	СтрокаСписка.Документ,	"Рассылка_PDF");
		
	Иначе
		
		ВызватьИсключение "Неизвестный вид пакета: " + ВидПакетаРазвернутый.Наименование;	
		
	КонецЕсли;
	
КонецФункции

//Определение используемых пакетов
Функция ПолучитьТаблицуИспользуемыхПакетов()
	
	ТЗ  = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ID");
	ТЗ.Колонки.Добавить("Наименование");
	
	ДобавитьСтрокуВТаблицуЗначений(ТЗ, "ID_ОсновнойПакет",	"Основной пакет");
	ДобавитьСтрокуВТаблицуЗначений(ТЗ, "ID_АктСверки", 		"Акт сверки");
	ДобавитьСтрокуВТаблицуЗначений(ТЗ, "ID_Рассылка", 		"Рассылка");
	
	Возврат ТЗ;
	
КонецФункции

//Определение используемых видов документов, включаемых в пакеты
Функция ПолучитьТаблицуИспользуемыхВидовДокументов()
	
	ТЗ  = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("ID");
	ТЗ.Колонки.Добавить("Наименование");
	ТЗ.Колонки.Добавить("ТипДокумента");
	
	ДобавитьСтрокуВТаблицуЗначений(ТЗ, "ID_СчетФактура","Счет-фактура", "Invoice");
	ДобавитьСтрокуВТаблицуЗначений(ТЗ, "ID_ТОРГ12", 	"ТОРГ-12", 		"XmlTorg12");
	ДобавитьСтрокуВТаблицуЗначений(ТЗ, "ID_АктСверки", 	"Акт сверки", 	"ReconciliationAct");
	ДобавитьСтрокуВТаблицуЗначений(ТЗ, "ID_Рассылка", 	"Рассылка", 	"Nonformalized");

	Возврат ТЗ;
	
КонецФункции

//} СОБЫТИЯ ПОДКЛЮЧАЕМОГО МОДУЛЯ


//**************************************
//{	МЕТОДЫ ДЛЯ ЗАПОЛНЕНИЯ КОНТЕНТА

//#КонецОбласти

Процедура Заполнить_AcceptanceCertificateBuyerContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/AcceptanceCertificateBuyerContent.html

	УстановитьЗначениеXDTO(Контент, "Complaints",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "SignatureDate",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalInfo",			Неопределено);

	Заполнить_Official						(Контент.Official, Неопределено);
	Заполнить_Attorney						(Контент.Attorney, Неопределено);
	Заполнить_Signer						(Контент.Signer, Неопределено);

КонецПроцедуры

Процедура Заполнить_AcceptanceCertificateContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/AcceptanceCertificateContent.html

	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Grounds",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "VAT",						Неопределено);


КонецПроцедуры

Процедура Заполнить_AcceptanceCertificateItem(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/AcceptanceCertificateItem.html

	УстановитьЗначениеXDTO(Контент, "Name",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Description",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "UnitCode",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "UnitName",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Quantity",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Price",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalWithVatExcluded",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalInfo",			Неопределено);


КонецПроцедуры

Процедура Заполнить_AcceptanceCertificateSellerContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/AcceptanceCertificateSellerContent.html

	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Title",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "SignatureDate",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalInfo",			Неопределено);

	Заполнить_OrganizationInfo				(Контент.Seller, Неопределено);
	Заполнить_Official						(Контент.Official, Неопределено);
	Заполнить_Attorney						(Контент.Attorney, Неопределено);
	Заполнить_Signer						(Контент.Signer, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("Items").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Items.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_AcceptanceCertificateItem(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_AcceptanceContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/AcceptanceContent.html



КонецПроцедуры

Процедура Заполнить_AdditionalInfoId(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/AdditionalInfoId.html

	УстановитьЗначениеXDTO(Контент, "InfoFileId",				Неопределено);



	ТипСтроки = Контент.Свойства().Получить("StructedAdditionalInfos").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.StructedAdditionalInfos.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_StructedAdditionalInfos(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_AdditionalInfoItem(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/AdditionalInfoItem.html

	УстановитьЗначениеXDTO(Контент, "Key",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Value",					Неопределено);


КонецПроцедуры

Процедура Заполнить_AddressInfo(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/AddressInfo.html

	УстановитьЗначениеXDTO(Контент, "IsForeign",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "ZipCode",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "RegionCode",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "Territory",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "City",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Locality",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Street",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Building",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Block",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Apartment",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "CountryCode",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "AddressText",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "AddressCode",				Неопределено);


КонецПроцедуры

Процедура Заполнить_AmountsDiff(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/AmountsDiff.html

	УстановитьЗначениеXDTO(Контент, "Excise",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalWithVatExcluded",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);


КонецПроцедуры

Процедура Заполнить_Attorney(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Attorney.html

	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "IssuerAdditionalInfo",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "IssuerOrganizationName",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "RecipientAdditionalInfo",	Неопределено);

	Заполнить_Official						(Контент.Issuer, Неопределено);
	Заполнить_Official						(Контент.Recipient, Неопределено);

КонецПроцедуры

Процедура Заполнить_BaseContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/BaseContent.html

	УстановитьЗначениеXDTO(Контент, "Type",						Неопределено);


КонецПроцедуры

Процедура Заполнить_BaseDocumentName(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/BaseDocumentName.html

	УстановитьЗначениеXDTO(Контент, "BaseDocumentDate",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "BaseDocumentNumber",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "BaseDocumentName",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalInfo",			Неопределено);


КонецПроцедуры

Процедура Заполнить_ContractContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/ContractContent.html

	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Price",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "ContractType",				Неопределено);


КонецПроцедуры

Процедура Заполнить_CorrectionRequestContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/CorrectionRequestContent.html

	УстановитьЗначениеXDTO(Контент, "Comment",					Неопределено);

	Заполнить_Signer						(Контент.Signer, Неопределено);

КонецПроцедуры

Процедура Заполнить_CustomDeclaration(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/CustomDeclaration.html

	УстановитьЗначениеXDTO(Контент, "CountryCode",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "DeclarationNumber",		Неопределено);


КонецПроцедуры

Процедура Заполнить_Employee(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Employee.html

	УстановитьЗначениеXDTO(Контент, "EmployeePosition",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "EmployeeInfo",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "EmployeeBase",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "Surname",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "FirstName",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "Patronymic",				Неопределено);


КонецПроцедуры

Процедура Заполнить_EventContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/EventContent.html

	УстановитьЗначениеXDTO(Контент, "CostChangeInfo",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "TransferDocDetails",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "OperationContent",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "NotificationDate",			Неопределено);



	ТипСтроки = Контент.Свойства().Получить("CorrectionBases").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.CorrectionBases.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_BaseDocumentName(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_ExtendedInvoiceCorrectionItem(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/ExtendedInvoiceCorrectionItem.html

	УстановитьЗначениеXDTO(Контент, "Product",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "ItemAccountDebit",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "ItemAccountCredit",		Неопределено);

	Заполнить_InvoiceItemFields				(Контент.OriginalValues, Неопределено);
	Заполнить_InvoiceItemFields				(Контент.CorrectedValues, Неопределено);
	Заполнить_AmountsDiff					(Контент.AmountsInc, Неопределено);
	Заполнить_AmountsDiff					(Контент.AmountsDec, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("StructedAdditionalInfos").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.StructedAdditionalInfos.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_StructedAdditionalInfos(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_ExtendedInvoiceItem(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/ExtendedInvoiceItem.html

	УстановитьЗначениеXDTO(Контент, "Product",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "UnitCode",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "UnitName",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Quantity",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Price",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Excise",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TaxRate",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "SubtotalWithVatExcluded",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Subtotal",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "ItemMark",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalProperty",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "VendorCode",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "ToRelease",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "AccountDebit",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "AccountCredit",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "СсылкаНаЕИ",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "СтранаПроисхожденияСсылка",Неопределено);
	УстановитьЗначениеXDTO(Контент, "ЕдиницаИзмеренияСсылка",	Неопределено);



	ТипСтроки = Контент.Свойства().Получить("CustomDeclarations").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.CustomDeclarations.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_CustomDeclaration(НовЭлемент, Неопределено);
	
	КонецЦикла;



	ТипСтроки = Контент.Свойства().Получить("StructedAdditionalInfos").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.StructedAdditionalInfos.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_AdditionalInfoItem(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_ExtendedOrganizationInfo(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/ExtendedOrganizationInfo.html

	УстановитьЗначениеXDTO(Контент, "BoxId",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Name",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Inn",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Kpp",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "FnsParticipantId",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Type",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Okopf",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Okpo",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Okpd",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Phone",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Email",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "CorrespondentAccount",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "BankAccountNumber",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "BankName",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "BankId",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Department",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalInfo",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "OrganizationOrPersonInfo",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "IndividualEntityRegistrationCertificate",Неопределено);
	УстановитьЗначениеXDTO(Контент, "Ссылка",					Неопределено);

	Заполнить_AddressInfo					(Контент.Address, Неопределено);

КонецПроцедуры

Процедура Заполнить_ExtendedSigner(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/ExtendedSigner.html

	УстановитьЗначениеXDTO(Контент, "BoxId",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "CertificateThumbprint",	Неопределено);

	Заполнить_ExtendedSignerDetails			(Контент.SignerDetails, Неопределено);

КонецПроцедуры

Процедура Заполнить_ExtendedSignerDetails(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/ExtendedSignerDetails.html

	УстановитьЗначениеXDTO(Контент, "FirstName",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "Surname",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Patronymic",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "JobTitle",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Inn",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "RegistrationCertificate",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "SignerType",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "OrganizationName",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "SignerInfo",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "Powers",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Status",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "PowersBase",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "OrganizationPowersBase",	Неопределено);


КонецПроцедуры

Процедура Заполнить_FormalizedRejectionContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/FormalizedRejectionContent.html

	УстановитьЗначениеXDTO(Контент, "Comment",					Неопределено);

	Заполнить_Signer						(Контент.Signer, Неопределено);

КонецПроцедуры

Процедура Заполнить_InvoiceContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceContent.html

	УстановитьЗначениеXDTO(Контент, "InvoiceVersion",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "InvoiceRevisionDate",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "InvoiceRevisionNumber",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "Currency",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "ВалютаСсылка",				Неопределено);

	Заполнить_OrganizationInfo				(Контент.Seller, Неопределено);
	Заполнить_OrganizationInfo				(Контент.Buyer, Неопределено);
	Заполнить_ShipperOrConsigneeInfo		(Контент.Shipper, Неопределено);
	Заполнить_ShipperOrConsigneeInfo		(Контент.Consignee, Неопределено);
	Заполнить_Signer						(Контент.Signer, Неопределено);
	Заполнить_InvoiceTotals					(Контент.Totals, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("Items").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Items.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_InvoiceItem(НовЭлемент, Неопределено);
	
	КонецЦикла;



	ТипСтроки = Контент.Свойства().Получить("PaymentDocuments").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.PaymentDocuments.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_PaymentDocument(НовЭлемент, Неопределено);
	
	КонецЦикла;



	ТипСтроки = Контент.Свойства().Получить("StructedAdditionalInfos").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.StructedAdditionalInfos.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_AdditionalInfoItem(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_InvoiceCorrectionContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceCorrectionContent.html

	УстановитьЗначениеXDTO(Контент, "InvoiceVersion",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "InvoiceCorrectionDate",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "InvoiceCorrectionNumber",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "InvoiceCorrectionRevisionDate",Неопределено);
	УстановитьЗначениеXDTO(Контент, "InvoiceCorrectionRevisionNumber",Неопределено);
	УстановитьЗначениеXDTO(Контент, "Currency",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "ВалютаСсылка",				Неопределено);



	ТипСтроки = Контент.Свойства().Получить("OriginalInvoices").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.OriginalInvoices.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_OriginalInvoice(НовЭлемент, Неопределено);
	
	КонецЦикла;

	Заполнить_OrganizationInfo				(Контент.Seller, Неопределено);
	Заполнить_OrganizationInfo				(Контент.Buyer, Неопределено);
	Заполнить_Signer						(Контент.Signer, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("Items").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Items.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_InvoiceCorrectionItem(НовЭлемент, Неопределено);
	
	КонецЦикла;

	Заполнить_InvoiceTotalsDiff				(Контент.TotalsInc, Неопределено);
	Заполнить_InvoiceTotalsDiff				(Контент.TotalsDec, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("StructedAdditionalInfos").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.StructedAdditionalInfos.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_AdditionalInfoItem(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_InvoiceCorrectionItem(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceCorrectionItem.html

	УстановитьЗначениеXDTO(Контент, "Product",					Неопределено);

	Заполнить_InvoiceItemFields				(Контент.OriginalValues, Неопределено);
	Заполнить_InvoiceItemFields				(Контент.CorrectedValues, Неопределено);
	Заполнить_AmountsDiff					(Контент.AmountsInc, Неопределено);
	Заполнить_AmountsDiff					(Контент.AmountsDec, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("StructedAdditionalInfos").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.StructedAdditionalInfos.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_AdditionalInfoItem(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_InvoiceCorrectionTable(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceCorrectionTable.html




	ТипСтроки = Контент.Свойства().Получить("Items").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Items.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_ExtendedInvoiceCorrectionItem(НовЭлемент, Неопределено);
	
	КонецЦикла;

	Заполнить_InvoiceTotalsDiff				(Контент.TotalsInc, Неопределено);
	Заполнить_InvoiceTotalsDiff				(Контент.TotalsDec, Неопределено);

КонецПроцедуры

Процедура Заполнить_InvoiceForCorrectionInfo(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceForCorrectionInfo.html

	УстановитьЗначениеXDTO(Контент, "InvoiceDate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "InvoiceNumber",			Неопределено);



	ТипСтроки = Контент.Свойства().Получить("InvoiceRevisions").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.InvoiceRevisions.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_InvoiceRevisionInfo(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_InvoiceItem(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceItem.html

	УстановитьЗначениеXDTO(Контент, "CountriesOfOrigin",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "Product",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "UnitCode",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Quantity",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Price",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TaxRate",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Excise",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalWithVatExcluded",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "СсылкаНаЕИ",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "СтранаПроисхожденияСсылка",Неопределено);
	УстановитьЗначениеXDTO(Контент, "CustomsDeclarationNumbers",Неопределено);
	УстановитьЗначениеXDTO(Контент, "ЕдиницаИзмеренияСсылка",	Неопределено);



	ТипСтроки = Контент.Свойства().Получить("StructedAdditionalInfos").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.StructedAdditionalInfos.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_AdditionalInfoItem(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_InvoiceItemFields(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceItemFields.html

	УстановитьЗначениеXDTO(Контент, "UnitCode",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Quantity",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Price",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TaxRate",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Excise",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalWithVatExcluded",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);


КонецПроцедуры

Процедура Заполнить_InvoiceRevisionInfo(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceRevisionInfo.html

	УстановитьЗначениеXDTO(Контент, "RevisionDate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "RevisionNumber",			Неопределено);


КонецПроцедуры

Процедура Заполнить_InvoiceTable(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceTable.html

	УстановитьЗначениеXDTO(Контент, "TotalWithVatExcluded",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalNet",					Неопределено);



	ТипСтроки = Контент.Свойства().Получить("Items").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Items.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_ExtendedInvoiceItem(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_InvoiceTotals(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceTotals.html

	УстановитьЗначениеXDTO(Контент, "TotalWithVatExcluded",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);


КонецПроцедуры

Процедура Заполнить_InvoiceTotalsDiff(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/InvoiceTotalsDiff.html

	УстановитьЗначениеXDTO(Контент, "TotalWithVatExcluded",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);


КонецПроцедуры

Процедура Заполнить_NonformilizedContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/NonformilizedContent.html

	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "NeedRecipientSignature",	Неопределено);


КонецПроцедуры

Процедура Заполнить_Official(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Official.html

	УстановитьЗначениеXDTO(Контент, "FirstName",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "Surname",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Patronymic",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "JobTitle",					Неопределено);


КонецПроцедуры

Процедура Заполнить_OrganizationInfo(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/OrganizationInfo.html

	УстановитьЗначениеXDTO(Контент, "IsSoleProprietor",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Name",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Inn",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Kpp",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Phone",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Fax",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Okopf",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Okpo",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "BankAccountNumber",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "BankId",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "BankName",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Ссылка",					Неопределено);

	Заполнить_AddressInfo					(Контент.Address, Неопределено);

КонецПроцедуры

Процедура Заполнить_OriginalInvoice(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/OriginalInvoice.html

	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "InvoiceRevisionDate",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "InvoiceRevisionNumber",	Неопределено);


КонецПроцедуры

Процедура Заполнить_OtherIssuer(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/OtherIssuer.html

	УстановитьЗначениеXDTO(Контент, "EmployeePosition",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "EmployeeInfo",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "OrganizationName",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "OrganizationBase",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "EmployeeBase",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "Surname",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "FirstName",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "Patronymic",				Неопределено);


КонецПроцедуры

Процедура Заполнить_PaymentDocument(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/PaymentDocument.html

	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);


КонецПроцедуры

Процедура Заполнить_ProformaInvoiceContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/ProformaInvoiceContent.html

	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Grounds",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);


КонецПроцедуры

Процедура Заполнить_RejectionContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/RejectionContent.html

	УстановитьЗначениеXDTO(Контент, "Comment",					Неопределено);


КонецПроцедуры

Процедура Заполнить_Shipper(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Shipper.html

	УстановитьЗначениеXDTO(Контент, "SameAsSeller",				Неопределено);

	Заполнить_ExtendedOrganizationInfo		(Контент.OrganizationInfo, Неопределено);

КонецПроцедуры

Процедура Заполнить_ShipperOrConsigneeInfo(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/ShipperOrConsigneeInfo.html

	УстановитьЗначениеXDTO(Контент, "IsSoleProprietor",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Name",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "SameAsSellerOrBuyer",		Неопределено);

	Заполнить_AddressInfo					(Контент.Address, Неопределено);

КонецПроцедуры

Процедура Заполнить_Signer(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Signer.html

	УстановитьЗначениеXDTO(Контент, "IsSoleProprietor",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Inn",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "FirstName",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "Surname",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Patronymic",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "JobTitle",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "SoleProprietorRegistrationCertificate",Неопределено);


КонецПроцедуры

Процедура Заполнить_StructedAdditionalInfos(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/StructedAdditionalInfos.html

	УстановитьЗначениеXDTO(Контент, "Key",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Value",					Неопределено);


КонецПроцедуры

Процедура Заполнить_Torg12BuyerContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Torg12BuyerContent.html

	УстановитьЗначениеXDTO(Контент, "ShipmentReceiptDate",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalInfo",			Неопределено);

	Заполнить_Attorney						(Контент.Attorney, Неопределено);
	Заполнить_Official						(Контент.Receiver, Неопределено);
	Заполнить_Official						(Контент.Accepter, Неопределено);
	Заполнить_Signer						(Контент.Signer, Неопределено);

КонецПроцедуры

Процедура Заполнить_Torg12Commons(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Torg12Commons.html

	УстановитьЗначениеXDTO(Контент, "TotalParcelsQuantity",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalGrossQuantity",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalQuantity",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalSum",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalParcelsQuantityInWords",Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalGrossQuantityInWords",Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalQuantityInWords",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalSumInWords",			Неопределено);


КонецПроцедуры

Процедура Заполнить_Torg12Item(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Torg12Item.html

	УстановитьЗначениеXDTO(Контент, "Product",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "ProductCode",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "Feature",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Sort",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Article",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "UnitCode",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "UnitName",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "ParcelsQuantity",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "ParcelType",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "ParcelCapacity",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "GrossQuantity",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Quantity",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Price",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalWithVatExcluded",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "TaxRate",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalInfo",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "ExternalCode",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "СсылкаНаЕИ",				Неопределено);


КонецПроцедуры

Процедура Заполнить_Torg12SellerContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Torg12SellerContent.html

	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "WaybillDate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "WaybillNumber",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "OperationCode",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "GroundName",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "GroundDate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "GroundNumber",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "ShipperDepartment",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "ShipperOkdp",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "AttachmentSheetsQuantity",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "SupplyDate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalInfo",			Неопределено);

	Заполнить_OrganizationInfo				(Контент.Seller, Неопределено);
	Заполнить_OrganizationInfo				(Контент.Buyer, Неопределено);
	Заполнить_OrganizationInfo				(Контент.Shipper, Неопределено);
	Заполнить_OrganizationInfo				(Контент.Consignee, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("Items").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Items.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_Torg12Item(НовЭлемент, Неопределено);
	
	КонецЦикла;

	Заполнить_Torg12Totals					(Контент.Totals, Неопределено);
	Заполнить_Torg12Commons					(Контент.Commons, Неопределено);
	Заполнить_Official						(Контент.SupplyAllowedBy, Неопределено);
	Заполнить_Official						(Контент.ChiefAccountant, Неопределено);
	Заполнить_Official						(Контент.SupplyPerformedBy, Неопределено);
	Заполнить_Signer						(Контент.Signer, Неопределено);

КонецПроцедуры

Процедура Заполнить_Torg12Totals(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Torg12Totals.html

	УстановитьЗначениеXDTO(Контент, "ParcelsQuantity",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "GrossQuantity",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Quantity",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "TotalWithVatExcluded",		Неопределено);
	УстановитьЗначениеXDTO(Контент, "Vat",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Total",					Неопределено);


КонецПроцедуры

Процедура Заполнить_TransferBase(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/TransferBase.html

	УстановитьЗначениеXDTO(Контент, "DocumentName",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "DocumentNumber",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "DocumentDate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "DocumentInfo",				Неопределено);


КонецПроцедуры

Процедура Заполнить_TransferInfo(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/TransferInfo.html

	УстановитьЗначениеXDTO(Контент, "OperationInfo",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "OperationType",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "TransferDate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "TransferTextInfo",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "CreatedThingTransferDate",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "CreatedThingInfo",			Неопределено);

	Заполнить_ExtendedOrganizationInfo		(Контент.Carrier, Неопределено);
	Заполнить_Employee						(Контент.Employee, Неопределено);
	Заполнить_OtherIssuer					(Контент.OtherIssuer, Неопределено);
	Заполнить_AdditionalInfoId				(Контент.AdditionalInfoId, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("TransferBases").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.TransferBases.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_TransferBase(НовЭлемент, Неопределено);
	
	КонецЦикла;



	ТипСтроки = Контент.Свойства().Получить("Waybills").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Waybills.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_Waybill(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_UcdSellerContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/UcdSellerContent.html

	УстановитьЗначениеXDTO(Контент, "Function",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Name",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Currency",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "CurrencyRate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "RevisionDate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "RevisionNumber",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Creator",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "CreatorBase",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "GovernmentContractInfo",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "ВалютаСсылка",				Неопределено);



	ТипСтроки = Контент.Свойства().Получить("Invoices").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Invoices.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_InvoiceForCorrectionInfo(НовЭлемент, Неопределено);
	
	КонецЦикла;

	Заполнить_ExtendedOrganizationInfo		(Контент.Seller, Неопределено);
	Заполнить_ExtendedOrganizationInfo		(Контент.Buyer, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("Signers").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Signers.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_ExtendedSigner(НовЭлемент, Неопределено);
	
	КонецЦикла;

	Заполнить_EventContent					(Контент.EventContent, Неопределено);
	Заполнить_InvoiceCorrectionTable		(Контент.InvoiceCorrectionTable, Неопределено);
	Заполнить_AdditionalInfoId				(Контент.AdditionalInfoId, Неопределено);

КонецПроцедуры

Процедура Заполнить_UtdBuyerContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/UtdBuyerContent.html

	УстановитьЗначениеXDTO(Контент, "Creator",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "CreatorBase",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "OperationCode",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "AcceptanceDate",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "AdditionalInfoId",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "OperationContent",			Неопределено);

	Заполнить_Employee						(Контент.Employee, Неопределено);
	Заполнить_OtherIssuer					(Контент.OtherIssuer, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("Signers").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Signers.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_ExtendedSigner(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_UtdSellerContent(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/UtdSellerContent.html

	УстановитьЗначениеXDTO(Контент, "Function",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Name",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Date",						Неопределено);
	УстановитьЗначениеXDTO(Контент, "Number",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "Currency",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "CurrencyRate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "RevisionDate",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "RevisionNumber",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "Creator",					Неопределено);
	УстановитьЗначениеXDTO(Контент, "CreatorBase",				Неопределено);
	УстановитьЗначениеXDTO(Контент, "GovernmentContractInfo",	Неопределено);
	УстановитьЗначениеXDTO(Контент, "ВалютаСсылка",				Неопределено);

	Заполнить_ExtendedOrganizationInfo		(Контент.Seller, Неопределено);
	Заполнить_ExtendedOrganizationInfo		(Контент.Buyer, Неопределено);
	Заполнить_Shipper						(Контент.Shipper, Неопределено);
	Заполнить_ExtendedOrganizationInfo		(Контент.Consignee, Неопределено);
	Заполнить_InvoiceTable					(Контент.InvoiceTable, Неопределено);
	Заполнить_AdditionalInfoId				(Контент.AdditionalInfoId, Неопределено);
	Заполнить_TransferInfo					(Контент.TransferInfo, Неопределено);


	ТипСтроки = Контент.Свойства().Получить("Signers").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.Signers.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_ExtendedSigner(НовЭлемент, Неопределено);
	
	КонецЦикла;



	ТипСтроки = Контент.Свойства().Получить("PaymentDocuments").Тип.Имя;
	Для Сч=1 По 0 Цикл
		
		НовЭлемент = Контент.PaymentDocuments.Добавить(НовыйКонтент(ТипСтроки));
		Заполнить_PaymentDocument(НовЭлемент, Неопределено);
	
	КонецЦикла;


КонецПроцедуры

Процедура Заполнить_Waybill(Контент,Параметры)

	// Документация: http://1c-docs.diadoc.ru/ru/latest/Waybill.html

	УстановитьЗначениеXDTO(Контент, "DocumentNumber",			Неопределено);
	УстановитьЗначениеXDTO(Контент, "DocumentDate",				Неопределено);


КонецПроцедуры
//#Область ПодключаемыйМодуль_КонецПримера

//}	МЕТОДЫ ДЛЯ ЗАПОЛНЕНИЯ КОНТЕНТА

//#КонецОбласти


//{ Настройка
настройки_НаименованияИНоменклатура = Новый Массив;

настройки_НаименованияИНоменклатура.Добавить(Новый Структура("НаименованиеВДокументе, НаименованиеВ1С",
	"Услуга перевалки темных нефтепродуктов", "Услуга перевалки темных нефтепродуктов"));
настройки_НаименованияИНоменклатура.Добавить(Новый Структура("НаименованиеВДокументе, НаименованиеВ1С",
	"Услуга перевалки светлых нефтепродуктов", "Услуга перевалки светлых нефтепродуктов"));
настройки_НаименованияИНоменклатура.Добавить(Новый Структура("НаименованиеВДокументе, НаименованиеВ1С",
	"Услуга перегрузки стабильного газового конденсата", "Услуга перегрузки СГК"));
	
настройки_НаименованиеПоУмолчанию = "Услуга по перевозке темных нефтепродуктов";
настройки_НаименованиеПоУмолчанию = "Услуга 1";
// Отладка
//}