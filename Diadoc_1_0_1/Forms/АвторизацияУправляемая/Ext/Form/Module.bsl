
&НаКлиенте
Перем Платформа Экспорт;

&НаСервере
Перем мОбработкаОбъект;

&НаКлиенте
Перем ОсновнаяФорма;

//{		Сервисные методы
	

// Заглушка для совместимости с управляемыми формами	
&НаСервере
Функция ОбработкаОбъект()
	
	Если мОбработкаОбъект=Неопределено Тогда
		
		Если Не ЭтоУправляемаяФорма() Тогда
			мОбработкаОбъект = Вычислить("ОбработкаОбъект");
		Иначе
			мОбработкаОбъект = Вычислить("РеквизитФормыВЗначение(""Объект"")");
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат мОбработкаОбъект;
	
КонецФункции
	
&НаКлиенте
Функция ОсновнаяФорма() Экспорт

	Если ОсновнаяФорма = Неопределено Тогда
		ОсновнаяФорма= ВладелецФормы.ОсновнаяФорма();
	КонецЕсли;	
	
	Возврат ОсновнаяФорма;
	
КонецФункции

&НаСервере
Функция ЭтоУправляемаяФорма()
	
	Возврат (СтрДлина(ТипЗнч(ЭтаФорма))>5);
	
КонецФункции

//}		Сервисные методы

&НаКлиенте
Функция Модуль_РаботаСКомпонентой()
	Возврат ОсновнаяФорма().Модуль_РаботаСКомпонентой();
КонецФункции


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	//ПлатформаПриСозданииНаСервере(Отказ, СтандартнаяОбработка);
	
	Параметры.Свойство("Организация", Организация);
	
	Если Параметры.Свойство("Режим") Тогда
		Режим = Параметры.Режим;
	Иначе
		Режим = "АвторизацияПоСертификату";
	КонецЕсли;
	
	Если Режим = "ВыборСертификата" Тогда
		Элементы.ПереключениеРежимаВхода.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	//ЭтаФорма.Заголовок = "Авторизация в " + Платформа.ПараметрыКлиент.СловарьWL.КраткоеНаименованиеСистемыПредложныйПадеж;
	
	Элементы.ТаблицаСертификатовИздатель.Видимость = Ложь;
	Элементы.ТаблицаСертификатовКонтур.Видимость = Ложь;
	Элементы.ТаблицаСертификатовВДиадоке.Видимость = Ложь;
	Элементы.ТаблицаСертификатовОшибка.Видимость = Ложь;
	Элементы.ТаблицаСертификатовОтпечатокСертификата.Видимость = Ложь;
	
	Модуль_РаботаСКомпонентой().ЗаполнитьТаблицуСертификатов(ТаблицаСертификатов, ?(Режим = "ВыборОблачногоСертификата", Ложь, Истина));
	
	ОбновитьПредставлениеПоРежиму();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии()
	
	//ПлатформаПриЗакрытии();
	
КонецПроцедуры

&НаКлиенте
Процедура УправлениеВидимостью()
	
	Если Режим = "АвторизацияПоЛогину" Тогда
		Элементы.Комментарий.Видимость=	Ложь;
	Иначе
		Элементы.Комментарий.Видимость=	Истина;
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ВойтиВСистему(Команда)
	ВыбратьНажатие("");
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНажатие(Элемент)
	
	DiadocConnection = Неопределено;

	Интерпретация= "";
		
	ПредставлениеПользователя = "Неизвестный пользователь";
	Если Режим = "АвторизацияПоСертификату" ИЛИ Режим = "ВыборСертификата" Или Режим = "ВыборОблачногоСертификата" Тогда
		
		ТекДанные = Элементы.ТаблицаСертификатов.ТекущиеДанные;
		
		Если ТекДанные = Неопределено ИЛИ НЕ ТекДанные.ВДиадоке И Не Режим = "ВыборОблачногоСертификата" Тогда
			мПоказатьПредупреждение(, "Данный сертификат не имеет доступа в Диадок, выберите другой действующий сертификат", 120, "Диадок");
			Возврат;
		КонецЕсли;
		
		текСертификат = ТекДанные.ОтпечатокСертификата;
		Если Не Режим = "ВыборОблачногоСертификата" Тогда
			Попытка
				ВыполнитьАвторизацию("Сертификат",,,текСертификат);
				ПредставлениеПользователя = ТекДанные.Наименование;
			Исключение
				Сообщить(ОписаниеОшибки());
				ЭтаФорма.ТекущийЭлемент = Элементы.ТаблицаСертификатов;
			КонецПопытки;
		КонецЕсли;
		
		Если Режим = "ВыборСертификата" Или Режим = "ВыборОблачногоСертификата" Тогда
			
			СтруктураДанныхВыборанногоСертификата = Новый Структура;
			СтруктураДанныхВыборанногоСертификата.Вставить("ОтпечатокСертификата", ТекДанные.ОтпечатокСертификата);
			СтруктураДанныхВыборанногоСертификата.Вставить("ПредставлениеСертификата", ТекДанные.Наименование+" - "+ТекДанные.Организация+" ["+ТекДанные.ИНН+"/"+ТекДанные.КПП+"] "+Формат(ТекДанные.ДатаВыдачи,"ДФ=dd.MM.yy")+"-"+Формат(ТекДанные.СрокДействия,"ДФ=dd.MM.yy"));
			СтруктураДанныхВыборанногоСертификата.Вставить("Облачный", ?(Режим = "ВыборОблачногоСертификата", Истина, Ложь));
			Закрыть(СтруктураДанныхВыборанногоСертификата);
			Возврат;
			
		КонецЕсли;
		
	Иначе
		
		Логин=	СокрЛП(Логин);
		
		Если ПустаяСтрока(Логин) Тогда
			мПоказатьПредупреждение(, "Заполните логин", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			ЭтаФорма.ТекущийЭлемент = Элементы.Логин;
			Возврат;
		КонецЕсли;
		
		Если ПустаяСтрока(Пароль) Тогда
			мПоказатьПредупреждение(, "Заполните пароль", 120, Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
			ЭтаФорма.ТекущийЭлемент = Элементы.Пароль;
			Возврат;
		КонецЕсли;
		
		текСертификат = "login:" + Логин;
		Попытка
			ВыполнитьАвторизацию("Пароль",Логин,Пароль,);
			ПредставлениеПользователя = Логин;
		Исключение
			текстОшибки = ОписаниеОшибки();

		КонецПопытки;
		
	КонецЕсли;
	
	Если Модуль_РаботаСКомпонентой().ЭДО_СерверДиадок_ПроверитьСоединение() Тогда
		
		СтруктураНастроек = Новый Структура;
		СтруктураНастроек.Вставить("ДиадокПоследнийСертификатПользователя"	 , текСертификат);
		СтруктураНастроек.Вставить("ДиадокПоследнееПредставлениеПользователя", ПредставлениеПользователя);
				
		Закрыть(Новый Структура("DiadocConnection, ПредставлениеПользователя", DiadocConnection, ПредставлениеПользователя));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьАвторизацию(РежимАвторизации,мЛогин=Неопределено,мПароль=Неопределено,мОтпечатокСертификата=Неопределено)
	
	//Авторизуемся в компоненте
	РезультатАвторизации = Модуль_РаботаСКомпонентой().ЭДО_СерверДиадок_Авторизоваться(РежимАвторизации, мЛогин, мПароль, мОтпечатокСертификата);
	
	Успешно = (ПустаяСтрока(РезультатАвторизации));
	
	Если Не Успешно Тогда
		
		Попытка
			Выполнить("Предупреждение(РезультатАвторизации)");
		Исключение
			Выполнить("ПоказатьПредупреждение(,РезультатАвторизации)");
		КонецПопытки;
		
		Возврат Успешно;
	КонецЕсли;
	
	Оповестить("Диадок_АвторизацияВыполнена");
	
	Возврат Успешно;
	
КонецФункции


&НаКлиенте
Процедура ПереключениеРежимаВходаНажатие(Элемент, СтандартнаяОбработка)
	Режим = ? (Режим ="АвторизацияПоСертификату", "АвторизацияПоЛогину",  "АвторизацияПоСертификату");
	УправлениеВидимостью();
	ОбновитьПредставлениеПоРежиму();
	СтандартнаяОбработка = ложь;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСертификатовВыбор(Элемент, ВыбраннаяСтрока, Колонка, СтандартнаяОбработка)
	ВыбратьНажатие("");
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСертификатовПриАктивизацииСтроки(Элемент)
	
	Если НЕ Элементы.ТаблицаСертификатов.ТекущиеДанные = Неопределено Тогда
		Если НЕ Элементы.ТаблицаСертификатов.ТекущиеДанные.ВДиадоке Тогда
			//Комментарий = Элементы.ТаблицаСертификатов.ТекущиеДанные.Ошибка;
			//ЗаписатьЗначениеРеквизитаФормы(Элементы.ТаблицаСертификатов.ТекущиеДанные.Ошибка,"Комментарий");
			Комментарий =Элементы.ТаблицаСертификатов.ТекущиеДанные.Ошибка;
		Иначе
			Комментарий = "";
			//ЗаписатьЗначениеРеквизитаФормы(Элементы.ТаблицаСертификатов.ТекущиеДанные.Ошибка,"");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСертификатовПередУдалением(Элемент, Отказ)
	Отказ = истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСертификатовПередНачаломИзменения(Элемент, Отказ)
	Отказ = истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаСертификатовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ=	Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеПоРежиму()
	
	Если Режим = "АвторизацияПоСертификату" ИЛИ Режим = "ВыборСертификата" Или Режим = "ВыборОблачногоСертификата" Тогда
		Элементы.РежимыАвторизации.ТекущаяСтраница = Элементы.СтраницаВходПоСертификату;
		ЗаписатьЗначениеРеквизитаФормы("Войти по логину и паролю", "ПереключениеРежимаВхода");
	Иначе
		Элементы.РежимыАвторизации.ТекущаяСтраница = Элементы.СтраницаВходПоЛогину;
		ЗаписатьЗначениеРеквизитаФормы("Войти по сертификату", "ПереключениеРежимаВхода");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыводаОшибкиИнтернет()
	
	//МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибкиИнтернет",,ЭтаФорма, "ОбработчикВыводОшибкиИнтернет");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуВыводаОшибки(Результат)
	
	ПараметрыФормы=	Новый Структура();
	ПараметрыФормы.Вставить("Заголовок", 		"Ошибка работы с модулем " + Платформа.ПараметрыКлиент.СловарьWL.НаименованиеСистемы);
	ПараметрыФормы.Вставить("ОписаниеОшибки", 	Результат.ОписаниеОшибки);
	ПараметрыФормы.Вставить("Подробности", 		Результат.Подробности);
	
	//МетодКлиента(,"ОткрытьФормуОбработкиМодально", "Форма_ВыводОшибки", ПараметрыФормы, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыводОшибкиИнтернет(РезультатВыбора, ДополнительныеПараметры) Экспорт
	Закрыть();
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеРеквизитаФормы(ИмяРеквизита)
	мас = Новый Массив;
	мас.Добавить(Тип("ТаблицаЗначений"));
	мас.Добавить(Тип("ДеревоЗначений"));
		
	ТипРеквизита =ТипЗнч(ЭтаФорма[ИмяРеквизита]); 
	Если (Мас.Найти(ТипРеквизита) <> Неопределено) Или (Найти(ВРЕГ(ТипРеквизита), "ОБЪЕКТ") <> 0) тогда
		Возврат РеквизитФормыВЗначение(ИмяРеквизита);
	Иначе
		Возврат ЭтаФорма[ИмяРеквизита];
	конецесли;
КонецФункции

&НаСервере
Функция ЗаписатьЗначениеРеквизитаФормы(Значение,ИмяРеквизита)

	мас = Новый Массив;
	мас.Добавить(Тип("ТаблицаЗначений"));
	мас.Добавить(Тип("ДеревоЗначений"));
	
	
	ТипРеквизита =ТипЗнч(ЭтаФорма[ИмяРеквизита]); 
	Если (Мас.Найти(ТипРеквизита) <> Неопределено) Или (Найти(ВРЕГ(ТипРеквизита), "ОБЪЕКТ") <> 0) тогда
		ЗначениеВРеквизитФормы(Значение,ИмяРеквизита);
	Иначе
		ЭтаФорма[ИмяРеквизита] = Значение;
		
	конецесли;
	
	Возврат Истина;
КонецФункции

&НаКлиенте
Процедура мПоказатьПредупреждение(Парам1, Текст=Неопределено, Таймаут=Неопределено, Заголовок=Неопределено)
	//пока просто редирект
	ОсновнаяФорма().Модуль_Платформа().ПоказатьПредупреждениеПереопределенная(Парам1, Текст=Неопределено, Таймаут=Неопределено, Заголовок=Неопределено);
КонецПроцедуры
