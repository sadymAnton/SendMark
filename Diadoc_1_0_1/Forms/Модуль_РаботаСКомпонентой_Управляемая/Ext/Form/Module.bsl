&НаКлиенте
Перем ДиадокАПИ; // COM-объект API Диадока (из компоненты).
&НаКлиенте
Перем СоответствиеСертификатовОрганизаций;
&НаКлиенте
Перем КэшТекущийПользовательДД; //времянка для пользователей организаций, используется для заполнения подписей в документах
&НаКлиенте
Перем РаботаемПоСертификату; //времянка для пользователей организаций, используется для заполнения подписей в документах
&НаКлиенте
Перем ОсновнаяФорма; // ссылка на главную форму

&НаКлиенте
Перем ЛокальныеПараметры; // пусть будет Структура

&НаКлиенте
Перем ПроцессыГенерацииКвитанций; // Соответствие процессов ReceiptGenerationProcess

&НаСервере
Перем мОбработкаОбъект;

//{ Сервисные методы
	
&НаСервере
Функция ЭтоУправляемаяФорма()
	
	Возврат (СтрДлина(ТипЗнч(ЭтаФорма))>5);
	
КонецФункции

// Заглушка для совместимости с управляемыми формами	
&НаСервере
Функция ОбработкаОбъект()
	
	Если мОбработкаОбъект=Неопределено Тогда
		
		Если Не ЭтоУправляемаяФорма() Тогда
			мОбработкаОбъект = Вычислить("ОбработкаОбъект");
		Иначе
			мОбработкаОбъект = Вычислить("РеквизитФормыВЗначение(""Объект"")");			
		КонецЕсли;
				
	КонецЕсли;
	
	Выполнить("мОбработкаОбъект.СоответствиеТокеновBoxID = ?(мСоответствиеТокеновBoxID="""", Новый Соответствие, ЗначениеИзСтрокиВнутр(мСоответствиеТокеновBoxID));");
	
	Возврат мОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Функция ОсновнаяФорма() Экспорт

	Если ОсновнаяФорма = Неопределено Тогда
		ОсновнаяФорма= ВладелецФормы.ОсновнаяФорма();
	КонецЕсли;	
	
	Возврат ОсновнаяФорма;
	
КонецФункции

//} Сервисные методы

//TODO переименовать, отрефакторить для уменьшения серверных вызовов
//Должно вызываться где-то в самом начале работы вместе с другими аналогичными вещами
&НаКлиенте
Функция ЛокальныеПараметры()
		
	Если ЛокальныеПараметры = Неопределено Тогда
		ЛокальныеПараметры = ЛокальныеПараметрыНаСервере();
	КонецЕсли;
	
	Возврат ЛокальныеПараметры;
	
КонецФункции

&НаСервере
Функция ЛокальныеПараметрыНаСервере()
		
	Возврат ОбработкаОбъект().ЭДО_ПолучитьПараметрыДляКлиента();
	
КонецФункции


//**************************************
//{		КОМПОНЕНТА ДИАДОК
//

// Ленивая инициализация. Позволяет при необходимости работать и без установленной компоненты.
&НаКлиенте
Функция ДиадокАПИ() Экспорт
	
	Если ДиадокАПИ=Неопределено Тогда
		ЭДО_КомпонентаДиадок_Инициализировать();
	КонецЕсли;
	Возврат ДиадокАПИ;
	
КонецФункции

&НаКлиенте
Процедура ЭДО_КомпонентаДиадок_Инициализировать()
	
	СуффиксФайлаКомпоненты = ?(ПолучитьРазрядностьПлатформы() = 64, "_x64", "");
	КраткоеИмяДиадок = "Diadoc_" + ЛокальныеПараметры().ВерсияКомпоненты + СуффиксФайлаКомпоненты;
	ПутьКФайлуКомпонентыДД =  КаталогВременныхФайлов() + КраткоеИмяДиадок + ".dll";
	
	// Загружаем компоненту с сервера
	ЭДО_КомпонентаДиадок_ПолучитьФайл(КраткоеИмяДиадок, ПутьКФайлуКомпонентыДД);
	
	ЗагрузилиКомпоненту = Ложь;
	
	//теперь файл есть, подключим компоненту
	Попытка
		//ЗагрузитьВнешнююКомпоненту(ПутьКФайлуКомпонентыДД);	
		ЗагрузилиКомпоненту = ПодключитьВнешнююКомпоненту(ПутьКФайлуКомпонентыДД, "DiadocAPI", ТипВнешнейКомпоненты.COM);		
	Исключение
		Попытка
			//если компонента уже зарегистрирована в системе, попробуем ее инициализировать по имени класса
			ПодключитьВнешнююКомпоненту("AddIn.DiadocInvoiceAPI");    
			ЗагрузилиКомпоненту = Истина;
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки; 
	КонецПопытки;
	
    //и дадим все нужные настройки/объекты модулю
	Если ЗагрузилиКомпоненту Тогда
		
		// создание объекта контекста API
		Addin = Новый("AddIn.DiadocAPI.DiadocInvoiceAPI");
		ДиадокАПИ  = Addin.CreateObject();
		
		ПараметрыЭДО = ЛокальныеПараметры();
		
		//Задаем параметры подлючения к серверу
		ДиадокАПИ.ApiClientId = ПараметрыЭДО.КлючРазработчика;
		ДиадокАПИ.ServerUrl   = "https://diadoc-api.kontur.ru:443";
		
		Если ЗначениеЗаполнено(ПараметрыЭДО.РежимПрокси) Тогда
			ДиадокАПИ.ProxyMode = ПараметрыЭДО.РежимПрокси;
		КонецЕсли;
		
		Если ПараметрыЭДО.РежимПрокси = "UseProxy" Тогда
			ДиадокАПИ.ProxySettings.Url 	=  ПараметрыЭДО.АдресПроксиСервера + ?(ЗначениеЗаполнено(ПараметрыЭДО.ПортПроксиСервера), ":"+ПараметрыЭДО.ПортПроксиСервера, "");
			ДиадокАПИ.ProxySettings.Login 	=  ПараметрыЭДО.ЛогинПроксиСервера;
			ДиадокАПИ.ProxySettings.Password=  ПараметрыЭДО.ПарольПроксиСервера;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭДО_КомпонентаДиадок_ПолучитьФайл(КраткоеИмяДиадок, ПутьКФайлуКомпонентыДД)
	
	// Предполагаем, что компонента будет располагаться в %temp%
	
	ЗагрузилиКомпоненту = Ложь;
	ФайлКомпоненты = Новый Файл(ПутьКФайлуКомпонентыДД);
	
	//если файла нет в темпе, то попробуем загрузить из кэша в базе
	Если Не ФайлКомпоненты.Существует() Тогда
		
		Если ЛокальныеПараметры().КомпонентаВСоставеОбработки Тогда
			
			ПолучитьДвоичныеДанныеИзМакетаНаСервере("Diadoc_dll_zip").Записать(ПутьКФайлуКомпонентыДД + ".zip");
			Распаковщик = Новый ЧтениеZipФайла(ПутьКФайлуКомпонентыДД + ".zip");
			Распаковщик.Извлечь(Распаковщик.Элементы[0], КаталогВременныхФайлов()); 
			Распаковщик = Неопределено;
			
			УдалитьФайлы(ПутьКФайлуКомпонентыДД + ".zip");
			Возврат;

		Иначе
		
			//будем брать из каталога EDI, чтобы максимально облегчить основной модуль
			Попытка
				
				SSL = Вычислить("Новый ЗащищенноеСоединениеOpenSSL()");  // для поддержки совместимости со старыми платформами
				Прокси = Неопределено;
				
				Если ЛокальныеПараметры().РежимПрокси = "UseDefaultProxy" Тогда
					
					Прокси = Новый ИнтернетПрокси(Истина);
					
				ИначеЕсли ЛокальныеПараметры().РежимПрокси = "UseProxy" Тогда
					
					Прокси = Новый ИнтернетПрокси;
					Прокси.Пользователь	= ЛокальныеПараметры().ЛогинПроксиСервера;
					Прокси.Пароль		= ЛокальныеПараметры().ПарольПроксиСервера;
					
					Прокси.Установить("https", ЛокальныеПараметры().АдресПроксиСервера, ЛокальныеПараметры().ПортПроксиСервера);
	
				КонецЕсли;
				
				ДвоичныеДанныеАрхиваКомпоненты = СкачатьДвоичныеДанныеАрхиваКомпонентыНаСервере(КраткоеИмяДиадок);
								
				Если ТипЗнч(ДвоичныеДанныеАрхиваКомпоненты) <> Тип("ДвоичныеДанные") Тогда
					ВызватьИсключение "Не удалось загрузить файл компоненты с сервера!";
				КонецЕсли;
				
				ДвоичныеДанныеАрхиваКомпоненты.Записать(ПутьКФайлуКомпонентыДД + ".zip");
				
				Распаковщик = Новый ЧтениеZipФайла(ПутьКФайлуКомпонентыДД + ".zip");
				Распаковщик.Извлечь(Распаковщик.Элементы[0], КаталогВременныхФайлов()); 
				Распаковщик = Неопределено;
				
				УдалитьФайлы(ПутьКФайлуКомпонентыДД + ".zip");
				
				// здесь исходим из предположения, что в архиве всегда лежит только один файл, и он имеет как раз то имя, которое задумано.
				
			Исключение
				
				Если ФайлКомпоненты.Существует() Тогда
					УдалитьФайлы(ПутьКФайлуКомпонентыДД);
				КонецЕсли;
				
				ФайлКомпоненты = Новый Файл(ПутьКФайлуКомпонентыДД + ".zip");
				Если ФайлКомпоненты.Существует() Тогда
					УдалитьФайлы(ФайлКомпоненты.ПолноеИмя);
				КонецЕсли;
				
				Сообщить("Не удалось загрузить необходимую компоненту Диадок с сервера");
				
			КонецПопытки;	
		
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДвоичныеДанныеИзМакетаНаСервере(ИмяМакета)
	Возврат ОбработкаОбъект().ПолучитьМакет(ИмяМакета)
КонецФункции

&НаСервере
Функция СкачатьДвоичныеДанныеАрхиваКомпонентыНаСервере(КраткоеИмяДиадок)
	Возврат ОбработкаОбъект().ЭДО_Транспорт_СобственноВыполнениеЗапроса("/1c-addin/" + КраткоеИмяДиадок + ".zip", "", Новый Соответствие, "GET", , Истина);
КонецФункции

//}		КОМПОНЕНТА ДИАДОК


//**************************************
//{		СЕРВЕР ДИАДОК
//

&НаСервере
Функция ЭДО_КомпонентаДиадок_ТребуемаяВерсияНаСервере()
	
	Возврат ОбработкаОбъект().ЭДО_КомпонентаДиадок_ТребуемаяВерсия();
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТаблицуСертификатов(ТаблицаСертификатов, Локальные = Истина) Экспорт
	
	ТаблицаСертификатов.Очистить();
	
	Если Локальные Тогда
		Collection = ДиадокАПИ().GetPersonalCertificates();		
		Попытка			
			Для ц = 0 по  Collection.Count-1 цикл 
				
				PersonalCertificate =  Collection.GetItem(ц);
				
				стр = ТаблицаСертификатов.Добавить();
				
				Стр.Наименование			= PersonalCertificate.Name;
				Стр.ДатаВыдачи				= PersonalCertificate.BeginDate;
				Стр.СрокДействия			= PersonalCertificate.EndDate;
				Стр.ОтпечатокСертификата	= PersonalCertificate.Thumbprint;
				Стр.Организация				= PersonalCertificate.OrganizationName;
				Стр.Издатель				= PersonalCertificate.IssuerName;
				Стр.Контур					= PersonalCertificate.IsKontur;
				
				Попытка
					Стр.ИНН = PersonalCertificate.INN;
					Стр.КПП = PersonalCertificate.Kpp;
				Исключение
				КонецПопытки;
				
				Если Стр.СрокДействия < НачалоДня(ТекущаяДата()) Тогда
					Стр.Ошибка = "Срок действия сертификата истек";
					Стр.ВДиадоке = Ложь;
				Иначе
					Стр.ВДиадоке = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
		Исключение
		КонецПопытки;
		
	Иначе
		
		Connection = ПолучитьДиадокСоединение("");
		Если Не Connection = Неопределено Тогда
			User = Connection.GetMyUser();
			Collection = Connection.GetCloudCertificates();
			
			Для сц = 0 По Collection.Count - 1 Цикл
				CloudCertificateInfo = Collection.GetItem(сц);
				стр = ТаблицаСертификатов.Добавить();
				Стр.Наименование			= User.LastName + " " + User.FirstName + " " + User.MiddleName;
				Стр.ДатаВыдачи				= CloudCertificateInfo.ValidFrom;
				Стр.СрокДействия			= CloudCertificateInfo.ValidTo;
				Стр.ОтпечатокСертификата	= CloudCertificateInfo.thumbprint;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
		
	Попытка		
		Для каждого СтрокаТаблицы Из ТаблицаСертификатов Цикл
			Если СтрокаТаблицы.ВДиадоке Тогда
				Если НЕ ДиадокАПИ().VerifyThatUserHasAccessToAnyBox(СтрокаТаблицы.ОтпечатокСертификата) Тогда//очень долго отрабатывает. Лучше перенести в авторизацию
					СтрокаТаблицы.Ошибка = "По сертификату нет доступа в Диадок";
					СтрокаТаблицы.ВДиадоке = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Исключение
		
	КонецПопытки;
		
	ТаблицаСертификатов.Сортировать("ВДиадоке, Наименование, ДатаВыдачи убыв");

КонецПроцедуры

// Для индикации в основной форме
&НаКлиенте
Функция ПредставлениеТекущегоПользователяДиадок() Экспорт
	
	Результат = "";
	
	Если НЕ ЭДО_СерверДиадок_ПроверитьСоединение() Тогда
		
		Результат = "Не авторизован";
		
	Иначе
		Для Каждого текКлючЗначение Из СоответствиеСертификатовОрганизаций Цикл
			
			ДиадокСоединение = текКлючЗначение.Значение.ДиадокСоединение;
			
			//Берем ФИО пользователя только из первого сертификата в коллекции соответствий
			Если Результат = "" Тогда
				User = ДиадокСоединение.GetMyUser();
				Результат = User.LastName+" "+User.FirstName+" "+User.MiddleName;				
			КонецЕсли;
			
			Если ДиадокСоединение.AuthenticateType = "Certificate" Тогда
				Результат = Результат + " / " + ДиадокСоединение.Certificate.OrganizationName + "";
			КонецЕсли;
						
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ЭДО_СерверДиадок_ПроверитьСоединение() Экспорт
	
	Возврат ТипЗнч(СоответствиеСертификатовОрганизаций) = Тип("Соответствие") И СоответствиеСертификатовОрганизаций.Количество()>0;
	
КонецФункции

&НаКлиенте
Функция ЭДО_СерверДиадок_Авторизоваться(РежимАвторизации, Логин=Неопределено, Пароль=Неопределено, ОтпечатокСертификата=Неопределено) Экспорт
	
	Результат = "";  
	
	Если РежимАвторизации = "Пароль" Тогда
		
		Попытка
			
			ДиадокСоединение = ДиадокАПИ().CreateConnectionByLogin(Логин, Пароль);
			РаботаемПоСертификату = Ложь;
					
		Исключение
			
			ОписаниеОшибки = ОписаниеОшибки();
			Если Найти(нрег(ОписаниеОшибки), "wrong password")>0 Тогда
				Результат = "Неправильный логин/пароль";
			Иначе
				Результат = ОписаниеОшибки;
			КонецЕсли;
		
		КонецПопытки;

	ИначеЕсли РежимАвторизации = "Сертификат" Тогда
		
		сткСоединения		= СоздатьСоединениеПоСертификату(ОтпечатокСертификата);
		ДиадокСоединение	= сткСоединения.Соединение;
		Результат			= сткСоединения.ОписаниеОшибки;
		Если Не ДиадокСоединение = Неопределено Тогда
			РаботаемПоСертификату = Истина;
		КонецЕсли;

	КонецЕсли;
		
	Если Результат = "" Тогда
		
		ЗначениеСоответствия = Новый Структура;
		
		ЗначениеСоответствия.Вставить("ОтпечатокСертификата",	?(РежимАвторизации="Пароль", "Login: "+Логин, ОтпечатокСертификата));
		ЗначениеСоответствия.Вставить("Организация",			Неопределено);
		ЗначениеСоответствия.Вставить("ДиадокСоединение",		ДиадокСоединение);
		ЗначениеСоответствия.Вставить("Токен",					ДиадокСоединение.Token);
		
		СоответствиеСертификатовОрганизаций.Вставить("", ЗначениеСоответствия);
		УстановитьСоответствиеТокеновBoxIDНаСервере(ПолучитьСоответствиеТокеновBoxID());
		
	КонецЕсли;
	
	Возврат Результат;

КонецФункции

&НаКлиенте
Функция ЭДО_СерверДиадок_ПолучитьОрганизациюПоID(ОргID, ОблачнаяПодпись = Ложь) Экспорт
	
	Connection = ?(ОблачнаяПодпись, ПолучитьДиадокСоединение(""), ПолучитьДиадокСоединение(ОргID));
	Organization = Connection.GetOrganizationById(ОргID);
	Возврат Organization;
		
КонецФункции

&НаКлиенте
Функция ЭДО_СерверДиадок_ПолучитьКонтрагентаПоID(ОргID, КонтрID) Экспорт
	
	Возврат ПолучитьДиадокСоединение(ОргID).GetOrganizationById(ОргID).GetCounteragentById(КонтрID);
		
КонецФункции

&НаКлиенте
Процедура ЭДО_СерверДиадок_УстановитьПометкуУдаленияПриПеревыставлении(Пакет)
	
	Если ЗначениеЗаполнено(Пакет.Данные1С.ПереотправляемыйПакетСсылка) Тогда
		Для Каждого ДокументПакета Из Пакет.Документы Цикл
			Если ЗначениеЗаполнено(ДокументПакета.ПереотправляемыйДокументСсылка) Тогда
				Если ЛокальныеПараметры.Использовать1СЭДО Тогда
					СтруктураЗначений = ОсновнаяФорма().ПолучитьЗначениеРеквизитаНаСервереБезКонтекста(ДокументПакета.ПереотправляемыйДокументСсылка, Новый Структура("УникальныйИДВнешний,УникальныйИД"));
					FullDocumentId = СокрЛП(СтруктураЗначений.УникальныйИДВнешний)+СокрЛП(СтруктураЗначений.УникальныйИД);
				Иначе
					СтруктураЗначений = ОсновнаяФорма().ПолучитьЗначениеРеквизитаНаСервереБезКонтекста(ДокументПакета.ПереотправляемыйДокументСсылка, Новый Структура("LetterId,DocumentId"));
					FullDocumentId = СтруктураЗначений.LetterId+СтруктураЗначений.DocumentId;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(FullDocumentId) Тогда					
					ДД_Организация = ЭДО_СерверДиадок_ПолучитьОрганизациюПоID(Пакет.ДанныеДД.OrganizationId);
					ДД_Документ = ДД_Организация.GetDocumentById(FullDocumentId);
					ДД_Документ.Delete();					
				КонецЕсли;						
			КонецЕсли;					
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроцессыПодписанияКвитанций(Connection, ОтпечатокСертификата) Экспорт 
	
	Collection = Connection.GetOrganizationList();
	Количество = Collection.Count() - 1;
	
	мOrganizationId = ЛокальныеПараметры().МассивСопоставленныхOrganizationId;
	Для сц = 0 По Количество Цикл
		
		Organization = Collection.GetItem(сц);
		Если Не мOrganizationId.Найти(Organization.Id) = Неопределено Тогда			
			
			Если Organization.CanSendInvoice(ОтпечатокСертификата) = "" Тогда
				ЗапуститьПроцессПодписанияКвитанций(Organization);
				Продолжить;
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроцессПодписанияКвитанций(Organization)
	// Запускает автоматизированное формирование технологических документов: 
	// http://1c-docs.diadoc.ru/ru/latest/Invoice-docflow.html
	
	Если ПроцессыГенерацииКвитанций = Неопределено Тогда
		ПроцессыГенерацииКвитанций = Новый Соответствие;
	КонецЕсли;
	
	Если ПроцессыГенерацииКвитанций.Получить(Organization.Id)=Неопределено Тогда
		
		Если Organization.AuthenticateType = "Certificate" Тогда
			ReceiptGenerationProcess = Organization.GetReceiptGenerationProcess();
			ReceiptGenerationProcess.start();
			ПроцессыГенерацииКвитанций.Вставить(Organization.Id, ReceiptGenerationProcess);
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОстановитьПроцессыПодписанияКвитанций()
	
	// Завершает все процессы ReceiptGenerationProcess
	// http://1c-docs.diadoc.ru/ru/latest/ReceiptGenerationProcess.html
	
	Если ПроцессыГенерацииКвитанций = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого КлючИЗначение Из ПроцессыГенерацииКвитанций Цикл
		КлючИЗначение.Значение.stop();
	КонецЦикла;
	
	ПроцессыГенерацииКвитанций.Очистить();
	
КонецПроцедуры

// Временно скопировано из типового модуля Диадок
&НаКлиенте
Процедура ЭДО_СерверДиадок_ЗаполнитьПодписанта(Content, Organization)
	
	мТекущийПользователь = ЭДО_СерверДиадок_ПолучитьТекущегоПользователя(Organization);
	
	Если ВРег(Content.type) = ВРег("UniversalCorrectionDocument")
		Или ВРег(Content.type) = ВРег("UniversalTransferDocument")
		Или ВРег(Content.type) = ВРег("UniversalTransferDocumentBuyerTitle") Тогда
		
		ExtendedSigner = Content.AddSigner();
		Signer = ExtendedSigner.SignerDetails;
		
		Signer.Status = "SellerEmployee";		
		
		Если ВРег(Content.type) = ВРег("UniversalTransferDocument") Тогда
			Signer.Powers = "MadeAndResponsibleForOperationAndSignedInvoice";
		ИначеЕсли ВРег(Content.type) = ВРег("UniversalCorrectionDocument") Тогда
			Signer.Powers = "ResponsibleForOperationAndSignerForInvoice";
		ИначеЕсли ВРег(Content.type) = ВРег("UniversalTransferDocumentBuyerTitle") Тогда	
			Signer.Powers = "PersonMadeOperation";
		КонецЕсли;
		
		Signer.SignerType = ?(СтрДлина(Organization.Inn) = 12, "IndividualEntity", "LegalEntity");		
		
	Иначе // предполагаем, что во всех остальных видах контента подписант расположен в Signer
		
		Signer = Content.Signer;
		
		Если СтрДлина(Organization.Inn) = 12 Тогда
			//у нас ИП
			//Signer.SoleProprietorRegistrationCertificate = "TEST"; // TODO продумать этот момент
			Signer.IsSoleProprietor = Истина;
		КонецЕсли;
		
	КонецЕсли;	
	
	Если мТекущийПользователь = Неопределено Тогда
		
		Signer.Surname=		"Иванов";
		Signer.FirstName=	"Иван";
		Signer.Patronymic=	"Иванович";
		
	Иначе
		
		Signer.Surname=		мТекущийПользователь.Фамилия;
		Signer.FirstName=	мТекущийПользователь.Имя;
		Signer.Patronymic=	мТекущийПользователь.Отчество;
		Signer.JobTitle = 	мТекущийПользователь.Должность;
		
	КонецЕсли;
	
	Signer.Inn = Organization.Inn;
	
КонецПроцедуры

&НаКлиенте
Функция ЭДО_СерверДиадок_ПолучитьТекущегоПользователя(Organization)
	
	Если КэшТекущийПользовательДД = Неопределено Тогда
		КэшТекущийПользовательДД = Новый Соответствие();
	КонецЕсли;
	
	мТекущийПользователь = КэшТекущийПользовательДД.Получить(Organization.Id);
	
	Если мТекущийПользователь = Неопределено Тогда
		
		Connection = ПолучитьДиадокСоединение(Organization.Id);
		MyUser = Connection.GetMyUser();
		Permissions = Organization.GetUserPermissions();
		
		мТекущийПользователь = Новый Структура;
		мТекущийПользователь.Вставить("ФИО",		СокрЛП(MyUser.LastName + " " + MyUser.FirstName + " " + MyUser.MiddleName));
		мТекущийПользователь.Вставить("Фамилия",	MyUser.LastName);
		мТекущийПользователь.Вставить("Имя",		MyUser.FirstName);
		мТекущийПользователь.Вставить("Отчество",	MyUser.MiddleName);
		мТекущийПользователь.Вставить("Должность",	Permissions.JobTitle);
	
		КэшТекущийПользовательДД.Вставить(Organization.Id, мТекущийПользователь);	
		
	КонецЕсли;
	
	Возврат мТекущийПользователь;
	
	// и хорошо бы научиться передавать это на сервер: например, через временное хранилище.
	
КонецФункции

&НаКлиенте
Функция ЭДО_СформироватьЗаданиеНаОтправкуПакета(Пакет, ОблачнаяПодпись = Ложь)
	
	// список свойств, доступных здесь, описан в ЭДО_ПакетДокументов_ПодготовитьСвойстваДляОтправки_Компонента
	// (имеются в виду те поля, которые нужны для непосредственной отправки)
	
	ДД_Организация = ЭДО_СерверДиадок_ПолучитьОрганизациюПоID(Пакет.ДанныеДД.OrganizationId, ОблачнаяПодпись);

	SendTask = ДД_Организация.CreatePackageSendTask();
	
	ЗаполнитьЗначенияСвойств(SendTask,Пакет.ДанныеДД,"CounteragentId,DelaySend,FromDepartmentId,ToDepartmentId");
	
	Если НЕ ТипЗнч(Пакет.ДанныеДД.DelaySend)=Тип("Булево") Тогда
		// Если никто к этому моменту не указал явно, что пакет надо отправить с задержкой, то сами решим
		SendTask.DelaySend			= НЕ РаботаемПоСертификату;
	КонецЕсли;
	
	Если ЛокальныеПараметры().РежимОтладкиВключен Тогда
		SendTask.DelaySend = Истина; // но при отладке не будем подписывать исходящие документы
	КонецЕсли;
	
	Если ТипЗнч(Пакет.ДанныеДД.LockPackage) = Тип("Булево") Тогда		
		SendTask.LockPackage = Пакет.ДанныеДД.LockPackage;
	КонецЕсли;
	
	Для Каждого ОписаниеДокумента Из Пакет.Документы Цикл
		                                                          
		РезультатДобавления = ДобавитьДокументВПакет(SendTask, ОписаниеДокумента, ДД_Организация);
		Если ЗначениеЗаполнено(РезультатДобавления) Тогда
			// при добавлении документа в пакет возникла ошибка - вероятнее всего, неправильный тип или формат
			Возврат РезультатДобавления;
		КонецЕсли;
		
	КонецЦикла;
	
	// Всем документам в пакете, кроме первого, назначим InitialDocumentId, равный ID первого документа.
	Если НЕ SendTask.LockPackage И SendTask.DocumentsToSend.Count()>1 Тогда
		InitialDocumentId = SendTask.DocumentsToSend.GetItem(0).CustomDocumentId;
		Для Сч=1 По SendTask.DocumentsToSend.Count()-1 Цикл
			SendTask.DocumentsToSend.GetItem(Сч).AddInitialDocumentFromPackage(InitialDocumentId);
		КонецЦикла;
	КонецЕсли;
	
	SendTask.OperationId = Строка(Пакет.Данные1С.Ссылка.УникальныйИдентификатор());//пакет уже сохранен в базу, но в рамках транзакции	
	
	Возврат SendTask;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьМетаданныеНеформализованногоДокумента(Document, ОписаниеДокумента)
	
	// заполним метаданные документа - номер, дату, сумму и т.д.
	Document.FileName = ОписаниеДокумента.ИмяФайла;
	ОписаниеДокумента.Content.Свойство("Date",						Document.DocumentDate);
	ОписаниеДокумента.Content.Свойство("Number",					Document.DocumentNumber);
	Попытка
		ОписаниеДокумента.Content.Свойство("NeedRecipientSignature",	Document.NeedRecipientSignature);
		// документация местами противоречива, поэтому пока через попытку
	Исключение
	КонецПопытки;
	
	СтруктураМетаданныхДокумента = Новый Структура(ЛокальныеПараметры.СоответствиеТиповДокументов[ОписаниеДокумента.Тип].РеквизитыМетаданных);
	
	Если СтруктураМетаданныхДокумента.Свойство("Total") Тогда
		Document.Total	= ОписаниеДокумента.Сумма;
	КонецЕсли;
	
	Если СтруктураМетаданныхДокумента.Свойство("Vat") Тогда
		Document.Vat	= ОписаниеДокумента.СуммаНДС;
	КонецЕсли;
	
	Если СтруктураМетаданныхДокумента.Свойство("ContractPrice") Тогда
		Document.ContractPrice	= ОписаниеДокумента.СуммаДоговора;
	КонецЕсли;
	
	Если СтруктураМетаданныхДокумента.Свойство("ContractType") Тогда
		Document.ContractType	= ОписаниеДокумента.ТипДоговора;
	КонецЕсли;
	
	Если СтруктураМетаданныхДокумента.Свойство("Grounds") Тогда
		Document.Grounds	= ОписаниеДокумента.Основание;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ДобавитьДокументВПакет(SendTask, ОписаниеДокумента, ДД_Организация)
	
	ОписаниеТипаДокумента = ЛокальныеПараметры().СоответствиеТиповДокументов[ОписаниеДокумента.Тип];
	
	Если НЕ ОписаниеТипаДокумента.Формализованный Тогда
		
		Если НЕ ЗначениеЗаполнено(ОписаниеДокумента.ИмяФайла)
			Или ОписаниеДокумента.ДвоичныеДанные = Неопределено Тогда
			Возврат "Некорректно заполнены данные неформализованного документа: " + ОписаниеДокумента.Тип;
		КонецЕсли;
		
		ИмяФайлаДляОтправки = КаталогВременныхФайлов() + ОписаниеДокумента.ИмяФайла;
		ОписаниеДокумента.ДвоичныеДанные.Записать(ИмяФайлаДляОтправки);
		
		Document = SendTask.AddDocumentFromFile(ОписаниеДокумента.Тип, ИмяФайлаДляОтправки);
		ЗаполнитьМетаданныеНеформализованногоДокумента(Document, ОписаниеДокумента);
		
	Иначе  // формализованный
		
		Если ОписаниеДокумента.ДвоичныеДанные<>Неопределено Тогда
			
			ИмяФайлаДляОтправки = ПолучитьИмяВременногоФайла("xml");
			ОписаниеДокумента.ДвоичныеДанные.Записать(ИмяФайлаДляОтправки);
			
			Если ОписаниеДокумента.ОтправлятьКакЕсть = Истина Тогда
				
				Document = SendTask.AddDocumentFromFileRaw(ОписаниеДокумента.Тип, ИмяФайлаДляОтправки);
				
			Иначе
				
				Document = SendTask.AddDocumentFromFile(ОписаниеДокумента.Тип, ИмяФайлаДляОтправки);
				ЭДО_СерверДиадок_ЗаполнитьПодписанта(Document.Content, ДД_Организация);  // Signer
				
			КонецЕсли;
			
			УдалитьФайлы(ИмяФайлаДляОтправки);
			
		Иначе
			
			Document = SendTask.AddDocument(ОписаниеДокумента.Тип);
			ЗаполнитьContentПоСтруктуре(Document.Content, ОписаниеДокумента.Content);
			
			ЭДО_СерверДиадок_ЗаполнитьПодписанта(Document.Content, ДД_Организация);  // Signer
			
		КонецЕсли;
		
	КонецЕсли;
	
	Document.CustomDocumentId = Строка(ОписаниеДокумента.Ссылка.УникальныйИдентификатор());
	Document.comment = ОписаниеДокумента.Комментарий;
	
КонецФункции

&НаКлиенте
Функция ЭДО_Транспорт_ОтправитьПакетДокументов(Пакет) Экспорт
		
	Попытка	
		//ВызватьИсключение "ОТЛАДКА: имитация ошибки отправки на сервер ДД"; // для отладки!!!
		
		SendTask = ЭДО_СформироватьЗаданиеНаОтправкуПакета(Пакет);
		DocumentPackage = SendTask.Send();
		
		ЭДО_СерверДиадок_УстановитьПометкуУдаленияПриПеревыставлении(Пакет);
				
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;	
	
	ЭДО_ПроставитьДляОтправленныхДокументовПакетаID(Пакет, DocumentPackage);
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Функция ЭДО_Транспорт_ОтправитьПакетДокументовАсинхронно(Пакет) Экспорт
		
	Попытка	
		//ВызватьИсключение "ОТЛАДКА: имитация ошибки отправки на сервер ДД"; // для отладки!!!
		SendTask = ЭДО_СформироватьЗаданиеНаОтправкуПакета(Пакет);
		Возврат SendTask.SendAsync();
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
		
КонецФункции

&НаКлиенте
Функция ЭДО_Транспорт_ОтправитьМассивПакетовДокументовСОблачнойПодписью(МассивПакетов, ОтпечатокСертификата) Экспорт 
	
	Connection = ПолучитьДиадокСоединение("");
	Если Connection = Неопределено Тогда
		Возврат "Не авторизован в сервисе по логину";
	КонецЕсли;
	
	МассивСтруктурПакетов = Новый Массив; // хранит структуры вида "Пакет, PackageSendTask, DocumentPackage"
	Попытка
		
		CloudSignTask = Connection.CreateCloudSignTask(ОтпечатокСертификата);
		Для Каждого Пакет Из МассивПакетов Цикл
			PackageSendTask = ЭДО_СформироватьЗаданиеНаОтправкуПакета(Пакет.ДанныеСервер, Истина);
			PackageSendTask.DelaySend = Ложь;			
			CloudSignTask.AddContent(PackageSendTask, Пакет.ДанныеСервер.ДанныеДД.CounterAgentId);
			
			СтруктураПакета = Новый Структура("Пакет, PackageSendTask, DocumentPackage");
			СтруктураПакета.Пакет = Пакет.ДанныеСервер;
			СтруктураПакета.PackageSendTask = PackageSendTask;
			МассивСтруктурПакетов.Добавить(СтруктураПакета);
		КонецЦикла;
		CloudSignTask.Sign();
		
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("CloudSignTask", CloudSignTask);
		ДопПараметры.Вставить("МассивСтруктурПакетов", МассивСтруктурПакетов);
		
		Подсказка = "Введите код подтверждения создания электронной подписи";
		//Оповещение = Новый ОписаниеОповещения("ПослеВводаКодаПодтвержденияСозданияЭлектроннойПодписи", ЭтаФорма, ДопПараметры);
		//ПоказатьВводСтроки(Оповещение, "", Подсказка);
		Оповещение = ОсновнаяФорма().НовыйОписаниеОповещения("ПослеВводаКодаПодтвержденияСозданияЭлектроннойПодписи", ОсновнаяФорма().Модуль_РаботаСКомпонентой(), ДопПараметры);
		ОсновнаяФорма().мПоказатьВводСтроки(Оповещение, "Код подтверждения", Подсказка);
		
	Исключение
		Возврат ОписаниеОшибки();
	КонецПопытки;
	
	Возврат "";
	
КонецФункции

&НаКлиенте
Процедура ПослеВводаКодаПодтвержденияСозданияЭлектроннойПодписи(КодПодтверждения, ДопПараметры) Экспорт 
	
	Если КодПодтверждения = Неопределено 
		 Или КодПодтверждения = ""
		 Или КодПодтверждения = "Код подтверждения" Тогда
		 
		УстановитьРезультатОтправкиМассиваСтруктурПакетов(ДопПараметры.МассивСтруктурПакетов,
														  "Не указан код подтверждения создания электронной подписи");
		ОсновнаяФорма().ПослеОтправкиМассиваПакетовДокументовСОблачнойПодписью(ДопПараметры.МассивСтруктурПакетов);
		Возврат;
		
	КонецЕсли;
	
	CloudSignTask = ДопПараметры.CloudSignTask;
	Попытка
		CloudSignTask.Confirm(КодПодтверждения);
	Исключение
		
		ТекстВозврата = ОписаниеОшибки();
		Если Найти(ТекстВозврата, "[Неверный СМС код]") Тогда
			ТекстВозврата = "Неверный СМС код";
		КонецЕсли;
		УстановитьРезультатОтправкиМассиваСтруктурПакетов(ДопПараметры.МассивСтруктурПакетов, ТекстВозврата);
		ОсновнаяФорма().ПослеОтправкиМассиваПакетовДокументовСОблачнойПодписью(ДопПараметры.МассивСтруктурПакетов);
		Возврат;
		
	КонецПопытки;
	
	МассивСтруктурПакетов = ДопПараметры.МассивСтруктурПакетов;
	Для Каждого СтруктураПакета Из МассивСтруктурПакетов Цикл
		СтруктураПакета.DocumentPackage = СтруктураПакета.PackageSendTask.Send();
		ЭДО_СерверДиадок_УстановитьПометкуУдаленияПриПеревыставлении(СтруктураПакета.Пакет);
		ЭДО_ПроставитьДляОтправленныхДокументовПакетаID(СтруктураПакета.Пакет, СтруктураПакета.DocumentPackage);
		СтруктураПакета.Пакет.Вставить("РезультатОтправкиТекст", "");
	КонецЦикла;
	
	ОсновнаяФорма().ПослеОтправкиМассиваПакетовДокументовСОблачнойПодписью(МассивСтруктурПакетов);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьРезультатОтправкиМассиваСтруктурПакетов(МассивСтруктурПакетов, РезультатОтправки)
	
	Для Каждого СтруктураПакета Из МассивСтруктурПакетов Цикл		
		СтруктураПакета.Пакет.Вставить("РезультатОтправкиТекст", РезультатОтправки);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭДО_ПроставитьДляОтправленныхДокументовПакетаID(Пакет, DocumentPackage) Экспорт
	
	Для й = 0 По DocumentPackage.Documents.Count()-1 Цикл
		
		Document = DocumentPackage.Documents.GetItem(й);
		
		Для Каждого ОтправляемыйДокумент Из Пакет.Документы  Цикл
			
			Если Document.CustomDocumentId = Строка(ОтправляемыйДокумент.Ссылка.УникальныйИдентификатор()) Тогда
				
				ОтправляемыйДокумент.DD_API_LetterID	= Сред(Document.documentId,1,36);
				ОтправляемыйДокумент.DD_API_DocumentID	= Сред(Document.documentId,37,36);				
				ОтправляемыйДокумент.DD_API_BoxID		= Лев(Document.OrganizationId,32);				
				Прервать;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;	
	
КонецПроцедуры

&НаКлиенте
Процедура Разлогиниться() Экспорт
	
	ДиадокСоединение=			Неопределено;
	КэшТекущийПользовательДД=	Неопределено;
	РаботаемПоСертификату=		Неопределено;
		
	СоответствиеСертификатовОрганизаций = Новый Соответствие;
	УстановитьСоответствиеТокеновBoxIDНаСервере(ПолучитьСоответствиеТокеновBoxID());
	
	ОстановитьПроцессыПодписанияКвитанций();
	
	Оповестить("Диадок_СменаПользователя");
	
КонецПроцедуры

&НаКлиенте
Функция ОтправитьОтветНаДокументАсинхронно(ИдентификаторыДокумента, ТипОтвета, КонтентОтвета) Экспорт
	
	Попытка
		
		Answer = ПодготовитьReplySendTask(ИдентификаторыДокумента, ТипОтвета, КонтентОтвета);
		
		Если ТипЗнч(Answer) = Тип("Строка") Тогда
			
			ВызватьИсключение Answer;
			
		Иначе
			
			Возврат Answer.SendAsync();
		
		КонецЕсли;
		
	Исключение
		
		мОшибка = ОписаниеОшибки();
		Возврат мОшибка;
		
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция ОтправитьОтветНаДокумент(ИдентификаторыДокумента, ТипОтвета, КонтентОтвета) Экспорт
	
	Попытка
		
		Answer = ПодготовитьReplySendTask(ИдентификаторыДокумента, ТипОтвета, КонтентОтвета);
		
		Если ТипЗнч(Answer) = Тип("Строка") Тогда
			
			ВызватьИсключение Answer;
			
		Иначе
			
			Answer.Send();
			Возврат "";
		
		КонецЕсли;
		
	Исключение
		
		мОшибка = ОписаниеОшибки();
		Возврат мОшибка;
		
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Функция ПодготовитьReplySendTask(ИдентификаторыДокумента, ТипОтвета, КонтентОтвета) Экспорт
	
	Попытка
		
		Organization= ЭДО_СерверДиадок_ПолучитьОрганизациюПоID(ИдентификаторыДокумента.boxId);
		Document= Organization.GetDocumentById(ИдентификаторыДокумента.letterId + ИдентификаторыДокумента.documentId);
		
		Answer = Document.CreateReplySendTask(ТипОтвета);
		
		ЗаполнитьContentПоСтруктуре(Answer.Content, КонтентОтвета, ,Истина);
		
		Если нрег(Answer.Content.type) = нрег("XmlTorg12BuyerTitle")
			Или нрег(Answer.Content.type) = нрег("XmlAcceptanceCertificateBuyerTitle")
			Или нрег(Answer.Content.type) = нрег("XmlSignatureRejection")
			Или нрег(Answer.Content.type) = нрег("UniversalTransferDocumentBuyerTitle")
			Или нрег(Answer.Content.type) = нрег("FormalizedRejectionContent")
			Или нрег(Answer.Content.type) = нрег("InvoiceCorrectionRequest") Тогда
			ЭДО_СерверДиадок_ЗаполнитьПодписанта(Answer.Content, Document.Organization);
		КонецЕсли;
		
		Возврат Answer;
	
	Исключение
		
		мОшибка = ОписаниеОшибки();
		Возврат мОшибка;
		
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура ЭДО_ПолучитьПечатнуюФормуСервераДиадок(ДокументЭДО) Экспорт
	
	ДвоичныеДанныеПечатнойФормы = ЭДО_ПолучитьПечатнуюФормуСервераДиадокНаСервере(ДокументЭДО, ЛокальныеПараметры.Использовать1СЭДО);
	
	Если ТипЗнч(ДвоичныеДанныеПечатнойФормы) = Тип("ДвоичныеДанные") Тогда
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("pdf");
		ДвоичныеДанныеПечатнойФормы.Записать(ИмяВременногоФайла);
		ЗапуститьПриложение(ИмяВременногоФайла);
	Иначе
		ОчиститьСообщения();
		Сообщить("Печатная форма не сформирована!", СтатусСообщения.Важное);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭДО_ПолучитьПечатнуюФормуСервераДиадокНаСервере(ДокументЭДО, Использовать1СЭДО)
	
	Если Использовать1СЭДО Тогда
	
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ЭлектронныеДокументы.Ссылка.ПрофильНастроекЭДО.ОператорЭДОИд КАК BoxId,
		|	ЭлектронныеДокументы.ЭлектронныйДокумент.УникальныйИДВнешний КАК LetterId,
		|	ЭлектронныеДокументы.ЭлектронныйДокумент.УникальныйИД КАК DocumentId
		|ИЗ
		|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ЭлектронныеДокументы
		|ГДЕ
		|	ЭлектронныеДокументы.ЭлектронныйДокумент = &Документ"
		);
		Запрос.УстановитьПараметр("Документ",ДокументЭДО);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Возврат ОбработкаОбъект().ЭДО_ПолучитьПечатнуюФормуДокумента(Выборка.BoxId, Выборка.LetterId, Выборка.DocumentId, 30);
		КонецЕсли;
		
	Иначе	
		Возврат ОбработкаОбъект().ЭДО_ПолучитьПечатнуюФормуДокумента(ДокументЭДО.BoxId, ДокументЭДО.LetterId, ДокументЭДО.DocumentId, 30);
	КонецЕсли;
	
КонецФункции

//}		СЕРВЕР ДИАДОК


&НаКлиенте
Процедура СинхронизироватьЮрФизЛицаССервером(П1=Неопределено, П2=Неопределено) Экспорт
	
	СинхронизироватьТаблицыЮрФизлицНаСервере();
	
	Оповестить("Диадок_Сохранение_Организация");
	Оповестить("Диадок_Сохранение_Контрагент");
	
КонецПроцедуры

&НаКлиенте
Процедура СинхронизироватьЮрФизЛицо(П1 = Неопределено, Ссылка = Неопределено) Экспорт
	
	СинхронизироватьЮрФизЛицоНаСервере(Ссылка);
	Оповестить("Диадок_Сохранение_Контрагент");
	
КонецПроцедуры

&НаСервере
Процедура СинхронизироватьЮрФизЛицоНаСервере(Ссылка)
	
	ОбработкаОбъект().ЭДО_ОбновитьДанныеКонтрагента(Ссылка);
	
КонецПроцедуры



&НаСервере
Процедура СинхронизироватьТаблицыЮрФизлицНаСервере()
	ОбработкаОбъект().ВыполнитьСинхронизациюКонтрагентовОрганизаций();
КонецПроцедуры

&НаКлиенте
Процедура ЭДО_Модуль_ПрочитатьНовыеСобытия(П1=Неопределено,П2=Неопределено) Экспорт
	
	ЭДО_Модуль_ПрочитатьНовыеСобытияНаСервере();
	Оповестить("Диадок_ОбновитьГлавныйСписок");
	// Возможно, иногда возвращаться обратно на клиента и спрашивать, остановиться или продолжать
	
КонецПроцедуры

&НаСервере
Процедура ЭДО_Модуль_ПрочитатьНовыеСобытияНаСервере() // для совместимостью с УФ
	// По возможности убрать копипасту с выносом в модуль объекта
	// Тут может помочь что-то вроде "МетодСервера" из коробки.
	
	Для каждого СтрокаОрганизации Из ОбработкаОбъект().ЭДО_Модуль_ТаблицаОрганизацийПользователя() Цикл
		
		ОргСсылка = СтрокаОрганизации.Ссылка;
		ОргНаименование = СтрокаОрганизации.Наименование;
		
		Сообщить("Производится обновление данных по организации " + ОргНаименование);
		Попытка// TODO прибраться
			ОбработкаОбъект().ЭДО_Модуль_ОбработатьНовыеСобытияДокументов(СтрокаОрганизации);
		Исключение
		    Сообщить("При обновлении данных по организации " + ОргНаименование + " произошли ошибки:
				|"+ОписаниеОшибки()); 
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция DD_API_GettokenНаСервере(РежимАвторизации,Логин,Пароль,ВыбранныйСертификат)
	
	Ответ = ОбработкаОбъект().DD_API_Gettoken(РежимАвторизации,Логин,Пароль,ВыбранныйСертификат); // сходили на сервер, принесли обратно текст или бинарник;
	Если ТипЗнч(Ответ)=Тип("ComSafeArray") Тогда
		Возврат Ответ.Выгрузить();//иначе не пролезет с сервера на клиент
	Иначе
		Возврат Ответ;
	КонецЕсли;
	
КонецФункции

// Помещает контент документа "СтруктураДанных" непосредственно в COM-объект компоненты "content"
&НаКлиенте
Процедура ЗаполнитьContentПоСтруктуре(content, СтруктураДанных, ОписаниеСтруктурыДанных = "", ПропускатьПустыеЗначения = Ложь)
	
	Для каждого Элемент из СтруктураДанных цикл 
		
		Если Найти(Элемент.Ключ, "Ссылка") > 0 Тогда	
			
			// Это ссылочное поле из 1С, оно нам не понадобится
			
		ИначеЕсли Элемент.ключ="Totals"
			или Элемент.ключ="TotalGrossQuantity"
			или Элемент.ключ="TotalParcelsQuantity"
			или Элемент.ключ="TotalSum"
			или Элемент.ключ="TotalsInc"
			или Элемент.ключ="TotalsDec"
			или Элемент.ключ="AmountsDec"
			или Элемент.ключ="AmountsInc" Тогда
			
			// Это итоговые поля, их тоже не заполняем: компонента их сама посчитает.
			
		ИначеЕсли Элемент.ключ = "Items"
			ИЛИ Элемент.Ключ = "CustomDeclarations"
			ИЛИ Элемент.Ключ = "TransferBases"
			ИЛИ Элемент.Ключ = "Waybills"
			ИЛИ Элемент.Ключ = "Signers"
			Или Элемент.ключ = "PaymentDocuments"
			Или Элемент.ключ = "StructedAdditionalInfos"
			Или Элемент.ключ = "Invoices"
			Или Элемент.ключ = "InvoiceRevisions"
			Или Элемент.ключ = "CorrectionBases"
			Или Элемент.ключ = "OriginalInvoices" Тогда
			
			// Это коллекции: создаем новый элемент коллекции и заполняем его
			
			ИмяЕдиничногоЭлемента = Лев(Элемент.Ключ, СтрДлина(Элемент.Ключ)-1);  // отрежем последнюю букву "s"
			Для Каждого СтрокаТаблицы Из Элемент.Значение Цикл
				
				Попытка
					item =Вычислить("content.add"+ИмяЕдиничногоЭлемента+"()");  // например content.addOriginalInvoice()
				Исключение
					ВызватьИсключение("Не удается добавить элемент в коллекцию " + Элемент.ключ + " для объекта " + ОписаниеСтруктурыДанных + " по причине: " + ОписаниеОшибки());
				КонецПопытки;
				
				ЗаполнитьContentПоСтруктуре(item, СтрокаТаблицы, ОписаниеСтруктурыДанных + "." + Элемент.Ключ, ПропускатьПустыеЗначения);
				
			КонецЦикла;
		
		ИначеЕсли ТипЗнч(Элемент.значение) = Тип("Структура") Тогда
			
			Если ПропускатьПустыеЗначения и не ЗначениеЗаполнено(Элемент.Значение) Тогда
				Продолжить;
			КонецЕсли;
			
			Попытка
				ЭлементКонтента = content[Элемент.ключ];
			Исключение
				ВызватьИсключение("Не удается инициализировать реквизит " + Элемент.Ключ + " для объекта " + ОписаниеСтруктурыДанных + " по причине: " + ОписаниеОшибки());
			КонецПопытки;
			
			ЗаполнитьContentПоСтруктуре(ЭлементКонтента, Элемент.Значение, ОписаниеСтруктурыДанных+"."+Элемент.Ключ, ПропускатьПустыеЗначения);
			
		ИначеЕсли Элемент.Значение <> Неопределено Тогда
			
			Попытка
				content[Элемент.Ключ] = ?(ТипЗнч(Элемент.Значение)=Тип("Строка"), СокрЛП(СтрЗаменить(Элемент.Значение, Символы.НПП, "")), Элемент.Значение);
			Исключение
				ВызватьИсключение("Не удается инициализировать реквизит " + Элемент.Ключ + " для объекта " + ОписаниеСтруктурыДанных + " по причине: " + ОписаниеОшибки());
			КонецПопытки
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция врем_ВыделитьСлово(ИсходнаяСтрока)
	
	Буфер = СокрЛ(ИсходнаяСтрока);
	ПозицияПослПробела = Найти(Буфер, " ");
	
	Если ПозицияПослПробела = 0 Тогда
		ИсходнаяСтрока = "";
		Возврат Буфер;
	КонецЕсли;
	
	ВыделенноеСлово = СокрЛП(Лев(Буфер, ПозицияПослПробела));
	ИсходнаяСтрока = Сред(ИсходнаяСтрока, ПозицияПослПробела + 1);
	
	Возврат ВыделенноеСлово;
	
КонецФункции

&НаКлиенте
Функция ПолучитьМассивСтруктурПодразделений_1СЭДО(Параметр1=Неопределено, ДополнительныеПараметры) Экспорт
		
	МассивСсылок = ДополнительныеПараметры.МассивСсылок;
	МассивДанных = Новый Массив;
	
	Для Каждого Ссылка Из МассивСсылок Цикл
		
		Если ТипЗнч(Ссылка) = Тип("СправочникСсылка.ПрофилиНастроекЭДО") Тогда
			
			СтруктураЗначений = ОсновнаяФорма().ПолучитьЗначениеРеквизитаНаСервереБезКонтекста(Ссылка, Новый Структура("ИдентификаторОрганизации"));
			Organization = ЭДО_СерверДиадок_ПолучитьОрганизациюПоID(СтруктураЗначений.ИдентификаторОрганизации);
			
		ИначеЕсли ТипЗнч(Ссылка) = Тип("СправочникСсылка.СоглашенияОбИспользованииЭД") Тогда
			
			СтруктураЗначений = ОсновнаяФорма().ПолучитьЗначениеРеквизитаНаСервереБезКонтекста(Ссылка, Новый Структура("ИдентификаторОрганизации,ИдентификаторКонтрагента"));
			Organization = ЭДО_СерверДиадок_ПолучитьКонтрагентаПоID(СтруктураЗначений.ИдентификаторОрганизации, СтруктураЗначений.ИдентификаторКонтрагента);
			
		КонецЕсли;
		
		МассивСтруктурПодразделений = Новый Массив;
		ЗаполнитьТаблицуПодразделений(МассивСтруктурПодразделений, Organization.Departments, Organization.INN , Organization.ID, "");		
		МассивДанных.Добавить(МассивСтруктурПодразделений);
		
	КонецЦикла;
	
	ДополнительныеПараметры.Вставить("МассивДанных", МассивДанных);
	
	Если ДополнительныеПараметры.Свойство("ИмяСобытия") Тогда
		Оповестить(ДополнительныеПараметры.ИмяСобытия, ДополнительныеПараметры);
	КонецЕсли;
		
	Возврат МассивДанных;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьТаблицуПодразделений(ТаблицаПодразделений,Коллекция,ИНН,ID_Владельца,ID_Родителя)
	
	Для д = 0 по Коллекция.count-1  цикл 
		
		НоваяСтрока					= Новый Структура("ID,Наименование,Аббревиатура,ИНН,КПП,ID_ВладелецПодразделения,ID_РодительПодразделения");
		ТаблицаПодразделений.Добавить(НоваяСтрока);
		department = Коллекция.getItem(д);
		
		НоваяСтрока.ID							= department.ID;
		НоваяСтрока.Наименование				= department.Name;
		НоваяСтрока.Аббревиатура				= department.Abbreviation;
		НоваяСтрока.ИНН							= ИНН;
		НоваяСтрока.КПП							= department.KPP;
		НоваяСтрока.ID_ВладелецПодразделения	= ID_Владельца;
		НоваяСтрока.ID_РодительПодразделения	= ID_Родителя;
		
		ЗаполнитьТаблицуПодразделений(ТаблицаПодразделений,department.Subdepartments,ИНН,ID_Владельца,department.ID)
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭДО_СерверДиадок_ИнициализироватьСертификатыОрганизаций() Экспорт
	
	МассивПерсональныхСертификатов = Новый Массив;
	
	CollectionPersonalCertificates = ДиадокАПИ().GetPersonalCertificates();
	
	Попытка		
		Для ц = 0 по  CollectionPersonalCertificates.Count-1 Цикл			
			PersonalCertificate =  CollectionPersonalCertificates.GetItem(ц);			
			МассивПерсональныхСертификатов.Добавить(PersonalCertificate.Thumbprint);			
		КонецЦикла;		
	Исключение
		//СообщенияПользователям_ПоказатьСообщениеОбОшибке("ОшибкаРаботыВнешнейКомпоненты", ОписаниеОшибки());
	КонецПопытки;		
	
	СоответствиеСертификатовОрганизаций = ПолучитьСоответствиеСертификатовОрганизацийНаСервере(МассивПерсональныхСертификатов);
	МассивКлючейДляУдаления = Новый Массив;
	
	Для Каждого текСертификатОрганизации Из СоответствиеСертификатовОрганизаций Цикл
		
		сткСоединения	= СоздатьСоединениеПоСертификату(текСертификатОрганизации.Значение.ОтпечатокСертификата);
		Connection		= сткСоединения.Соединение;
		Если Connection = Неопределено Тогда
			МассивКлючейДляУдаления.Добавить(текСертификатОрганизации.Ключ);
		Иначе
			текСертификатОрганизации.Значение.ДиадокСоединение = Connection;
			текСертификатОрганизации.Значение.Токен = Connection.Token;
		КонецЕсли;
				
	КонецЦикла;
	
	Для Каждого текЭлемент Из МассивКлючейДляУдаления Цикл
		СоответствиеСертификатовОрганизаций.Удалить(текЭлемент);
	КонецЦикла;
	
	РаботаемПоСертификату = (СоответствиеСертификатовОрганизаций.Количество() > 0);
			
	УстановитьСоответствиеТокеновBoxIDНаСервере(ПолучитьСоответствиеТокеновBoxID());
		
КонецПроцедуры

&НаСервере
Функция ПолучитьСоответствиеСертификатовОрганизацийНаСервере(МассивПерсональныхСертификатов)
	
	Возврат ОбработкаОбъект().ПолучитьСоответствиеСертификатовОрганизаций(МассивПерсональныхСертификатов);
	
КонецФункции

&НаКлиенте
Функция ПолучитьСоответствиеТокеновBoxID()
	
	Результат = Новый Соответствие;
	
	Для Каждого текСертификатОрганизации Из СоответствиеСертификатовОрганизаций Цикл
		Результат.Вставить(текСертификатОрганизации.Ключ, текСертификатОрганизации.Значение.Токен);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьСоответствиеТокеновBoxIDНаСервере(СоответствиеТокеновBoxID)
	
	мСоответствиеТокеновBoxID = ЗначениеВСтрокуВнутр(СоответствиеТокеновBoxID);
	ОбработкаОбъект().СоответствиеТокеновBoxID = СоответствиеТокеновBoxID;  // для ОФ
		
КонецПроцедуры

&НаКлиенте
Функция ПолучитьДиадокСоединение(BoxId="")
	
	//СоответствиеСертификатовОрганизаций - в этом соответствии хранятся все COM-соединения при авторизации по заданным в настройках сертификатам
	//С пустым ключом хранится COM-соединение при интерактивной авторизации, в т.ч. по логину/паролю
	
	НайденноеСоответствие = СоответствиеСертификатовОрганизаций.Получить(BoxID);
	
	Если НайденноеСоответствие = Неопределено Тогда
		НайденноеСоответствие = СоответствиеСертификатовОрганизаций.Получить("");
	КонецЕсли;
	
	Если НайденноеСоответствие = Неопределено Тогда
		ВызватьИсключение "Не выполнена авторизация!";
	Иначе
		Возврат НайденноеСоответствие.ДиадокСоединение;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьРазрядностьПлатформы()
	
	СисИнфо = Новый СистемнаяИнформация;
	// почему так: в 8.3 есть тип платформы Mac_OS_x86_x64
	Возврат ?(Найти(Строка(СисИнфо.ТипПлатформы), "64") > 0, 64, 32);
	
КонецФункции // ПолучитьРазрядностьПлатформыWindows

&НаКлиенте
Функция СоздатьСоединениеПоСертификату(ОтпечатокСертификата)
	
	Результат = Новый Структура("Соединение, ОписаниеОшибки", Неопределено, "");
	Попытка
		Connection = ДиадокАПИ().CreateConnectionByCertificate(ОтпечатокСертификата);
		ЗапуститьПроцессыПодписанияКвитанций(Connection, ОтпечатокСертификата);
		Результат.Вставить("Соединение", Connection);
	Исключение
		Результат.Вставить("ОписаниеОшибки", ОписаниеОшибки());
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции
