&НаСервере
Перем ОбработкаОбъект;

&НаКлиенте
Перем Модуль_Платформа; // кэш для общих клиентских функций

&НаКлиенте
Перем Модуль_РаботаСКомпонентой;//кэш для виртуального модуля

&НаКлиенте
Перем ПредыдущаяСтрокаДереваФильтров;

&НаКлиенте
Перем МаксимальноеКоличествоАктивныхЗаданий;
&НаКлиенте
Перем МассивПодготовленныхДанныхДляАсинхронныхЗаданий;
&НаКлиенте
Перем МассивАктивныхАсинхронныхЗаданий;

&НаКлиенте
Перем ТекущийРежимАсинхроннойОбработки;  // Варианты: ОтправкаПакетов / ПодписаниеВходящихДокументов

&НаКлиенте
Перем ФормаПрогресса; // форма прогресса какого-либо процесса

//{		Сервисные методы
	
&НаСервере
Функция ОбработкаОбъект()

	//TODO
	// 1. Вынести в легкую форму, чтоб не гонять весь контекст туда-сюда
	// 2. Дать возможность кэширования.
	
	Если ОбработкаОбъект=Неопределено Тогда
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	КонецЕсли;	
	
	Возврат ОбработкаОбъект;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьФормуОбъектаМодально(ИмяФормы, ПараметрыФормы = Неопределено, ОписаниеОповещения = Неопределено, РежимБлокирования = Неопределено) Экспорт

	Если РежимБлокирования = Неопределено Тогда
		РежимБлокирования = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
	КонецЕсли;
	
	Если ПараметрыФормы = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	Если НЕ ПараметрыФормы.Свойство("ЗакрыватьПриЗакрытииВладельца") Тогда
		ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	КонецЕсли;
	
	Выполнить("ОткрытьФорму(ИмяФормы, ПараметрыФормы, ЭтаФорма, , , ,  ОписаниеОповещения, РежимБлокирования)");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПослеЗакрытияМодальнойФормы(Нечто, ПараметрыОбработчика = Неопределено) Экспорт
	
	Если НЕ ПараметрыОбработчика=Неопределено
		И ТипЗнч(ПараметрыОбработчика)=Тип("Структура")
		И ПараметрыОбработчика.Свойство("Код")
		И ПараметрыОбработчика.Свойство("Параметры")
		Тогда
		
		Параметры = ПараметрыОбработчика.Параметры;
		Выполнить(ПараметрыОбработчика.Код);
	
	Иначе
		
		Сообщить("что-то пошло не так");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ОсновнаяФорма() Экспорт
	Возврат ЭтаФорма; // Рекурсия закончится здесь
КонецФункции

&НаКлиенте
Функция ПолучитьФормуОбработки(ИмяФормы, ПараметрыФормы = Неопределено, парамВладелецФормы = Неопределено, КлючУникальности = Неопределено, ЗакрыватьПризакрытииВладельца = Ложь) Экспорт
	
	Если ПараметрыФормы = Неопределено Тогда
		ПараметрыФормы = Новый Структура;
	КонецЕсли;
	
	Если парамВладелецФормы = Неопределено Тогда
		парамВладелецФормы = ЭтаФорма;
	КонецЕсли;
	
	ПолучаемаяФорма = ПолучитьФорму(ПутьКФормам+ИмяФормы
										, ПараметрыФормы
										, парамВладелецФормы
										, КлючУникальности);
	
	Если НЕ парамВладелецФормы = Неопределено Тогда
		ПолучаемаяФорма.ВладелецФормы = парамВладелецФормы;
	КонецЕсли;
	
	Возврат ПолучаемаяФорма;
	
КонецФункции

&НаКлиенте
Функция Модуль_РаботаСКомпонентой() Экспорт
	
	Если Модуль_РаботаСКомпонентой=Неопределено Тогда
		Модуль_РаботаСКомпонентой = ПолучитьФормуОбработки("Модуль_РаботаСКомпонентой_Управляемая",,ЭтаФорма);
	КонецЕсли;
	
	Возврат Модуль_РаботаСКомпонентой;
	
КонецФункции

&НаКлиенте
Функция Модуль_Платформа() Экспорт
	
	Если Модуль_Платформа=Неопределено Тогда
		Модуль_Платформа = ПолучитьФормуОбработки("Модуль_Платформа",,ЭтаФорма);
	КонецЕсли;
	
	Возврат Модуль_Платформа;
	
КонецФункции

&НаКлиенте
Функция НовыйОписаниеОповещения(ИмяПроцедуры, Модуль, ДополнительныеПараметры=Неопределено, ИмяПроцедурыОбработкиОшибки="", МодульОбработкиОшибки=Неопределено) Экспорт
	
	Если Параметры.МодальностьЗапрещена Тогда
		//Возврат Вычислить("Новый ОписаниеОповещения(ИмяПроцедуры,Модуль,ДополнительныеПараметры,ИмяПроцедурыОбработкиОшибки,МодульОбработкиОшибки)");
		Возврат Вычислить("Новый ОписаниеОповещения(ИмяПроцедуры,Модуль,ДополнительныеПараметры)"); // с ошибками пока не будем бороться, сложности с типом параметров: TODO разобраться.
	Иначе
		Возврат Новый Структура("ИмяПроцедуры,Модуль,ДополнительныеПараметры,ИмяПроцедурыОбработкиОшибки,МодульОбработкиОшибки"
								,ИмяПроцедуры,Модуль,ДополнительныеПараметры,ИмяПроцедурыОбработкиОшибки,МодульОбработкиОшибки);
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьКнопкуВыпадающегоСписка_83(Элемент) Экспорт
	
	Попытка
		// TODO лучше ориентироваться на версию платформы, типа "Платформа_Старше_...")
		Элемент.КнопкаВыпадающегоСписка = Истина; // 8.3.
	Исключение
	КонецПопытки;
	
КонецПроцедуры

//}		Сервисные методы

//{ открытие служебных форм
	
&НаКлиенте
Процедура ОткрытьСписокКонтрагентов(Команда)
	
	мОткрытьФорму("Контрагенты_ФормаСпискаУправляемая");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокОрганизаций(Команда)
	
	мОткрытьФорму("Организации_ФормаСпискаУправляемая");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокВидовЭлектронныхДокументов(Команда)

	мОткрытьФорму("ВидыДокументов_ФормаСпискаУправляемая");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	мОткрытьФорму("НастройкиУправляемая");
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокВидовПакетов(Команда)
	
	мОткрытьФорму("ВидыПакетов_ФормаСпискаУправляемая");
	
КонецПроцедуры

&НаКлиенте
Процедура СменитьПользователя(Команда)
	
	Модуль_РаботаСКомпонентой().Разлогиниться();
	ОткрытьФормуАвторизации();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРуководствоПользователя(Команда)
	ЗапуститьПриложение("https://wiki.diadoc.ru/pages/viewpage.action?pageId=7669125");
КонецПроцедуры

//} открытие служебных форм

//{ оформление

&НаКлиенте
Процедура УстановитьЗаголовокФормы()
	
	ОсобенностиНастроек = "";
	ТекстЗаголовкаФормы = "Контур ЭДО "+ЭДО_НомерРелиза + " "+ОсобенностиНастроек+" / ";
	_ПредставлениеПериода = ПредставлениеПериода(НастройкаПериода.ДатаНачала,НастройкаПериода.ДатаОкончания);
	ТекстПериода = ?(_ПредставлениеПериода="","<период не установлен>",_ПредставлениеПериода);
	
	ЭтаФорма.Заголовок = ТекстЗаголовкаФормы + " "+ТекстПериода + " / " + Модуль_РаботаСКомпонентой().ПредставлениеТекущегоПользователяДиадок()+ " /";
	
КонецПроцедуры	


//} оформление

&НаКлиенте
Функция Форма_ПрогрессВыполнения() Экспорт 
	
	Если ФормаПрогресса = Неопределено Тогда
		ФормаПрогресса = ПолучитьФормуОбработки("ИндикацияПрогрессаОбработкиДанныхУправляемая",, ЭтаФорма);
	КонецЕсли;
	
	Возврат ФормаПрогресса;
	
КонецФункции

//{ дерево фильтров

&НаКлиенте
Процедура ДеревоФильтровВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	ВыбраннаяСтрока = Элементы.ДеревоФильтров.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	
	Если ВыбраннаяСтрока = Неопределено Тогда
		Возврат;	
	КонецЕсли;
	
	ОставитьТолькоВыбраннуюСтроку(ВыбраннаяСтрока);
		
	Если ВыбраннаяСтрока.ТипЭлементаУправления = "Переключатель" Тогда
		
		ОставитьТолькоОдинПереключатель(ВыбраннаяСтрока);
		
		// При повторном нажатии на ту же строку дерева пепреключим флажки в дочерних строках
		Если ПредыдущаяСтрокаДереваФильтров = ВыбраннаяСтрока
			И УровеньСтрокиДерева(ВыбраннаяСтрока) = 0 Тогда
			
			Пометки = Новый Массив;
			Для Каждого СтрокаСПометками Из ВыбраннаяСтрока.ПолучитьЭлементы() Цикл
				Пометки.Добавить(СтрокаСПометками.Пометка);
			КонецЦикла;
			
			Если Пометки.Найти(Ложь) = Неопределено Тогда
				//выключим все
				НовоеСостояние = Ложь;
			Иначе	
				// включим все
				НовоеСостояние = Истина;
			КонецЕсли;
			
			Для Каждого Стр Из ВыбраннаяСтрока.ПолучитьЭлементы() Цикл
				Стр.Пометка = НовоеСостояние;
				ЗаполнитьКартинкуАктивностиВСтроке(Стр);
			КонецЦикла;
			
		КонецЕсли;
		
	Иначе
		
		ОставитьТолькоОдинПереключатель(ВыбраннаяСтрока.ПолучитьРодителя()); 
		
	КонецЕсли;
	
	ПредыдущаяСтрокаДереваФильтров = ВыбраннаяСтрока;
	
	ОбновитьСписокЗадач();
 
КонецПроцедуры

&НаКлиенте
Процедура ДеревоФильтровПометкаПриИзменении(Элемент)
	
	ВыбраннаяСтрока = Элементы.ДеревоФильтров.ТекущиеДанные;	
	
	// Оставляем активным переключатель, являющийся родителем для текущего флажка
	Для Каждого Эл Из ДеревоФильтров.ПолучитьЭлементы() Цикл
		Эл.Пометка = (Эл = ВыбраннаяСтрока.ПолучитьРодителя());
		Эл.ПоказатьКартинкуАктивности = Эл.Пометка;
	КонецЦикла;

	ОбновитьСписокЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура СнятьУстановитьФлажкиВеткиДерева(ВеткаДерева,Пометка)
	
	Для Каждого Стр Из ВеткаДерева.ПолучитьЭлементы() Цикл
		Стр.Пометка = Пометка;
		СнятьУстановитьФлажкиВеткиДерева(Стр,Пометка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРодительскиеФлажкиДереваФильтров(ТекЭлемент=неопределено)
	
	Если ТекЭлемент=Неопределено Тогда //проверить всё дерево
		
		Для Каждого Стр1 ИЗ ДеревоФильтров.ПолучитьЭлементы() Цикл
			Для Каждого Стр2 Из Стр1.ПолучитьЭлементы() Цикл
				Если Стр2.ПолучитьЭлементы().Количество()>0 Тогда
					Стр2.Пометка = (НайтиВДереве(Стр2,Ложь,"Пометка") = Неопределено);
				КонецЕсли;
			КонецЦикла;
			Если Стр1.ПолучитьЭлементы().Количество()>0 Тогда
				Стр1.Пометка = (НайтиВДереве(Стр1,Ложь,"Пометка") = Неопределено);
			КонецЕсли;
		КонецЦикла;
		
	Иначе //проверить только от текущей строки вверх
		
		РодительскийЭлемент1=ТекЭлемент.ПолучитьРодителя(); 		
		Если РодительскийЭлемент1<>Неопределено Тогда 
			Если РодительскийЭлемент1.ТипЭлементаУправления <> "Переключатель" Тогда
				РодительскийЭлемент1.Пометка= НЕ УДочернихЭлементовЕстьСброшенныеПометки(РодительскийЭлемент1);
			КонецЕсли;
			РодительскийЭлемент2=РодительскийЭлемент1.ПолучитьРодителя(); 		
			Если РодительскийЭлемент2<>Неопределено Тогда 
				Если РодительскийЭлемент1.ТипЭлементаУправления <> "Переключатель" Тогда
					РодительскийЭлемент2.Пометка= НЕ УДочернихЭлементовЕстьСброшенныеПометки(РодительскийЭлемент2);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиВДереве(ДеревоИлиЕгоЭлемент,ЧтоИщем,ВКакойКолонке)
	НайденныйЭлемент = Неопределено;
	
	Для	Каждого ЭлементДерева Из ДеревоИлиЕгоЭлемент.ПолучитьЭлементы() Цикл
		ЗначениеВКолонке = Неопределено;
		НашлиПоСвойству = ЭлементДерева.Свойство(ВКакойКолонке,ЗначениеВКолонке);
		Если НашлиПоСвойству и ЗначениеВКолонке=ЧтоИщем Тогда 
			НайденныйЭлемент = ЭлементДерева;
			Прервать;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат НайденныйЭлемент;
КонецФункции

&НаКлиенте
Функция УДочернихЭлементовЕстьСброшенныеПометки(ЭлементРодитель)
	
	ЕстьСброшенные=Ложь;
	
	Для Каждого ДочернийЭлемент Из ЭлементРодитель.ПолучитьЭлементы() Цикл
		Если ДочернийЭлемент.Пометка=Ложь Тогда 
			ЕстьСброшенные=Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьСброшенные;
	
КонецФункции 

&НаКлиенте
// И рекурсивно сделать то же самое с вышестоящими
Процедура ОставитьТолькоВыбраннуюСтроку(ВыбраннаяСтрока)
	
	СоседниеСтроки = ?(ВыбраннаяСтрока.ПолучитьРодителя()=Неопределено, ДеревоФильтров.ПолучитьЭлементы(), ВыбраннаяСтрока.ПолучитьРодителя().ПолучитьЭлементы());
	
	Для Каждого Стр Из СоседниеСтроки Цикл
		Стр.Пометка = (Стр = ВыбраннаяСтрока);
		ЗаполнитьКартинкуАктивностиВСтроке(Стр);
	КонецЦикла;
	
	Если Не ВыбраннаяСтрока.ПолучитьРодителя()=Неопределено Тогда
		
		ОставитьТолькоВыбраннуюСтроку(ВыбраннаяСтрока.ПолучитьРодителя());
		
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура ОставитьТолькоОдинПереключатель(ВыбраннаяСтрока)
	
	Если УровеньСтрокиДерева(ВыбраннаяСтрока) = 0 Тогда
		// Скинем все подчиненные в соседних ветках
		Для Каждого СтрокаУровня0 Из ДеревоФильтров.ПолучитьЭлементы() Цикл
			
			СтрокаУровня0.Пометка = (СтрокаУровня0=ВыбраннаяСтрока);
			ЗаполнитьКартинкуАктивностиВСтроке(СтрокаУровня0);

		КонецЦикла;
		
	ИначеЕсли УровеньСтрокиДерева(ВыбраннаяСтрока) = 1 Тогда
		
		Для Каждого СтрокаУровня0 Из ДеревоФильтров.ПолучитьЭлементы() Цикл
			
			Если СтрокаУровня0<>ВыбраннаяСтрока.ПолучитьРодителя() Тогда
				
				Для Каждого СтрокаУровня1 Из СтрокаУровня0.ПолучитьЭлементы() Цикл
					
					СтрокаУровня1.Пометка = Ложь;
					ЗаполнитьКартинкуАктивностиВСтроке(СтрокаУровня1);
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
// И рекурсивно сделать то же самое с вышестоящими
Процедура ОставитьТолькоВыбраннуюСтрокуНаСервере(ВыбраннаяСтрока)
	
	СоседниеСтроки = ?(ВыбраннаяСтрока.ПолучитьРодителя()=Неопределено, ДеревоФильтров.ПолучитьЭлементы(), ВыбраннаяСтрока.ПолучитьРодителя().ПолучитьЭлементы());
	
	Для Каждого Стр Из СоседниеСтроки Цикл
		Стр.Пометка = (Стр = ВыбраннаяСтрока);
		ЗаполнитьКартинкуАктивностиВСтрокеНаСервере(Стр);
	КонецЦикла;
	
	Если Не ВыбраннаяСтрока.ПолучитьРодителя()=Неопределено Тогда
		
		ОставитьТолькоВыбраннуюСтрокуНаСервере(ВыбраннаяСтрока.ПолучитьРодителя());
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура ОставитьТолькоОдинПереключательНаСервере(ВыбраннаяСтрока)
	
	Если УровеньСтрокиДереваНаСервере(ВыбраннаяСтрока) = 0 Тогда
		//скинуть все подчиненные в соседних ветках
		Для Каждого СтрокаУровня0 Из ДеревоФильтров.ПолучитьЭлементы() Цикл
			
			СтрокаУровня0.Пометка = (СтрокаУровня0=ВыбраннаяСтрока);

		КонецЦикла;
		
	ИначеЕсли УровеньСтрокиДереваНаСервере(ВыбраннаяСтрока) = 1 Тогда
		
		Для Каждого СтрокаУровня0 Из ДеревоФильтров.ПолучитьЭлементы() Цикл
			
			Если СтрокаУровня0<>ВыбраннаяСтрока.ПолучитьРодителя() Тогда
				
				Для Каждого СтрокаУровня1 Из СтрокаУровня0.ПолучитьЭлементы() Цикл
					
					СтрокаУровня1.Пометка = Ложь;
					
				КонецЦикла;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция УровеньСтрокиДерева(ЗНАЧ ВыбраннаяСтрока)
	
	Результат = 0; // самый верхний уровень будет 0
	
	ТекРодитель = ВыбраннаяСтрока;
	
	Пока НЕ ВыбраннаяСтрока.ПолучитьРодителя() = Неопределено Цикл
		
		ВыбраннаяСтрока = ВыбраннаяСтрока.ПолучитьРодителя();
		Результат = Результат + 1;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции


&НаСервере
Функция УровеньСтрокиДереваНаСервере(ЗНАЧ ВыбраннаяСтрока)
	
	Результат = 0; // самый верхний уровень будет 0
	
	ТекРодитель = ВыбраннаяСтрока;
	
	Пока НЕ ВыбраннаяСтрока.ПолучитьРодителя() = Неопределено Цикл
		
		ВыбраннаяСтрока = ВыбраннаяСтрока.ПолучитьРодителя();
		Результат = Результат + 1;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьКартинкуАктивностиВСтроке(СтрокаДерева)
	Если СтрокаДерева.ТипЭлементаУправления = "Переключатель" Тогда
		СтрокаДерева.ПоказатьКартинкуАктивности = СтрокаДерева.Пометка;
	КонецЕсли;
КонецПроцедуры
	
&НаСервере
Процедура ЗаполнитьКартинкуАктивностиВСтрокеНаСервере(СтрокаДерева)
	Если СтрокаДерева.ТипЭлементаУправления = "Переключатель" Тогда
		СтрокаДерева.ПоказатьКартинкуАктивности = СтрокаДерева.Пометка;
	КонецЕсли;
КонецПроцедуры
	
//} дерево фильтров

//{ Таблица отборов

&НаСервере
Процедура УстановитьТекущиеОтборыНаСервере()
		
	АдресСхемы = Неопределено;
	Объект.АдресаСКДОтбора.Свойство(РежимОтображенияДокументов, АдресСхемы);
	
	ОбработкаОбъект().ЭДО_ТаблицаОтборов_УстановитьТекущиеОтборы(АдресСхемы, Объект.СписокДокументов);
	
	// В управляемых формах отбор по реквизиту таблицы работает очень медленно на больших объемах.
	// Поэтому быстрее будет сразу снести строки, не подпадающие под отбор, а в следующий раз снова сходить в БД за новым списком.
	// Если хождение в БД станет слишком дорогим, можно будет попробовать кэширование ТЗ во ВременноеХранилище.
	НевидимыеСтроки = Объект.СписокДокументов.НайтиСтроки(Новый Структура("Видимость", Ложь));
	Для Каждого УдаляемаяСтрока Из НевидимыеСтроки Цикл
		Объект.СписокДокументов.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтборовПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если НЕ ЗначениеЗаполнено(Строка(Элемент.ТекущиеДанные.ЛевоеЗначение)) И НЕ ЗначениеЗаполнено(Элемент.ТекущиеДанные.ТипГруппы) И НЕ ОтменаРедактирования Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтборовПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьСписокЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаОтборовПриИзменении(Элемент)
	
	Элементы.ТаблицаОтборов.ЗакончитьРедактированиеСтроки(Ложь);
	
КонецПроцедуры

//} Таблица отборов

//{ обработчики событий формы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.МодальностьЗапрещена=ОбработкаОбъект().МодальностьЗапрещена();
	ПутьКФормам = ОбработкаОбъект().Метаданные().ПолноеИмя() + ".Форма.";
	ЭДО_НомерРелиза = ОбработкаОбъект().ЭДО_НомерРелиза();
	
	СтруктураДанныхСтрокиСпискаСтрокой = ПолучитьСтруктуруДанныхСтрокиСпискаСтрокойНаСервере();
	
	Если ОбработкаОбъект().ЭДО_Использовать1СЭДО() Тогда
		Параметры.РезультатИнициализации = ОбработкаОбъект().ЭДО_Модуль_Инициализировать(Истина);
	Иначе	
		Параметры.РезультатИнициализации = ОбработкаОбъект().ЭДО_Модуль_Инициализировать();
		Если Не Параметры.РезультатИнициализации.Успешно Тогда
			Параметры.ДоступенРежим1СЭДО = ОбработкаОбъект().ЭДО_Модуль_Инициализировать(Истина).Успешно;
		КонецЕсли;
	КонецЕсли;
	
	Параметры.ПоказатьОбновлениеМодуля = (НЕ Параметры.РезультатИнициализации.ПредложитьОбновлениеПоставки 
			И ОбработкаОбъект().ЭДО_Модуль_ВерсияИзменена());
	
	Если Параметры.РезультатИнициализации.Успешно Тогда
		
		ПерезаполнитьДеревоОтборовНаСервере();
		Объект.АдресаСКДОтбора = Новый Структура;
		
		Элементы.Группа2.Видимость = НЕ Параметры.Использовать1СЭДО;
		
	КонецЕсли;
	
	ИнтерфейсныеПравкиДляПлатформы835();
	
КонецПроцедуры

&НаСервере
Процедура ИнтерфейсныеПравкиДляПлатформы835()
	
	// Правки для Такси
	
	СИ = Новый СистемнаяИнформация;
	ВерсияПлатформы = СИ.ВерсияПриложения;
	
	ВерсияПлатформыМассивом = ОбработкаОбъект().ЭДО_Служебные_РазложитьСтрокуВМассивСлов(СИ.ВерсияПриложения,".");
	ВтораяЦифраВерсии = Число(ВерсияПлатформыМассивом[1]);
	ТретьяЦифраВерсии = Число(ВерсияПлатформыМассивом[2]);
	
	Если ((ВтораяЦифраВерсии=3 и ТретьяЦифраВерсии>=4) или ВтораяЦифраВерсии>3) Тогда
		
		Пользователь = ПользователиИнформационнойБазы.ТекущийПользователь();
		Настройка = ХранилищеСистемныхНастроек.Загрузить("Общее/НастройкиКлиентскогоПриложения", "",, Пользователь.Имя);
		Если Не ТипЗнч(Настройка) = Тип("НастройкиКлиентскогоПриложения") Тогда
			Настройка = Новый НастройкиКлиентскогоПриложения;
		КонецЕсли;
		
		СейчасВыбранТакси = Вычислить("Настройка.ВариантИнтерфейсаКлиентскогоПриложения = ВариантИнтерфейсаКлиентскогоПриложения.Такси");
		
		Если СейчасВыбранТакси Тогда
			СейчасВыбранКомпактный = Вычислить("Настройка.ВариантМасштабаФормКлиентскогоПриложения = ВариантМасштабаФормКлиентскогоПриложения.Компактный");
			
			Если НЕ СейчасВыбранКомпактный Тогда
				
				Элементы.КнопкаЕще.Ширина = 40;
				Элементы.КнопкаЕще.РастягиватьПоГоризонтали = Истина;
				
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
    	
	ИнициализацияПройдена = Истина;
	
	Если Параметры.Использовать1СЭДО Тогда
				
		Если НЕ Параметры.РезультатИнициализации.Успешно Тогда
			Сообщить("Текущая версия подсистемы 1С-ЭДО не поддерживается модулем!", СтатусСообщения.ОченьВажное);			
			ИнициализацияПройдена = Ложь;
		КонецЕсли;
		
	Иначе
		
		Если НЕ Параметры.РезультатИнициализации.Успешно Тогда
										
			ИнициализацияПройдена = Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ИнициализацияПройдена Тогда
		
		Модуль_РаботаСКомпонентой().ЭДО_СерверДиадок_ИнициализироватьСертификатыОрганизаций();
		
		УстановитьЗаголовокФормы();
		
		Попытка
			ОбновитьСписокЗадач(""); // TODO проверять интервал, если не установлен отбор, то не выполнять.
		Исключение
			Сообщить(ОписаниеОшибки());
		КонецПопытки;
		
		Если Параметры.ПоказатьОбновлениеМодуля Тогда
			ПодключитьОбработчикОжидания("ОбработчикПослеОткрытияФормы", 0.1, Истина);
		КонецЕсли;	
			
	Иначе
		
		ПодключитьОбработчикОжидания("ОбработчикПослеОткрытияФормы", 0.1, Истина);
			
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикПослеОткрытияФормы()
	
	Если Параметры.РезультатИнициализации.ПредложитьОбновлениеПоставки Тогда
		
		мОткрытьФорму("НастройкаХраненияДанныхУправляемая", Новый Структура("ПредложитьИспользование1СЭДО", Параметры.ДоступенРежим1СЭДО));
		
	ИначеЕсли Параметры.ПоказатьОбновлениеМодуля
		Или НЕ Параметры.РезультатИнициализации.Успешно Тогда
		
		мОткрытьФорму("ОбновлениеМодуляУправляемая");
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Диадок_ОбновитьГлавныйСписок" Тогда
		
		ОбновитьСписокЗадач("");
		
	ИначеЕсли ИмяСобытия = "Диадок_Сохранение_ОбщиеНастройки"
		ИЛИ ИмяСобытия = "Диадок_Сохранение_ВидыЭлектронныхДокументов"
		Или ИмяСобытия = "Диадок_Сохранение_ПакетДокументов" Тогда	
		
		ПерезаполнитьДеревоОтборовНаСервере();
		ОбновитьСписокЗадач("");
		
	ИначеЕсли ИмяСобытия = "Диадок_АвторизацияВыполнена"
		Или ИмяСобытия = "Диадок_СменаПользователя" Тогда
		
		УстановитьЗаголовокФормы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьДеревоОтборовНаСервере()
	
	_ДеревоФильтров = РеквизитФормыВЗначение("ДеревоФильтров",Тип("ДеревоЗначений"));
	_ДеревоФильтров.Строки.Очистить();
	мДерево = ОбработкаОбъект().ЗаполнитьДеревоОтборов();
	ОбработкаОбъект().ЗаполнитьСтрокиДерева(мДерево,_ДеревоФильтров);
	
	ЗначениеВРеквизитФормы(_ДеревоФильтров,"ДеревоФильтров");
	
	Если ДеревоФильтров.ПолучитьЭлементы().Количество()>0 Тогда
		ОставитьТолькоОдинПереключательНаСервере(ДеревоФильтров.ПолучитьЭлементы()[0]);
		ОставитьТолькоВыбраннуюСтрокуНаСервере(ДеревоФильтров.ПолучитьЭлементы()[0]);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	ОткрытьВыборПериода();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВыборПериода()
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	Диалог.Период = НастройкаПериода;
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("Диалог.Показать(Новый ОписаниеОповещения(""ОбработчикВыбораПериода"", ЭтаФорма,))");
	Иначе
		Если Диалог.Редактировать() Тогда 
			ОбработчикВыбораПериода(Диалог.Период,неопределено);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораПериода(Период,ДополнительныеПараметры=неопределено) Экспорт 
	
	Если Период<>Неопределено Тогда 
		НастройкаПериода = Период;
		ОбновитьСписокНаСервере(ПараметрыОбновленияСпискаДокументов());
		УстановитьЗаголовокФормы();
	КонецЕсли;
	
КонецПроцедуры // ОбработчикВыбораПериода()

&НаКлиенте
Процедура ОткрывашкаНажатие(Команда)
	
	Элементы.ПанельОтбораСообщений.Видимость = Не Элементы.ПанельОтбораСообщений.Видимость;
	Элементы.Открывашка.Заголовок = ?(Элементы.ПанельОтбораСообщений.Видимость,"<",">");
	Элементы.Открывашка.Ширина = ?(Элементы.ПанельОтбораСообщений.Видимость,2,5);
	Элементы.Открывашка.Отображение = ?(Элементы.ПанельОтбораСообщений.Видимость,ОтображениеКнопки.Текст,ОтображениеКнопки.КартинкаИТекст);
	ТекущийЭлемент = Элементы.СписокДокументов; // уберем рамку выделения у картинки
	Элементы.РазделительКартинка1.Видимость = Элементы.ПанельОтбораСообщений.Видимость;
	Элементы.РазделительКартинка2.Видимость = Не Элементы.ПанельОтбораСообщений.Видимость;
	
КонецПроцедуры

&НаКлиенте
Процедура РазделительКартинкаНажатие(Элемент)
	ОткрывашкаНажатие("");
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбмен(Команда)

	ОписаниеОповещения = НовыйОписаниеОповещения("ЭДО_Модуль_ПрочитатьНовыеСобытия",Модуль_РаботаСКомпонентой());
	ВыполнитьДействиеПослеАвторизации(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыбранныеЗадачи(Команда)

	ТекстВопроса = "Выполнить групповую обработку выбранных пакетов?";
	Режим = РежимДиалогаВопрос.ДаНет;
	
	Если Параметры.МодальностьЗапрещена Тогда
		Оповещение = Неопределено;
		Выполнить("Оповещение = Новый ОписаниеОповещения(""ОбработчикВыполнитьВыбранныеЗадачи"",ЭтаФорма, Параметры)");
		Выполнить("ПоказатьВопрос(Оповещение, ТекстВопроса, Режим)");
	Иначе
		Ответ = Вопрос(ТекстВопроса, Режим, 0);
		Если Ответ = КодВозвратаДиалога.Да Тогда
			ОбработчикВыполнитьВыбранныеЗадачи();
		КонецЕсли;
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыполнитьВыбранныеЗадачи(КодОтвета=Неопределено, ДополнительныеПараметры=Неопределено) Экспорт
	
	Если КодОтвета = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ТребуетсяОтправка = Ложь;
	Для Каждого ВыбраннаяСтрока Из Элементы.СписокДокументов.ВыделенныеСтроки Цикл
		Стр = Объект.СписокДокументов.НайтиПоИдентификатору(ВыбраннаяСтрока);
		Если Стр.Видимость И Стр.ТребуемоеДействие="Отправить пакет" Тогда
			ТребуетсяОтправка = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ТребуетсяОтправка Тогда
		
		Если МаксимальноеКоличествоАктивныхЗаданий = 0 Тогда
			ОписаниеОповещения = НовыйОписаниеОповещения("ОтправитьПакетыПоВыделеннымСтрокам",ЭтаФорма);
		Иначе
			ОписаниеОповещения = НовыйОписаниеОповещения("ОтправитьПакетыПоВыделеннымСтрокамАсинхронно",ЭтаФорма);
		КонецЕсли;
		ВыполнитьДействиеПослеАвторизации(ОписаниеОповещения);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокДокументовВыбор(Элемент, ВыбраннаяСтрокаЭлементФормы, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Колонка = Поле;
	ВыбраннаяСтрока = Элемент.ТекущиеДанные;
	
	Если Колонка.Имя = "СписокДокументовДокумент" Тогда
		
		Если ЗначениеЗаполнено(ВыбраннаяСтрока.Документ) Тогда
			Если ЭтаФорма.Параметры.МодальностьЗапрещена Тогда
				Выполнить("ПоказатьЗначение(,ВыбраннаяСтрока.Документ)");
			Иначе
				ОткрытьЗначение(ВыбраннаяСтрока.Документ)
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли Колонка.Имя = "СписокДокументовТребуемоеДействие" Тогда
		
		Если ВыбраннаяСтрока.ТребуемоеДействие= "Просмотреть документ" Тогда
			
			ГиперссылкаНаДокумент = ПолучитьСсылкуВБраузереНаСервере(ВыбраннаяСтрока.ДокументЭДО);
			Если ЗначениеЗаполнено(ГиперссылкаНаДокумент) Тогда
				ЗапуститьПриложение(ГиперссылкаНаДокумент);
			КонецЕсли;
			
		ИначеЕсли РежимОтображенияДокументов = "ПолученныеДокументы" Тогда
			
			// Пока будем только открывать форму документа
			// Отработка конкретных действий будет в следующих релизах.
			ОткрытьКарточкуВходящегоДокумента(ВыбраннаяСтрока.ДокументЭДО, ВыбраннаяСтрока.Пакет);

		ИначеЕсли РежимОтображенияДокументов = "ОтправкаПакетов" Тогда
			
			ПоказатьФормуОтправкиПакета(ВыбраннаяСтрока, Ложь);
			
		КонецЕсли;
		
	Иначе
			
		Если РежимОтображенияДокументов = "ОтправленныеДокументы" Тогда
			
			Если (ЗначениеЗаполнено(ВыбраннаяСтрока.ВидПакета) ИЛИ ЗначениеЗаполнено(ВыбраннаяСтрока.ВидПакетаID))
				И ЗначениеЗаполнено(ВыбраннаяСтрока.Пакет) 
				И ЗначениеЗаполнено(ВыбраннаяСтрока.ДокументЭДО) Тогда
				ПоказатьФормуОтправкиПакета(ВыбраннаяСтрока, Истина);
			КонецЕсли;
			
		ИначеЕсли РежимОтображенияДокументов = "ПолученныеДокументы" Тогда
			
			ОткрытьКарточкуВходящегоДокумента(ВыбраннаяСтрока.ДокументЭДО, ВыбраннаяСтрока.Пакет);
			
		КонецЕсли;
		
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьЗавершенныеПриИзменении(Элемент)
	ОбновитьСписокЗадач();
КонецПроцедуры

//} обработчики событий формы

//{ авторизация

&НаКлиенте
Процедура ОткрытьФормуАвторизации(ОписаниеОповещения = Неопределено)
	
	мИмяФормы = "АвторизацияУправляемая";
	ПараметрыФормы=	Новый Структура;
	
	Если ЭтаФорма.Параметры.МодальностьЗапрещена Тогда
		
		Если ОписаниеОповещения<>Неопределено Тогда
			ОписаниеОповещения_2 = НовыйОписаниеОповещения("ПроверитьУспешностьАвторизацииИВыполнитьОбработчик",ЭтаФорма,ОписаниеОповещения);
			ОткрытьФормуОбъектаМодально(ПутьКФормам + мИмяФормы , ПараметрыФормы, ОписаниеОповещения_2);
		Иначе
			ОткрытьФормуОбъектаМодально(ПутьКФормам + мИмяФормы , ПараметрыФормы);
		КонецЕсли;
		
	Иначе
		ПолучитьФормуОбработки(мИмяФормы,ПараметрыФормы).ОткрытьМодально();
		Если Модуль_РаботаСКомпонентой().ЭДО_СерверДиадок_ПроверитьСоединение() Тогда
			
			Если ОписаниеОповещения<>Неопределено Тогда
				мВыполнитьОбработкуОповещения(ОписаниеОповещения);
			КонецЕсли;
			
		Иначе
			Сообщить("Не авторизован в сервисе");	
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуАвторизацииПоЛогину(ОписаниеОповещения = Неопределено)
	
	мИмяФормы = "АвторизацияУправляемая";	
	ПараметрыФормы = Новый Структура("Режим", "ПоПаролю");	
	
	Если ЭтаФорма.Параметры.МодальностьЗапрещена Тогда
		
		ОткрытьФормуОбъектаМодально(ПутьКФормам + мИмяФормы, ПараметрыФормы,ОписаниеОповещения);
		
	Иначе
		
		ПолучитьФормуОбработки(мИмяФормы, ПараметрыФормы).ОткрытьМодально();
		Если Не ОписаниеОповещения = Неопределено Тогда
			мВыполнитьОбработкуОповещения(ОписаниеОповещения);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура мВыполнитьОбработкуОповещения(ОписаниеОповещения)
	
	Если Параметры.МодальностьЗапрещена Тогда
		Выполнить("ВыполнитьОбработкуОповещения(ОписаниеОповещения)");
	Иначе 
		Выполнить("ОписаниеОповещения.Модуль."+ОписаниеОповещения.ИмяПроцедуры+"(Неопределено,ОписаниеОповещения.ДополнительныеПараметры)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура мПоказатьВводСтроки(ОписаниеОповещенияОЗавершении, Строка = "", Подсказка = "", Длина = 0, Многострочность = Ложь) Экспорт 
	
	Если Параметры.МодальностьЗапрещена Тогда
		Выполнить("ПоказатьВводСтроки(ОписаниеОповещенияОЗавершении, Строка, Подсказка, Длина, Многострочность)");
	Иначе
		ВвестиСтроку(Строка, Подсказка, Длина, Многострочность);
		Выполнить("ОписаниеОповещенияОЗавершении.Модуль."+ОписаниеОповещенияОЗавершении.ИмяПроцедуры+"(Строка, ОписаниеОповещенияОЗавершении.ДополнительныеПараметры)");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьДействиеПослеАвторизации(ОписаниеОповещения) Экспорт
	
	Если НЕ Модуль_РаботаСКомпонентой().ЭДО_СерверДиадок_ПроверитьСоединение() Тогда
		ОткрытьФормуАвторизации(ОписаниеОповещения); // здесь нужна еще одна проверка - прошла ли авторизация успешно
	Иначе
		мВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьУспешностьАвторизацииИВыполнитьОбработчик(П1,ОписаниеОповещения) Экспорт
	
	Если Модуль_РаботаСКомпонентой().ЭДО_СерверДиадок_ПроверитьСоединение() Тогда
		мВыполнитьОбработкуОповещения(ОписаниеОповещения);
	КонецЕсли;
	
КонецПроцедуры

//} авторизация

&НаКлиенте
Процедура мОткрытьФорму(мИмяФормы, СтруктураДополнительныхПараметры=Неопределено)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриЗакрытииВладельца", Истина);
	
	Если СтруктураДополнительныхПараметры <> Неопределено Тогда
		Для Каждого КлючИЗначение Из СтруктураДополнительныхПараметры Цикл
			ПараметрыФормы.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
	
	ОткрытьФорму(Модуль_Платформа().ПутьКФормам + мИмяФормы, ПараметрыФормы, ЭтаФорма); // модальность не нужна
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗадач(Команда=Неопределено)
	
	Если Форма_ПрогрессВыполнения().ПрогрессВыполнен() Тогда
		Форма_ПрогрессВыполнения().фЗакрытьФорму();
	КонецЕсли;
	
	ПараметрыОбновленияСписка = ПараметрыОбновленияСпискаДокументов();
	ОбновитьСписокНаСервере(ПараметрыОбновленияСписка);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокНаСервере(ЗНАЧ ПараметрыОбновленияСписка)
	
	Объект.СписокДокументов.Очистить();
	
    // Добавим параметры из дерева
	_ДеревоФильтров = РеквизитФормыВЗначение("ДеревоФильтров", Тип("ДеревоЗначений"));
	Для Каждого Эл Из ОбработкаОбъект().ПолучитьПараметрыИзДереваОтборов(_ДеревоФильтров) Цикл
		ПараметрыОбновленияСписка.Вставить(Эл.Ключ, Эл.Значение);
	КонецЦикла;
	
	// Проверяем, менялся ли режим отображения. Если менялся, то перерисуем колонки и перестроим СКД.
	мСтарыйРежимОтображенияДокументов = РежимОтображенияДокументов;
	РежимОтображенияДокументов = ПараметрыОбновленияСписка.Режим;
	
	ОбработкаОбъект().ЭДО_Модуль_ОбновитьСписокДокументов(ПараметрыОбновленияСписка);
	
	ЗначениеВРеквизитФормы(ОбработкаОбъект().СписокДокументов, "Объект.СписокДокументов");
	
	Если мСтарыйРежимОтображенияДокументов<>РежимОтображенияДокументов Тогда

		ПереключитьВидимостьКолонок(мСтарыйРежимОтображенияДокументов, Истина);
		ПереключитьВидимостьКолонок(РежимОтображенияДокументов, Ложь);
		ЗаполнитьМенюКнопкиЕще(РежимОтображенияДокументов);
		
		УстановитьСхемуСКДПоРежиму(РежимОтображенияДокументов);
		НастройкиДопКолонок = ОбработкаОбъект().ЭДО_ПодключаемыйМодуль_ОбработатьСобытие("ПолучитьНастройкиДополнительныхКолонокСпискаДокументов", 
					Новый Структура("Режим", РежимОтображенияДокументов));
					
		НастроитьДополнительныеКолонкиНаСервере(НастройкиДопКолонок);
		
	КонецЕсли;		
	
	УстановитьТекущиеОтборыНаСервере();

КонецПроцедуры

&НаСервере
Процедура УстановитьСхемуСКДПоРежиму(Режим)
	
	АдресСхемы = Неопределено;
	Объект.АдресаСКДОтбора.Свойство(Режим, АдресСхемы);
	
	Если АдресСхемы = Неопределено Тогда
		СхемаСКД 	= ОбработкаОбъект().ТаблицаОтборов_ПолучитьСКД(Режим);
		АдресСхемы 	= ПоместитьВоВременноеХранилище(СхемаСКД,  Новый УникальныйИдентификатор());
		Объект.АдресаСКДОтбора.Вставить(Режим, АдресСхемы);
	Иначе
		СхемаСКД = ПолучитьИзВременногоХранилища(АдресСхемы);
	КонецЕсли;
	
	Объект.КомпановщикНастроекОтбора.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	Объект.КомпановщикНастроекОтбора.ЗагрузитьНастройки(СхемаСКД.НастройкиПоУмолчанию);
	
КонецПроцедуры

&НаСервере
Процедура ПереключитьВидимостьКолонок(РежимОтображенияДокументов, ВидимостьЭлементов)
	
	ПереключаемыеКолонки = ОбработкаОбъект().ЭДО_МассивПереключаемыхКолонокСписка(РежимОтображенияДокументов);
		
	Для Каждого КолонкаФормы Из Элементы.СписокДокументов.ПодчиненныеЭлементы Цикл
		
		Для Каждого КолонкаТаблицы Из ПереключаемыеКолонки Цикл
			Если КолонкаФормы.ПутьКДанным = "Объект.СписокДокументов." + КолонкаТаблицы Тогда
				КолонкаФормы.Видимость = ВидимостьЭлементов;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьДополнительныеКолонкиНаСервере(ОписанияДополнительныхКолонок)
	
	Для Сч = 1 По 5 Цикл
		Элементы["СписокДокументовДопРеквизит" + Формат(Сч, "ЧГ=0")].Видимость = Ложь;
	КонецЦикла;
	
	
	Если ОписанияДополнительныхКолонок<>Неопределено Тогда
		Для Сч=0 По ОписанияДополнительныхКолонок.Количество()-1 Цикл
			
			Если Сч>4 Тогда
				ВызватьИсключение "Допускается не более 5 дополнительных колонок в списке документов";
			КонецЕсли;
			
			ТекКолонка = Элементы["СписокДокументовДопРеквизит" + Формат(Сч+1, "ЧГ=0")];
			ТекКолонка.Заголовок = ОписанияДополнительныхКолонок[Сч].Заголовок;
			ТекКолонка.Видимость = Истина;
			
		КонецЦикла;
	КонецЕсли;
	
		
КонецПроцедуры

&НаКлиенте 
Функция ПараметрыОбновленияСпискаДокументов() Экспорт
	
	Результат = Новый Структура;
	//подготовим параметры для заполнения списка задач
	НачалоПериода = НастройкаПериода.ДатаНачала;
	Если Не ЗначениеЗаполнено(НастройкаПериода.ДатаОкончания) Тогда
		КонецПериода = КонецДня(Дата("39990101"));
	Иначе
		КонецПериода = КонецДня(НастройкаПериода.ДатаОкончания);
	КонецЕсли;
	
	Результат.Вставить("НачалоПериода",			НачалоПериода);
	Результат.Вставить("КонецПериода",			КонецПериода);
		
	Результат.Вставить("ПоказыватьЗавершенные", ПоказыватьЗавершенные);
	
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ОпределитьИмяТипаДокумента(ЗНАЧ Ссылка)

	Возврат "Документ."+Ссылка.Метаданные().Имя;	

КонецФункции // ОпределитьИмяТипаОбъекта(ТекСтрока.Документ)()

//{ выполнение действий с выделенными строками

&НаКлиенте
Процедура ПоказатьФормуОтправкиПакета(ВыбраннаяСтрока, ДляПереотправки=Ложь)
	
	мИмяФормы = "ПакетДокументов_ОтправкаУправляемая";
	
	СтруктураДанныхСтрокиСписка = Новый Структура(СтруктураДанныхСтрокиСпискаСтрокой);
	ЗаполнитьЗначенияСвойств(СтруктураДанныхСтрокиСписка,ВыбраннаяСтрока);

	//открытие пакета из отправленного документа
	Если ДляПереотправки Тогда
		Если Параметры.Использовать1СЭДО Тогда
			СтруктураДанныхСтрокиСписка.Документ = ПолучитьЗначениеРеквизитаТабличнойЧастиНаСервереБезКонтекста(СтруктураДанныхСтрокиСписка.Пакет, "ЭлектронныеДокументы", 0, "ОбъектВладелец");
		Иначе
			СтруктураДанныхСтрокиСписка.Документ = ПолучитьЗначениеРеквизитаНаСервереБезКонтекста(СтруктураДанныхСтрокиСписка.Пакет, "Документ");
		КонецЕсли;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура("СтрокаИзИнтерфейса",СтруктураДанныхСтрокиСписка);
		
	Если Параметры.МодальностьЗапрещена Тогда 
		Оповещение = НовыйОписаниеОповещения("ПослеЗакрытияФормыОтправкиПакетаДокументов", ЭтаФорма);
		ОткрытьФормуОбъектаМодально(ПутьКФормам + мИмяФормы, ПараметрыФормы, Оповещение);
	Иначе
		РезультатЗакрытия = ПолучитьФормуОбработки(мИмяФормы,ПараметрыФормы).ОткрытьМодально();
		Если РезультатЗакрытия = "Диадок_ОбновитьГлавныйСписок" Тогда
			ОбновитьСписокЗадач();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыОтправкиПакетаДокументов(Результат, ДополнительныеПараметры) Экспорт 
	
	Если Результат = "Диадок_ОбновитьГлавныйСписок" Тогда
		ОбновитьСписокЗадач();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПакетыПоВыделеннымСтрокам(П1=Неопределено,П2=Неопределено) Экспорт
	
	// И желательно бы научиться квантовать.
	
	МассивСтрокНаОтправкуПакетов = Новый Массив;
	
	Для Каждого ИДТекущейСтроки Из Элементы.СписокДокументов.ВыделенныеСтроки Цикл
		ТекущаяСтрока = Объект.СписокДокументов.НайтиПоИдентификатору(ИДТекущейСтроки);
		Если ТекущаяСтрока.Видимость И ЗначениеЗаполнено(ТекущаяСтрока.ВидПакета)
			//И Не ЗначениеЗаполнено(ТекущаяСтрока.Пакет) 
			Тогда
			
			//будем готовить
			МассивСтрокНаОтправкуПакетов.Добавить(ИДТекущейСтроки);
			
		КонецЕсли;
	КонецЦикла;
	
	МассивПакетов = ОтправитьПакетыПоВыделеннымСтрокам_НаСервере(МассивСтрокНаОтправкуПакетов);
	
	Для Каждого Пакет Из МассивПакетов Цикл		
		РезультатОтправкиТекст = Модуль_РаботаСКомпонентой().ЭДО_Транспорт_ОтправитьПакетДокументов(Пакет); //+клиент
		Пакет.Вставить("РезультатОтправкиТекст", РезультатОтправкиТекст);		
	КонецЦикла;
	
	СохранитьПакетыНаСервере(МассивПакетов,"Отправлен");  // ушли на сервер
	
	ОбновитьСписокЗадач("");
	
	Модуль_Платформа().ПоказатьПредупреждениеПереопределенная(,"Обработка пакетов завершена.");
	
КонецПроцедуры

&НаСервере
Функция ОтправитьПакетыПоВыделеннымСтрокам_НаСервере(ЗНАЧ МассивСтрокНаОтправкуПакетов)
	
	МассивПакетов = Новый Массив;
	
	Для Каждого ИДТекущейСтроки Из МассивСтрокНаОтправкуПакетов Цикл
		
		ВыбраннаяСтрока = Объект.СписокДокументов.НайтиПоИдентификатору(ИДТекущейСтроки);
		
		мСтруктура = Новый Структура;
		Для Каждого Колонка Из ОбработкаОбъект().СписокДокументов.ВыгрузитьКолонки().Колонки Цикл
			мСтруктура.Вставить(Колонка.Имя,ВыбраннаяСтрока[Колонка.Имя]);
		КонецЦикла;
		
		Пакет = ОбработкаОбъект().СобратьПакетПоСтрокеСписка(мСтруктура);
		МассивПакетов.Добавить(Пакет);
		
	КонецЦикла;
	
	СохранитьПакетыНаСервере(МассивПакетов,"Подготовлен"); // довольно опасно, но попробуем

	Возврат МассивПакетов;
	
КонецФункции

&НаКлиенте
Функция ЭДО_ПакетДокументов_Отправить(_Парам1,Парам) Экспорт // костыли с параметрами - продумать
	
	// Авторизация: на входе сюда должны быть уже авторизованы, об этом надо позаботиться выше.
	// А пока поставим забор.
	Если Не Модуль_РаботаСКомпонентой().ЭДО_СерверДиадок_ПроверитьСоединение() Тогда
		ВызватьИсключение "Попытка выполнить действие без авторизации";
	КонецЕсли;
	
	// чтобы не показывалась форма прогресса
	Форма_ПрогрессВыполнения().МассоваяОбработка = Ложь;
	
	// что здесь не нравится, так это постоянная беготня между клиентом и сервером
	// Надо продумать пакетный режим. Хотя бы на вход подавать Массив из Пакетов
	
	Если ТипЗнч(Парам) = Тип("Массив") Тогда
		МассивПакетов = Парам;
	Иначе
		МассивПакетов = Новый Массив;
		МассивПакетов.Добавить(Парам);
	КонецЕсли;
	
	//Если Пакет=Неопределено
	//	Или Пакет.Документы.Количество()=0 Тогда
	//	Возврат Неопределено;
	//КонецЕсли;
	
	Результат = ""; //а что возвращать то будем?
	
	
	//НачатьТранзакцию();//возможно, транзакцию стоит организовать внутри ЭДО_Хранение_СохранитьПакетДокументов, а отсюда убрать.
	//
	Попытка
	//
	//	ЭДО_ПакетДокументов_ПодготовитьСвойстваДляОтправки_Компонента(Пакет);// заполним все ID
	//	
	//	ЭДО_Хранение_СохранитьПакетДокументов(Пакет,"Подготовлен");
	//	
	
		СоответствиеОрганизацийИСертификатов = ПолучитьСоответствиеОрганизацийИОблачныхСертификатовНаСервере();
		
	    СохранитьПакетыНаСервере(МассивПакетов,"Подготовлен");  // ушли на сервер
		Для Каждого Пакет Из МассивПакетов Цикл
			
			ПодписалиОблачнойПодписью = Ложь;
			// проверим наличие облачной подписи
			МассивСертификатов = СоответствиеОрганизацийИСертификатов.Получить(Пакет.Данные1С.Организация);
			РезультатОтправкиТекст = "";
			Если МассивСертификатов = Неопределено Тогда
				РезультатОтправкиТекст = Модуль_РаботаСКомпонентой().ЭДО_Транспорт_ОтправитьПакетДокументов(Пакет); //+клиент
			Иначе
				
				Отпечаток = "";
				КоличествоОблачныхСертификатов = МассивСертификатов.Количество();
				Если КоличествоОблачныхСертификатов = 0 Тогда
					//Сообщить("Не найдены облачные сертификаты");
					Возврат "Не найдены облачные сертификаты";
				ИначеЕсли КоличествоОблачныхСертификатов = 1 Тогда
					Отпечаток = МассивСертификатов[0].ОтпечатокСертификата;
				Иначе
					// тут нужна форма выбора облачного сертификата, которым будем подписывать
				КонецЕсли;
				
				времПакет = Пакет;
				МассивПакетовДокументов = Новый Массив;
				МассивПакетовДокументов.Добавить(Новый Структура("ДанныеСервер", времПакет));
				
				ПодписалиОблачнойПодписью = Истина;
				
				РезультатОтправкиТекст = Модуль_РаботаСКомпонентой().ЭДО_Транспорт_ОтправитьМассивПакетовДокументовСОблачнойПодписью(МассивПакетовДокументов, Отпечаток);
			КонецЕсли;
			
			Пакет.Вставить("РезультатОтправкиТекст", РезультатОтправкиТекст);
			
		КонецЦикла;
	//	
    	Если Не ПодписалиОблачнойПодписью Тогда
			
			СохранитьПакетыНаСервере(МассивПакетов,"Отправлен");  // ушли на сервер
		
		//	//теперь надо бы снова сохранить документы, но уже изменив статусы и добавив туда ID.
	//	//Или другой вариант: вычитывать ленту API и по ней менять статусы в справочнике. Тогда придется как-то сопоставлять.
	//	ЭДО_Хранение_СохранитьПакетДокументов(Пакет,"Отправлен");//обновили ID
	//	
	//	ЗафиксироватьТранзакцию();
	//	
			Для Каждого Пакет Из МассивПакетов Цикл
				Оповестить("Диадок_ПакетДокументов_Отправка",Пакет);
			КонецЦикла;
			
		КонецЕсли;
		
	Исключение
	//	
		_Ошибка = ОписаниеОшибки();
	//	ОтменитьТранзакцию();
		Сообщить(_Ошибка);
	//	ВызватьИсключение "Пакет документов не отправлен по ошибке:"+Символы.ПС+_Ошибка;
	//	
	КонецПопытки;	
	
	//что делаем:
	//1. Создаем запись в справочнике "Диадок_Документы" со статусом вроде "Отправляется"
	//2. Дальше каким-то образом мониторим записи, которые не имеют статус вроде "Все ок доставлено".
	//3. С этими записями есть 2 варианта: либо опросить статусы по API еще раз, либо переотправить заново.
	//При переотправке затирать старые или нет?
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СохранитьПакетыНаСервере(МассивПакетов,Статус)
	
	Для Каждого Пакет Из МассивПакетов Цикл
		ОбработкаОбъект().ЭДО_Хранение_СохранитьПакетДокументов(Пакет,Статус);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьМассивПакетовНаСервере(МассивПакетов)
	
	Для Каждого СтруктураПакета Из МассивПакетов Цикл
		ОбработкаОбъект().ЭДО_Хранение_СохранитьПакетДокументов(СтруктураПакета.Пакет, СтруктураПакета.Статус);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПакетНаСервере(Пакет, Статус)
	
	ОбработкаОбъект().ЭДО_Хранение_СохранитьПакетДокументов(Пакет,Статус);
	
КонецПроцедуры


//} выполнение действий с выделенными строками
	
&НаСервере
Функция ПолучитьСсылкуВБраузереНаСервере(ЗНАЧ ДокументЭДО)
	
	Возврат ОбработкаОбъект().ЭДО_Документ_СсылкаВБраузере(ДокументЭДО);
	
КонецФункции



//{	Кнопка "Еще"
	
&НаСервере
Процедура СкопироватьКнопкуЕще(ИмяКнопки)
	
	Попытка
		Выполнить("Элементы.КнопкаЕще"+ИмяКнопки+".Видимость=Истина");
	Исключение
		Сообщить("Не обнаружена кнопка : " + ИмяКнопки);
	КонецПопытки;
	
КонецПроцедуры	

&НаКлиенте
Процедура КнопкаЕщеНажатие(Команда)
	
	СписокКнопок=Новый СписокЗначений;
	Для Каждого КнопкаРазделаЕще Из Элементы.Еще.ПодчиненныеЭлементы  Цикл
		Если КнопкаРазделаЕще.Видимость = истина Тогда 
			СписокКнопок.Добавить(КнопкаРазделаЕще.Имя, КнопкаРазделаЕще.Заголовок, , КнопкаРазделаЕще.Картинка);
		КонецЕсли;
	КонецЦикла;
	
	Если Параметры.МодальностьЗапрещена Тогда 
		Выполнить("ПоказатьВыборИзСписка(Новый ОписаниеОповещения(""ОбработчикВыбораДействияИзМенюЕще"",ЭтаФорма), СписокКнопок)");
	Иначе
		ВыбранноеЗначение=ВыбратьИзМеню(СписокКнопок,Элементы.КнопкаЕще);
		ОбработчикВыбораДействияИзМенюЕще(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыбораДействияИзМенюЕще(ВыбранноеЗначение=неопределено, ДополнительныеПараметры=неопределено)Экспорт
	
	Если ВыбранноеЗначение<>Неопределено Тогда
		
		ИмяОбработчика = ВыбранноеЗначение.Значение;
		Выполнить(ИмяОбработчика+"("""")");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМенюКнопкиЕще(РежимОтображенияДокументов)
	
	Для Каждого КнопкаРазделаЕще Из Элементы.Еще.ПодчиненныеЭлементы  Цикл
		КнопкаРазделаЕще.Видимость=Ложь;
	КонецЦикла;
	
	Если РежимОтображенияДокументов = "ПолученныеДокументы" Тогда
		//СкопироватьКнопкуЕще("КарточкаВходящегоДокумента");
		СкопироватьКнопкуЕще("СоздатьДокумент");
		СкопироватьКнопкуЕще("СопоставитьДокумент");
		
		// Алгоритмы для торговых сетей
		СкопироватьКнопкуЕще("АнализВыбранныхДокументов");
		СкопироватьКнопкуЕще("ВыполнитьТребуемоеДействие");
		СкопироватьКнопкуЕще("ОтправитьГотовыеОтветы");
		СкопироватьКнопкуЕще("ПометитьДокументыКакЗавершенные");
		Если Не Параметры.Использовать1СЭДО Тогда
			СкопироватьКнопкуЕще("АнализВыбранныхПакетов");
		КонецЕсли;
		
		// Прочие сервисные функции
		СкопироватьКнопкуЕще("ПолучитьПечатнуюФормуССервераДиадок");
		
	ИначеЕсли РежимОтображенияДокументов = "ОтправленныеДокументы" Тогда
		
		СкопироватьКнопкуЕще("ПолучитьПечатнуюФормуССервераДиадок");
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КнопкаЕщеКарточкаВходящегоДокумента(Команда)

	Если НЕ Элементы.СписокДокументов.ТекущаяСтрока = Неопределено Тогда
		
		ТекущаяСтрока = Объект.СписокДокументов.НайтиПоИдентификатору(Элементы.СписокДокументов.ТекущаяСтрока);
		Если ЗначениеЗаполнено(ТекущаяСтрока.ДокументЭДО) Тогда
			ОткрытьКарточкуВходящегоДокумента(ТекущаяСтрока.ДокументЭДО, ТекущаяСтрока.Пакет);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЕщеСоздатьДокумент(Команда)

	СоздатьДокументыНаСервере(МассивСсылокДокументов_ДД_В_ВыделенныхСтроках());
	ОбновитьСписокЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЕщеСопоставитьДокумент(Команда)

	СопоставитьДокументыНаСервере(МассивСсылокДокументов_ДД_В_ВыделенныхСтроках());
	ОбновитьСписокЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарточкуВходящегоДокумента(ДокументДД, ПакетДД)
	
	ПараметрыФормы=	Новый Структура;
	
	ПараметрыФормы.Вставить("ДокументДД",						ДокументДД);
	ПараметрыФормы.Вставить("ПакетДД",							ПакетДД);
	ПараметрыФормы.Вставить("ЗакрыватьПриЗакрытииВладельца",	Истина);
	
	мОткрытьФорму("КарточкаВходящегоДокументаУправляемая", ПараметрыФормы);
	
КонецПроцедуры

&НаКлиенте
Функция МассивСсылокДокументов_ДД_В_ВыделенныхСтроках()
	
	Результат= Новый Массив;
	Для Каждого ИндексВыбраннойСтроки Из Элементы.СписокДокументов.ВыделенныеСтроки Цикл
		ТекущаяСтрока = Объект.СписокДокументов.НайтиПоИдентификатору(ИндексВыбраннойСтроки);
		Если ЗначениеЗаполнено(ТекущаяСтрока.ДокументЭДО)
			И ТекущаяСтрока.Видимость Тогда
			Результат.Добавить(Новый Структура("ДокументДД, ПакетДД", ТекущаяСтрока.ДокументЭДО, ТекущаяСтрока.Пакет));
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура СопоставитьДокументыНаСервере(МассивДокументов)
	
	Для Каждого СтруктураДанных Из МассивДокументов Цикл
		
		РезультатФункции = ОбработкаОбъект().НайтиИСопоставитьДокументДД(СтруктураДанных.ДокументДД, СтруктураДанных.ПакетДД);
		ОбработкаОбъект().ОбработатьРезультатФункции(РезультатФункции);
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура СоздатьДокументыНаСервере(МассивДокументов)
	
	Для Каждого СтруктураДанных Из МассивДокументов Цикл
		
		РезультатФункции = ОбработкаОбъект().СоздатьИСопоставитьДокументДД(СтруктураДанных.ДокументДД, СтруктураДанных.ПакетДД);
		ОбработкаОбъект().ОбработатьРезультатФункции(РезультатФункции);
		
	КонецЦикла;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДанныеДляОтправкиОтветовНаСервере(ЗаданияОтправки)
	
	Для Каждого Задание Из ЗаданияОтправки Цикл
		
		Задание.Данные = ОбработкаОбъект().ЭДО_ПолучитьСохраненныеДанныеДляОтправкиОтвета(Задание.Ссылка, Задание.Пакет);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЕщеОтправитьГотовыеОтветы(Команда)
	
	ТекущийРежимАсинхроннойОбработки = "ПодписаниеВходящихДокументов";
	ОписаниеОповещения = НовыйОписаниеОповещения("НачатьАсинхроннуюОбработкуВыделенныхСтрок",ЭтаФорма);
	ВыполнитьДействиеПослеАвторизации(ОписаниеОповещения);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусыДокументовНаСервере(ЗаданияОтправки)
	
	Для Каждого Задание Из ЗаданияОтправки Цикл
		
		Если ЗначениеЗаполнено(Задание) Тогда
			ОбработкаОбъект().ЭДО_УстановитьСтатусДокумента(Задание.ДокументДД, Задание.НовыйСтатус);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЕщеВыполнитьТребуемоеДействие(Команда)

	ВыполнитьТребуемоеДействиеНаСервере(МассивСсылокДокументов_ДД_В_ВыделенныхСтроках());
	ОбновитьСписокЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЕщеАнализВыбранныхДокументов(Команда)

	АнализВыбранныхДокументовНаСервере(МассивСсылокДокументов_ДД_В_ВыделенныхСтроках());
	ОбновитьСписокЗадач();
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьТребуемоеДействиеНаСервере(МассивДокументовДД)
	
	Для Каждого СтруктураДанных Из МассивДокументовДД Цикл
		ОбработкаОбъект().ЭДО_ВыполнитьТребуемоеДействиеПоВходящемуДокументу(СтруктураДанных.ДокументДД, СтруктураДанных.ПакетДД);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура АнализВыбранныхДокументовНаСервере(МассивДокументовДД)
	
	Для Каждого СтруктураДанных Из МассивДокументовДД Цикл
		ОбработкаОбъект().ЭДО_ПровестиАнализВходящегоДокумента(СтруктураДанных.ДокументДД, СтруктураДанных.ПакетДД);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЕщеПолучитьПечатнуюФормуССервераДиадок(Команда)

	Если Элементы.СписокДокументов.ТекущиеДанные <> Неопределено Тогда
		ОписаниеОповещения = НовыйОписаниеОповещения("ПолучитьПечатнуюФормуСервераДиадок", ЭтаФорма);
		ВыполнитьДействиеПослеАвторизации(ОписаниеОповещения);		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПечатнуюФормуСервераДиадок(Параметр1=Неопределено, Параметр2=Неопределено) Экспорт
	
	ДокументЭДО = Элементы.СписокДокументов.ТекущиеДанные.ДокументЭДО;
	Модуль_РаботаСКомпонентой().ЭДО_ПолучитьПечатнуюФормуСервераДиадок(ДокументЭДО);
		
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЕщеПометитьДокументыКакЗавершенные(Команда)

	ПометитьДокументыКакЗавершенныеНаСервере(МассивСсылокДокументов_ДД_В_ВыделенныхСтроках());
	ОбновитьСписокЗадач();
	
КонецПроцедуры

&НаСервере
Процедура ПометитьДокументыКакЗавершенныеНаСервере(МассивДокументовДД)
	
	Для Каждого СтруктураДанных Из МассивДокументовДД Цикл
		ОбработкаОбъект().ЭДО_ПометитьВходящийДокументКакЗавершенный(СтруктураДанных.ДокументДД);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаЕщеАнализВыбранныхПакетов(Команда)
	АнализВыбранныхПакетовНаСервере(МассивСсылокДокументов_ДД_В_ВыделенныхСтроках());
	ОбновитьСписокЗадач();
КонецПроцедуры

&НаСервере
Процедура АнализВыбранныхПакетовНаСервере(МассивДокументовДД)

	СоответствиеВыбранныхПакетов = Новый Соответствие;  // чтоб не мучаться с поиском уже добавленных
		
	Для Каждого СтруктураДанных Из МассивДокументовДД Цикл
		
		Если ЗначениеЗаполнено(СтруктураДанных.ПакетДД) Тогда
			СоответствиеВыбранныхПакетов.Вставить(СтруктураДанных.ПакетДД,Неопределено);
		КонецЕсли;
		
	КонецЦикла;	
	
	Для Каждого КлючИЗначение Из СоответствиеВыбранныхПакетов Цикл
		ОбработкаОбъект().ЭДО_ПровестиАнализВходящегоПакета(КлючИЗначение.Ключ);
	КонецЦикла;
	
КонецПроцедуры

//}	Кнопка "Еще"
	

//{ асинхронное выполнение задач (подписание, отправка, ...)

&НаКлиенте
Процедура ОтправитьПакетыПоВыделеннымСтрокамАсинхронно(П1=Неопределено, П2=Неопределено) Экспорт
	
	ТекущийРежимАсинхроннойОбработки = "ОтправкаПакетов";
	НачатьАсинхроннуюОбработкуВыделенныхСтрок();
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьАсинхроннуюОбработкуВыделенныхСтрок(п1=Неопределено, П2=Неопределено) Экспорт
	
	Если ТекущийРежимАсинхроннойОбработки = "ОтправкаПакетов" Тогда
		ЗаголовокФормыПрогресса = "Отправка %количество% пакетов";
	ИначеЕсли ТекущийРежимАсинхроннойОбработки = "ПодписаниеВходящихДокументов" Тогда
		ЗаголовокФормыПрогресса = "Подписание %количество% документов";
	КонецЕсли;
	
	ОчиститьСообщения();
	ВывестиСообщениеПользователю("Начало обработки документов: "+ТекущаяДата());
	
	МассивСтрокДляОтправки = ПолучитьМассивСтрокДляАсинхроннойОбработки();
	
	// лезем на сервер за данными по облачным сертификатам организаций
	// чуть позже по ним будем фильтровать строки: асинхрон только по локальным сертам
	// а облака через синхронную передачу
	СоответствиеОрганизацийСОблачнымиСертификатами = ПолучитьСоответствиеОрганизацийИОблачныхСертификатовНаСервере();
	МассивСтрокДляПодписанияОблачнымиСертификатами = Новый Массив;
	
	Форма_ПрогрессВыполнения().МассоваяОбработка = Истина;
	Форма_ПрогрессВыполнения().УстановитьМаксимальноеЗначение(МассивСтрокДляОтправки.Количество() * 2); // 1 итерация на подготовку пакета и 1 на его отправку
	Форма_ПрогрессВыполнения().УстановитьЗаголовок(СтрЗаменить(ЗаголовокФормыПрогресса, "%количество%", МассивСтрокДляОтправки.Количество()));
	Форма_ПрогрессВыполнения().УстановитьЗначениеПрогресса(0);
	
	КолОбработанныхСтрокДляОтправки = 0;
	ПорцияДанныхДляОбработки = Новый Массив;
	
	ВГраница = МассивСтрокДляОтправки.ВГраница();
    Для Сч=0 По ВГраница Цикл
		
		Если ТекущийРежимАсинхроннойОбработки = "ОтправкаПакетов" Тогда
			Если Не СоответствиеОрганизацийСОблачнымиСертификатами.Получить(МассивСтрокДляОтправки[Сч].Организация) = Неопределено Тогда
				// отсеим строки с теми организациями у которых есть облачные подписи
				МассивСтрокДляПодписанияОблачнымиСертификатами.Добавить(МассивСтрокДляОтправки[Сч]);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		// В МассивСтрокДляОтправки у нас массив данных из всех строк, которые выбрал пользователь.
		// Разобьем его на массивы покороче - ПорцияДанныхДляОбработки - и будем передавать дальше по конвейеру
		
		КолОбработанныхСтрокДляОтправки = КолОбработанныхСтрокДляОтправки + 1;
		ПорцияДанныхДляОбработки.Добавить(МассивСтрокДляОтправки[Сч]);
		
		Если КолОбработанныхСтрокДляОтправки % МаксимальноеКоличествоАктивныхЗаданий = 0  //набрали порцию для обработки
			Или Сч = ВГраница Тогда  // добрались до конца - обработаем то, что осталось
			
			ОбработатьОчередиАсинхронныхЗадач(ПорцияДанныхДляОбработки);
			
		КонецЕсли;
				
		Форма_ПрогрессВыполнения().УвеличитьЗначениеПрогресса();
		
	КонецЦикла;
	
	Если ПорцияДанныхДляОбработки.Количество()>0 Тогда
		ОбработатьОчередиАсинхронныхЗадач(ПорцияДанныхДляОбработки);
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("ОбработчикОжиданияАсинхронныхЗадач", 1);  // дождемся завершения обработки очереди
	
	Если МассивСтрокДляПодписанияОблачнымиСертификатами.Количество() Тогда
		ОбработатьМассивСтрокДляОблачнойПодписи(МассивСтрокДляПодписанияОблачнымиСертификатами);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьМассивСтрокДляАсинхроннойОбработки()
	
	Результат = Новый Массив;
	
	Если ТекущийРежимАсинхроннойОбработки = "ОтправкаПакетов" Тогда
		
		Для Каждого ИДТекущейСтроки Из Элементы.СписокДокументов.ВыделенныеСтроки Цикл
			
			ТекущаяСтрока = Объект.СписокДокументов.НайтиПоИдентификатору(ИДТекущейСтроки);
			
			Если ТекущаяСтрока.Видимость И ЗначениеЗаполнено(ТекущаяСтрока.ВидПакета) Тогда			
				
				СтруктураДанныхТекущейСтроки = Новый Структура("Пакет, ВидПакета, Документ, ДатаДокумента, НомерДокумента, СуммаДокумента, Контрагент, Организация, ВидПакетаID, ВидЭлДокументаID");
				ЗаполнитьЗначенияСвойств(СтруктураДанныхТекущейСтроки, ТекущаяСтрока);
				Результат.Добавить(СтруктураДанныхТекущейСтроки);
				
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТекущийРежимАсинхроннойОбработки = "ПодписаниеВходящихДокументов" Тогда
		
		Результат = МассивСсылокДокументов_ДД_В_ВыделенныхСтроках();
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьОчередиАсинхронныхЗадач(ПорцияДанныхДляОбработки=Неопределено)
	
	// Общая логика выполнения асинхронных операций такова:
	
	// 0. Готовим массив исходных элементов для параллельной обработки. Это будет массив выделенных строк в интерфейсе.
	//    Дробим этот массив на порции. Размер порции не должен превышать максимальную длину очереди (например, 10). Это хранится в переменной МаксимальноеКоличествоАктивныхЗаданий.
	
	// 1. Берем очередную порцию, идем на сервер 1С и выбираем оттуда необходимые данные (состав пакета для отправки, титулы покупателей и т.д.).
	//    Возвращаем их на клиент, добавляем в МассивПодготовленныхДанныхДляАсинхронныхЗаданий.
	
	// 2. На клиенте создаем COM-объекты асинхронных заданий, заполняем их данными из п.1. (например, заполняем Content). Эти COM-объекты помещаются в МассивАктивныхАсинхронныхЗаданий
	
	// 3. На клиенте периодически опрашиваем COM-объекты из МассивАктивныхАсинхронныхЗаданий: завершены или нет. 
	//    Если завершены, то вычеркиваем их из МассивАктивныхАсинхронныхЗаданий и отправляем в шаг 4.
	
	// 4. Когда асинхронное задание завершено (успешно или нет), мы берем результаты обработки и можем что-то записать в БД. Это выполняется на сервере 1С.
	
	// Очередь (МассивАктивныхАсинхронныхЗаданий) всегда должна быть не длиннее, чем МаксимальноеКоличествоАктивныхЗаданий.
	
	
	// !шаг 1 - подготовка данных.
	Если ПорцияДанныхДляОбработки<>Неопределено Тогда
		ПодготовитьПорциюДанныхКОтправке(ПорцияДанныхДляОбработки);
		ПорцияДанныхДляОбработки.Очистить();
	КонецЕсли;
	
	СоздатьАсинхронныеЗаданияОтправки();  // !шаг2
	
	РезультатыОтправки = ПроверитьВыполнениеАсинхронныхЗаданий();  // !шаг3
	
	асинхр_ОбработатьРезультатыВыполненияАсинхронныхЗаданий(РезультатыОтправки);  // !шаг4
	
	Форма_ПрогрессВыполнения().УстановитьНадписиПриОтправкеПакетов(МассивПодготовленныхДанныхДляАсинхронныхЗаданий.Количество(), МассивАктивныхАсинхронныхЗаданий.Количество());
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияАсинхронныхЗадач()
	
	// Проверяем, завершены ли запущенные асинхронные задачи
	// Если завершены, то разблокируем интерфейс
	
	Если МассивПодготовленныхДанныхДляАсинхронныхЗаданий.Количество() = 0 И МассивАктивныхАсинхронныхЗаданий.Количество() = 0 Тогда		
		
		ОтключитьОбработчикОжидания("ОбработчикОжиданияАсинхронныхЗадач");
		ОбновитьСписокЗадач();
		
		ВывестиСообщениеПользователю("Окончание обработки документов: "+ТекущаяДата());
		
		ТекущийРежимАсинхроннойОбработки = Неопределено;
		Возврат;
		
	Иначе
		
		//  Задания еще крутятся - проверим их
		ОбработатьОчередиАсинхронныхЗадач();

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// !шаг 1
Процедура ПодготовитьПорциюДанныхКОтправке(ПорцияДанныхДляОбработки)
	
	Если ТекущийРежимАсинхроннойОбработки = "ОтправкаПакетов" Тогда
		// идем в базу данных, выбираем оттуда данные для асинхронных задач
		МассивРезультатовОбработкиДанных = ПодготовитьПакетыКОтправкеНаСервере(ПорцияДанныхДляОбработки);
		
		Для Каждого ТекРезультат Из МассивРезультатовОбработкиДанных Цикл
			
			Если ЗначениеЗаполнено(ТекРезультат.ТекстОшибки) Тогда
				ВывестиСообщениеПользователю(ТекРезультат.ТекстОшибки);
			Иначе
				МассивПодготовленныхДанныхДляАсинхронныхЗаданий.Добавить(Новый Структура("ДанныеСервер", ТекРезультат.Пакет));
			КонецЕсли;
			
		КонецЦикла;
		
	ИначеЕсли ТекущийРежимАсинхроннойОбработки = "ПодписаниеВходящихДокументов" Тогда
		
		Для Каждого ТекРезультат Из ПодготовитьОтветыКОтправкеНаСервере(ПорцияДанныхДляОбработки) Цикл
			МассивПодготовленныхДанныхДляАсинхронныхЗаданий.Добавить(Новый Структура("ДанныеСервер", ТекРезультат));
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// !шаг 2
Процедура СоздатьАсинхронныеЗаданияОтправки()
	
	// !шаг 2 - отправка подготовленных данных, выполняется на клиенте
	
	//Если есть возможность, то отправляем пакеты в порядке очереди, после чего удаляем их из подготовленных и добавляем в отправленные
	
	КоличествоПакетовДоступныхДляОтправки = Мин(МаксимальноеКоличествоАктивныхЗаданий - МассивАктивныхАсинхронныхЗаданий.Количество(), МассивПодготовленныхДанныхДляАсинхронныхЗаданий.Количество());
	
	Если КоличествоПакетовДоступныхДляОтправки > 0 Тогда				
		
		Для й = 0 По КоличествоПакетовДоступныхДляОтправки-1 Цикл			
			
			СтруктураТекущегоЗадания = МассивПодготовленныхДанныхДляАсинхронныхЗаданий[0];
			
			Если ТекущийРежимАсинхроннойОбработки = "ОтправкаПакетов" Тогда
				
				PackageSendTaskAsyncResult = Модуль_РаботаСКомпонентой().ЭДО_Транспорт_ОтправитьПакетДокументовАсинхронно(СтруктураТекущегоЗадания.ДанныеСервер);
				
				Если ТипЗнч(PackageSendTaskAsyncResult) = Тип("Строка") Тогда
					СтруктураТекущегоЗадания.ДанныеСервер.Вставить("РезультатОтправкиТекст", PackageSendTaskAsyncResult);
					СохранитьПакетНаСервере(СтруктураТекущегоЗадания.ДанныеСервер, "Не отправлен");
				Иначе
					СтруктураТекущегоЗадания.Вставить("ОбъектЗадания", PackageSendTaskAsyncResult);
					МассивАктивныхАсинхронныхЗаданий.Добавить(СтруктураТекущегоЗадания);
				КонецЕсли;
				
			ИначеЕсли ТекущийРежимАсинхроннойОбработки = "ПодписаниеВходящихДокументов" Тогда
				
				//ОбъектЗадания = Модуль_РаботаСКомпонентой().ОтправитьОтветНаДокументАсинхронно();
				ДанныеБазы = СтруктураТекущегоЗадания.ДанныеСервер;
				ОбъектЗадания = Модуль_РаботаСКомпонентой().ОтправитьОтветНаДокументАсинхронно(ДанныеБазы.Идентификаторы, ДанныеБазы.ВидОтвета, ДанныеБазы.СтруктураОтвета);
				
				Если ТипЗнч(ОбъектЗадания) = Тип("Строка") Тогда
					// Возникла ошибка - пока просто пропустим ее
					//СтруктураТекущегоЗадания.ДанныеСервер.Вставить("РезультатОтправкиТекст", PackageSendTaskAsyncResult);
					//СохранитьПакетНаСервере(СтруктураТекущегоЗадания.ДанныеСервер, "Не отправлен");
				Иначе
					СтруктураТекущегоЗадания.Вставить("ОбъектЗадания", ОбъектЗадания);
					МассивАктивныхАсинхронныхЗаданий.Добавить(СтруктураТекущегоЗадания);
				КонецЕсли;
				
			КонецЕсли;
			
			МассивПодготовленныхДанныхДляАсинхронныхЗаданий.Удалить(0);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
// !шаг 3
Функция ПроверитьВыполнениеАсинхронныхЗаданий()
	
	//Проверяем завершение ранее созданных асинхронных заданий, если такие есть, то удаляем их из очереди МассивАктивныхАсинхронныхЗаданий
	
	РезультатыОтправки = Новый Структура("Успешные, Неуспешные", Новый Массив, Новый Массив);
	
	ОбратныйИндекс = МассивАктивныхАсинхронныхЗаданий.ВГраница();
	Пока ОбратныйИндекс > -1 Цикл
		
		ВыполненоУспешно = Неопределено;  // дальше определим: Истина если успешно, Ложь - если упало, оставить Неопределено - если не завершилось.
		ТекущееВыполняемоеЗадание = МассивАктивныхАсинхронныхЗаданий[ОбратныйИндекс];
		
		Если ТекущийРежимАсинхроннойОбработки = "ОтправкаПакетов" Тогда
			
			Если ТекущееВыполняемоеЗадание.ОбъектЗадания.IsCompleted Тогда 
				
				Попытка
					
					РезультатОтправки = ТекущееВыполняемоеЗадание.ОбъектЗадания.Result;
					Модуль_РаботаСКомпонентой().ЭДО_ПроставитьДляОтправленныхДокументовПакетаID(ТекущееВыполняемоеЗадание.ДанныеСервер, РезультатОтправки);
					ВыполненоУспешно = Истина;
					
				Исключение				
					
					ТекстОшибки = "Пакет документов """ + ТекущееВыполняемоеЗадание.ДанныеСервер.Данные1С.ВидПакета + """ ("
						+ ТекущееВыполняемоеЗадание.ДанныеСервер.Данные1С.Документ + ") не отправлен по ошибке:" + Символы.ПС + ОписаниеОшибки();
					
					ТекущееВыполняемоеЗадание.ДанныеСервер.Вставить("РезультатОтправкиТекст", ТекстОшибки);
					ВывестиСообщениеПользователю(ТекстОшибки);
					ВыполненоУспешно = Ложь;
					
				КонецПопытки;
				
			КонецЕсли;
			
		ИначеЕсли ТекущийРежимАсинхроннойОбработки = "ПодписаниеВходящихДокументов" Тогда
			
			Если ТекущееВыполняемоеЗадание.ОбъектЗадания.IsCompleted Тогда 
				
				Попытка
				
					РезультатОтправки = ТекущееВыполняемоеЗадание.ОбъектЗадания.Result;
					ВыполненоУспешно = Истина;
					
				Исключение				
					
					ТекстОшибки = "Документ не подписан по причине:" + Символы.ПС + ОписаниеОшибки();
					ВывестиСообщениеПользователю(ТекстОшибки);
					ВыполненоУспешно = Ложь;
					
				КонецПопытки;
				
			КонецЕсли;
			
		КонецЕсли;
		
		Если ВыполненоУспешно=Истина Тогда
			
			РезультатыОтправки.Успешные.Добавить(ТекущееВыполняемоеЗадание.ДанныеСервер);
			МассивАктивныхАсинхронныхЗаданий.Удалить(ОбратныйИндекс);
			Форма_ПрогрессВыполнения().УвеличитьЗначениеПрогресса();
			
		ИначеЕсли ВыполненоУспешно=Ложь Тогда
			
			РезультатыОтправки.Неуспешные.Добавить(ТекущееВыполняемоеЗадание.ДанныеСервер);
			МассивАктивныхАсинхронныхЗаданий.Удалить(ОбратныйИндекс);
			Форма_ПрогрессВыполнения().УвеличитьЗначениеПрогресса();
			
		КонецЕсли;
		
		ОбратныйИндекс = ОбратныйИндекс - 1;
		
	КонецЦикла;
	
	Возврат РезультатыОтправки;
	
КонецФункции

&НаКлиенте
// !шаг 4
Процедура асинхр_ОбработатьРезультатыВыполненияАсинхронныхЗаданий(РезультатыОтправки)
	
	// !шаг 4 - запись в БД после успешной / неуспешной отправки, клиент
	Если ТекущийРежимАсинхроннойОбработки = "ОтправкаПакетов" Тогда
		
		Если РезультатыОтправки.Успешные.Количество() > 0 Тогда
			СохранитьПакетыНаСервере(РезультатыОтправки.Успешные, "Отправлен");
		КонецЕсли;
		
		Если РезультатыОтправки.Неуспешные.Количество() > 0 Тогда
			СохранитьПакетыНаСервере(РезультатыОтправки.Неуспешные, "Не отправлен");
		КонецЕсли;
		
	ИначеЕсли ТекущийРежимАсинхроннойОбработки = "ПодписаниеВходящихДокументов" Тогда
		
		УстановитьСтатусыДокументовНаСервере(РезультатыОтправки.Успешные);
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПакетыКОтправкеНаСервере(ПорцияДанныхДляОбработки)
	
	// Шаг 1 асинхронных задач: получим исходные данные из базы
	МассивДанныхДляАсинхронныхЗадач = Новый Массив;
	
	Для Каждого СтруктураДанных Из ПорцияДанныхДляОбработки Цикл
		
		РезультатОбработкиДанных = Новый Структура("Пакет, ТекстОшибки");
		
		Попытка	
			
			Пакет = ОбработкаОбъект().СобратьПакетПоСтрокеСписка(СтруктураДанных);
			СохранитьПакетНаСервере(Пакет, "Подготовлен");			
			
			РезультатОбработкиДанных.Пакет = Пакет;
			
		Исключение
			
			ТекстОшибки = ОписаниеОшибки();				
			РезультатОбработкиДанных.ТекстОшибки = "Пакет документов """+СтруктураДанных.ВидПакета+""" ("+СтруктураДанных.Документ+") не отправлен по ошибке:"+Символы.ПС+ТекстОшибки;
						
		КонецПопытки;
		
		МассивДанныхДляАсинхронныхЗадач.Добавить(РезультатОбработкиДанных);
		
	КонецЦикла;
	
	Возврат МассивДанныхДляАсинхронныхЗадач;
	
КонецФункции

&НаСервере
Функция ПодготовитьОтветыКОтправкеНаСервере(ПорцияДанныхДляОбработки)
	
	// Шаг 1 асинхронных задач: получим исходные данные из базы
	МассивДанныхДляАсинхронныхЗадач = Новый Массив;
	
	Для Каждого СтруктураДанных Из ПорцияДанныхДляОбработки Цикл
		
		ДанныеОтправки = ОбработкаОбъект().ЭДО_ПолучитьСохраненныеДанныеДляОтправкиОтвета(СтруктураДанных.ДокументДД, СтруктураДанных.ПакетДД);
		
		Если ЗначениеЗаполнено(ДанныеОтправки) Тогда
			МассивДанныхДляАсинхронныхЗадач.Добавить(ДанныеОтправки);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат МассивДанныхДляАсинхронныхЗадач;
	
КонецФункции

//} асинхронное выполнение задач (подписание, отправка, ...)

&НаКлиенте
Процедура ОбработатьМассивСтрокДляОблачнойПодписи(МассивСтрок) Экспорт 
	
	// шаг 1
	СоответствиеОрганизацийИПакетов = Новый Соответствие;
	МассивРезультатовОбработкиДанных = ПодготовитьПакетыКОтправкеНаСервере(МассивСтрок);		
	Для Каждого ТекРезультат Из МассивРезультатовОбработкиДанных Цикл		
		Если ЗначениеЗаполнено(ТекРезультат.ТекстОшибки) Тогда
			ВывестиСообщениеПользователю(ТекРезультат.ТекстОшибки);
		Иначе
			МассивПакетов = СоответствиеОрганизацийИПакетов.Получить(ТекРезультат.Пакет.Данные1С.Организация);
			Если МассивПакетов = Неопределено Тогда
				МассивПакетов = Новый Массив;
				СоответствиеОрганизацийИПакетов.Вставить(ТекРезультат.Пакет.Данные1С.Организация, МассивПакетов);
			КонецЕсли;
			МассивПакетов.Добавить(Новый Структура("ДанныеСервер", ТекРезультат.Пакет));
		КонецЕсли;
		Форма_ПрогрессВыполнения().УвеличитьЗначениеПрогресса();
	КонецЦикла;
	
	//Форма_ПрогрессВыполнения().фЗакрытьФорму();
	
	// шаг 2
	СоответсвиеОрганизацийИСертификатов = ПолучитьСоответствиеОрганизацийИОблачныхСертификатовНаСервере();	
	Для Каждого КлючЗначение Из СоответствиеОрганизацийИПакетов Цикл
		
		МассивСертификатов = СоответсвиеОрганизацийИСертификатов.Получить(КлючЗначение.Ключ);
		Отпечаток = "";
		КоличествоОблачныхСертификатов = МассивСертификатов.Количество();
		Если КоличествоОблачныхСертификатов = 0 Тогда
			Сообщить("Не найдены облачные сертификаты");
			Возврат;
		ИначеЕсли КоличествоОблачныхСертификатов = 1 Тогда
			Отпечаток = МассивСертификатов[0].ОтпечатокСертификата;
		Иначе
			// тут нужна форма выбора облачного сертификата, которым будем подписывать
		КонецЕсли;
		
		РезультатОтправки = Модуль_РаботаСКомпонентой().ЭДО_Транспорт_ОтправитьМассивПакетовДокументовСОблачнойПодписью(КлючЗначение.Значение, Отпечаток);		
		Если ЗначениеЗаполнено(РезультатОтправки) Тогда
			ВывестиСообщениеПользователю(РезультатОтправки);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОтправкиМассиваПакетовДокументовСОблачнойПодписью(РезультатОтправки) Экспорт
	
	МассивПакетов = Новый Массив;
	Для Каждого СтруктураПакета Из РезультатОтправки Цикл
		
		СтатусПакета = "Отправлен";
		Если СтруктураПакета.DocumentPackage = Неопределено
			 Или ЗначениеЗаполнено(СтруктураПакета.Пакет.РезультатОтправкиТекст) Тогда
			СтатусПакета = "Не отправлен";
		КонецЕсли;
		
		МассивПакетов.Добавить(Новый Структура("Пакет, Статус", СтруктураПакета.Пакет, СтатусПакета));
		Форма_ПрогрессВыполнения().УвеличитьЗначениеПрогресса();
		
	КонецЦикла;
	
	СохранитьМассивПакетовНаСервере(МассивПакетов);
	
	Для Каждого СтруктураПакета Из РезультатОтправки Цикл
		Оповестить("Диадок_ПакетДокументов_Отправка", СтруктураПакета.Пакет);
	КонецЦикла;
	
	ОбновитьСписокЗадач();
	
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСообщениеПользователю(Текст, Данные=Неопределено, ФормаВывода=Неопределено)
	
	Сообщение = Новый СообщениеПользователю;
	Сообщение.ИдентификаторНазначения = ?(ФормаВывода=Неопределено, ЭтаФорма, ФормаВывода).УникальныйИдентификатор;
	Сообщение.Текст = Текст;	
	
	Сообщение.Сообщить();	
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруДанныхСтрокиСпискаСтрокойНаСервере()
	
	Возврат ОбработкаОбъект().ЭДО_Модуль_СтруктураДанныхСтрокиСпискаСтрокой();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизитаНаСервереБезКонтекста(СсылкаНаОбъект, ИмяРеквизита) Экспорт
	
	Если ТипЗнч(ИмяРеквизита) = Тип("Строка") Тогда	
		
		Возврат СсылкаНаОбъект[ИмяРеквизита];
		
	ИначеЕсли ТипЗнч(ИмяРеквизита) = Тип("Структура") Тогда	
		
		СтруктураРезультат = Новый Структура;
		
		Для Каждого ТекЭлемент Из ИмяРеквизита Цикл
			СтруктураРезультат.Вставить(ТекЭлемент.Ключ, СсылкаНаОбъект[ТекЭлемент.Ключ]);
		КонецЦикла;
		
		Возврат СтруктураРезультат;
		
	Иначе
		Возврат Неопределено;
	КонецЕсли;
		
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизитаТабличнойЧастиНаСервереБезКонтекста(СсылкаНаОбъект, ИмяТабличнойЧасти, НомерСтроки, ИмяРеквизита) Экспорт
	
	Результат = Неопределено;
	Выполнить("Результат = СсылкаНаОбъект[ИмяТабличнойЧасти][НомерСтроки]."+ИмяРеквизита);
	
	Возврат Результат;
		
КонецФункции

&НаСервере
Функция ПолучитьСоответствиеОрганизацийИОблачныхСертификатовНаСервере()
	
	Возврат ОбработкаОбъект().ЭДО_ПолучитьСоответствиеОрганизацийИОблачныхСертификатов();
	
КонецФункции

МаксимальноеКоличествоАктивныхЗаданий = 10;
МассивПодготовленныхДанныхДляАсинхронныхЗаданий = Новый Массив;
МассивАктивныхАсинхронныхЗаданий   = Новый Массив;