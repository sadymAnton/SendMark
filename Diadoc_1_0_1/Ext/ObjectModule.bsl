Перем Кэш Экспорт;// Соответствие; для обнуления будем вызывать "Кэш = Неопределено".
Перем СоответствиеТокеновBoxID Экспорт;

//******************************************
//{		ОБЩИЕ ФУНКЦИИ 1С-ЭДО
//
Функция ЭДО_Использовать1СЭДО() Экспорт
	
	Результат = ЭДО_Кэш_Прочитать("Использовать1СЭДО");
	
	Если Результат = Неопределено Тогда
				
		Попытка			
			
			СтруктураСвойств = ЭДО_ПрочитатьЗначенияСвойств1СЭДО(, "Использовать1СЭДО");
			
			Если СтруктураСвойств.Свойство("Использовать1СЭДО") Тогда
				Результат = СтруктураСвойств.Использовать1СЭДО;
			Иначе
				Результат = Ложь;
			КонецЕсли;
			
		Исключение
			Результат = Ложь;
		КонецПопытки;
		
		ЭДО_Кэш_Поместить("Использовать1СЭДО",Результат);
		
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

Функция ЭДО_IDОператора1СЭДО()
	
	//в запросах происходит сравнение с этим ID, его длина 15 символов!
	Возврат "Контур - Диадок";
	
КонецФункции

Процедура ЭДО_ПоместитьДанныеДокументаВХранилищеЗначения1СЭДО(ЭДПрисоединенныйФайлОбъект, СтруктураДанныхПакета, СтруктураДанныхДокумента)
	
	//Делаем архив ID и другой важной информации на случай критичного изменения метаданных в 1С-ЭДО
	
	СтруктураДанных = Новый Структура();
	СтруктураДанных.Вставить("Пакет_Данные1С", СтруктураДанныхПакета.Данные1С);
	СтруктураДанных.Вставить("Пакет_ДанныеДД", СтруктураДанныхПакета.ДанныеДД);
	СтруктураДанных.Вставить("ДокументПакета", СтруктураДанныхДокумента);
	
	Сжатие = Новый СжатиеДанных(9);
	ДанныеВХранилищеЗначений = Новый ХранилищеЗначения(СтруктураДанных, Сжатие);
	
	ЭДПрисоединенныйФайлОбъект.ФайлХранилище = ДанныеВХранилищеЗначений;
	
КонецПроцедуры

Функция ЭДО_ИмяПланаВидовХарактеристикДополнительныхСвойств()
	
	Если Метаданные.ПланыВидовХарактеристик.Найти("СвойстваОбъектов") <> Неопределено Тогда
		Возврат "СвойстваОбъектов";
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Найти("ДополнительныеРеквизитыИСведения") <> Неопределено Тогда
		Возврат "ДополнительныеРеквизитыИСведения";
	Иначе
		Возврат "НЕ_НАЙДЕН_ПВХ_ДОПОЛНИТЕЛЬНЫХ_СВОЙСТВ";
	КонецЕсли;
	
КонецФункции

Функция ЭДО_ИмяРегистраСведенийЗначенийДополнительныхСвойств()
	
	Если Метаданные.РегистрыСведений.Найти("ЗначенияСвойствОбъектов") <> Неопределено Тогда
		Возврат "ЗначенияСвойствОбъектов";
	ИначеЕсли Метаданные.РегистрыСведений.Найти("ДополнительныеСведения") <> Неопределено Тогда
		Возврат "ДополнительныеСведения";
	Иначе
		Возврат "НЕ_НАЙДЕН_РЕГИСТР_ЗНАЧЕНИЙ_ДОПОЛНИТЕЛЬНЫХ_СВОЙСТВ";
	КонецЕсли;
	
КонецФункции

Процедура ЭДО_УстановитьЗначениеСвойства1СЭДО(НаименованиеСвойства, Значение, ОбъектСсылка=Неопределено, НазначениеСвойстваСтрокой="") Экспорт
	
	Если ПустаяСтрока(НаименованиеСвойства) Тогда
		Возврат;
	КонецЕсли;
	
	Свойство = ПланыВидовХарактеристик[ЭДО_ИмяПланаВидовХарактеристикДополнительныхСвойств()].НайтиПоНаименованию("DiadocPro_"+НаименованиеСвойства, Истина);
	
	Если НЕ ЗначениеЗаполнено(Свойство) Тогда
		Свойство = ЭДО_СоздатьСвойство1СЭДО(НаименованиеСвойства, НазначениеСвойстваСтрокой);		
	КонецЕсли;
	
	Запись = РегистрыСведений[ЭДО_ИмяРегистраСведенийЗначенийДополнительныхСвойств()].СоздатьМенеджерЗаписи();
		
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		Запись.Объект = ОбъектСсылка;
	Иначе
		
		ОбъектОбщихНастроек = Неопределено;
		
		Если ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.Валюты") Тогда
			ОбъектОбщихНастроек = Справочники.Валюты.НайтиПоКоду("643");
		КонецЕсли;
		
		Если ОбъектОбщихНастроек <> Неопределено Тогда
			Запись.Объект = ОбъектОбщихНастроек;
		Иначе
			ВызватьИсключение "Для режима 1С-ЭДО отсутствует объект хранения общих настроек!";
		КонецЕсли;
		
	КонецЕсли;
	
	Запись.Свойство = Свойство;
	Запись.Значение = Значение;
	
	Запись.Записать();
	
КонецПроцедуры

Функция ЭДО_СоздатьСвойство1СЭДО(Наименование, НазначениеСвойстваСтрокой)
	
	СвойствоОбъект = ПланыВидовХарактеристик[ЭДО_ИмяПланаВидовХарактеристикДополнительныхСвойств()].СоздатьЭлемент();
	
	СвойствоОбъект.Наименование = "DiadocPro_"+Наименование;
	СвойствоОбъект.ТипЗначения = Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(50));	
	СвойствоОбъект.УстановитьНовыйКод();
	
	СвойствоОбъект.ОбменДанными.Загрузка = Истина;
	СвойствоОбъект.Записать();
	
	Возврат СвойствоОбъект.Ссылка;
	
КонецФункции

Функция ЭДО_ПрочитатьЗначенияСвойств1СЭДО(ОбъектСсылка=Неопределено, НаименованиеСвойства="") Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ЗначенияСвойствОбъектов.Объект,
	|	ЗначенияСвойствОбъектов.Свойство.Наименование КАК ИмяСвойства,
	|	ЗначенияСвойствОбъектов.Значение КАК ЗначениеСвойства
	|ИЗ
	|	РегистрСведений."+ЭДО_ИмяРегистраСведенийЗначенийДополнительныхСвойств()+" КАК ЗначенияСвойствОбъектов
	|ГДЕ
	|	&ДополнительноеУсловие");
	
	Если ЗначениеЗаполнено(НаименованиеСвойства) Тогда
		
		Свойство = ПланыВидовХарактеристик[ЭДО_ИмяПланаВидовХарактеристикДополнительныхСвойств()].НайтиПоНаименованию("DiadocPro_"+НаименованиеСвойства, Истина);				
		Запрос.УстановитьПараметр("Свойство", Свойство);
		ТекстДополнительногоУсловия = "ЗначенияСвойствОбъектов.Свойство = &Свойство";		
				
	Иначе
		
		ЗапросПоСвойствам = Новый Запрос(
		"ВЫБРАТЬ
		|	СвойстваОбъектов.Ссылка
		|ИЗ
		|	ПланВидовХарактеристик."+ЭДО_ИмяПланаВидовХарактеристикДополнительныхСвойств()+" КАК СвойстваОбъектов
		|ГДЕ
		|	СвойстваОбъектов.Наименование ПОДОБНО ""DiadocPro_%""");
		
		Запрос.УстановитьПараметр("МассивСвойств", ЗапросПоСвойствам.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
		ТекстДополнительногоУсловия = "ЗначенияСвойствОбъектов.Свойство В (&МассивСвойств)";
	
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ОбъектСсылка) Тогда
		ТекстДополнительногоУсловия = "ЗначенияСвойствОбъектов.Объект = &ОбъектСсылка И " + ТекстДополнительногоУсловия;
		Запрос.УстановитьПараметр("ОбъектСсылка", ОбъектСсылка);
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ДополнительноеУсловие", ТекстДополнительногоУсловия);
	
	РезультатТЗ = Запрос.Выполнить().Выгрузить();
	РезультатСтруктура = Новый Структура;
	
	Для Каждого СтрокаТЗ Из РезультатТЗ Цикл		
		РезультатСтруктура.Вставить(СтрЗаменить(СтрокаТЗ.ИмяСвойства, "DiadocPro_", ""), СтрокаТЗ.ЗначениеСвойства);		
	КонецЦикла;
	
	Возврат РезультатСтруктура;
	
КонецФункции

Функция ЭДО_ПолучитьДляОрганизацииПрофильНастроекЭДО(Организация) Экспорт
	
	Если ТипЗнч(Организация) <> Тип("СправочникСсылка.Организации") Тогда
		Возврат Организация;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ПрофилиНастроекЭДО.Ссылка
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|ГДЕ
	|	НЕ ПрофилиНастроекЭДО.ПометкаУдаления
	|	И (ВЫРАЗИТЬ(ПрофилиНастроекЭДО.ОператорЭДО КАК СТРОКА(15))) = &IDОператора1СЭДО
	|	И ПрофилиНастроекЭДО.Организация = &Организация");
	
	Запрос.УстановитьПараметр("Организация", Организация);				
	Запрос.УстановитьПараметр("IDОператора1СЭДО", ЭДО_IDОператора1СЭДО());				
	
	Возврат ЭДО_Служебные_ПолучитьРезультатЗапроса(Запрос);
		
КонецФункции

Функция ПолучитьСтатусПакета_1СЭДО(Статус)
	
	Если Статус = "Подготовлен" Тогда
		Возврат Перечисления.СтатусыПакетовЭД.ПодготовленКОтправке;
	ИначеЕсли Статус = "Переотправлен" Тогда
		Возврат Перечисления.СтатусыПакетовЭД.ПустаяСсылка();	
	ИначеЕсли Статус = "Отправлен" Тогда
		Возврат Перечисления.СтатусыПакетовЭД.Отправлен;
	ИначеЕсли Статус = "Не отправлен" Тогда
		Возврат Перечисления.СтатусыПакетовЭД.Неизвестный;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтатусДокумента_1СЭДО(Статус)
	
	Если Статус = "Подготовлен" Тогда
		Возврат Перечисления.СтатусыЭД.ПодготовленКОтправке;
	ИначеЕсли Статус = "Переотправлен" Тогда
		Возврат Перечисления.СтатусыЭД.ПустаяСсылка();
	ИначеЕсли Статус = "Отправлен" Тогда
		Возврат Перечисления.СтатусыЭД.Отправлен;
	ИначеЕсли Статус = "Не отправлен" Тогда
		Возврат Перечисления.СтатусыЭД.ОшибкаПередачи;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ПолучитьСтатусКонтрагента_1СЭДО(Статус)
	
	Если Статус = "IsMyCounteragent" Тогда
		Возврат Перечисления.СтатусыУчастниковОбменаЭД.Присоединен;
	ИначеЕсли Статус = "InvitesMe" Тогда
		Возврат Перечисления.СтатусыУчастниковОбменаЭД.ТребуетсяСогласие;
	ИначеЕсли Статус = "IsInvitedByMe" Тогда
		Возврат Перечисления.СтатусыУчастниковОбменаЭД.ОжидаемСогласия;
	ИначеЕсли Статус = "Rejected" Тогда
		Возврат Перечисления.СтатусыУчастниковОбменаЭД.Отсоединен;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Функция ТипОбъекта_ПакетДокументов()
	
	Если ЭДО_Использовать1СЭДО() Тогда
		Возврат "ДокументСсылка.ПакетЭД";
	Иначе
		Возврат "СправочникСсылка.Диадок_ПакетыДокументов";
	КонецЕсли;
	
КонецФункции

Функция СтрокаЗаданнойДлины(Длина, Символ=" ")
	
	Результат = "";
	
	Для й = 1 По Длина Цикл
		Результат = Результат + Символ;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

//}		ОБЩИЕ ФУНКЦИИ 1С-ЭДО


//******************************************
//{		ПАКЕТЫ ДОКУМЕНТОВ
//

Функция ЭДО_ПакетДокументовМенеджер_СоздатьНовый() Экспорт
	
	// Пакет будет Структурой с общими полями в шапке и массивом прикрепленных документов
	
	Результат = Новый Структура;
	
	// Ссылка - имеется в виду ссылка на сам Пакет в справочнике
	Свойства1С = 
	
		"Организация,
		|Контрагент,
		|ПодразделениеОрганизации,
		|ПодразделениеКонтрагента,
		|ЭтоВнутреннийДокумент,
		|Ссылка,
		|ВидПакета,
		|ВидПакетаID,
		|Документ,
		|НомерДокумента,
		|ДатаДокумента,
		|СуммаДокумента,
		|ПереотправляемыйПакетСсылка";
	
		
	Результат.Вставить("Данные1С",	Новый Структура(Свойства1С));
	Результат.Вставить("Документы",	Новый Массив);
	
	Возврат Результат;
	
КонецФункции

// Создаем в Пакете свойства "FromBoxId,ToBoxId,FromDepartmentId,ToDepartmentId " и т.д. для передачи на сервер
Процедура ЭДО_ПакетДокументов_ПодготовитьСвойстваДляОтправки_Компонента(Пакет) Экспорт
	
	СвойстваДД = "OrganizationId,CounterAgentId,FromDepartmentId,ToDepartmentId,IsDraft,IsInternal,LockPackage,DelaySend";
	// Полный список свойств: http://1c-docs.diadoc.ru/ru/latest/PackageSendTask.html
	
	Пакет.Вставить("ДанныеДД", Новый Структура(СвойстваДД));
		
	Если ЭДО_Использовать1СЭДО() Тогда
		СтруктураДанныхДД = ПолучитьПоСвязанномуЭлементуСправочникаДанныеДД_1СЭДО(Пакет.Данные1С.Организация);
		Пакет.Данные1С.Вставить("ПрофильНастроекЭДО", СтруктураДанныхДД.Ссылка);
	Иначе	
		СтруктураДанныхДД = ПолучитьПоСвязанномуЭлементуСправочникаДанныеДД(Пакет.Данные1С.Организация);
	КонецЕсли;	
		
	Пакет.ДанныеДД.OrganizationId 	= СтруктураДанныхДД.ID;
	Пакет.ДанныеДД.FromDepartmentId = СтруктураДанныхДД.ID_ОсновноеПодразделение;
	
	// Для внутренних документов ToBoxId не указывается.
	Если НЕ Пакет.Данные1С.ЭтоВнутреннийДокумент = Истина Тогда
			
		Если ЭДО_Использовать1СЭДО() Тогда
			СтруктураДанныхДД = ПолучитьПоСвязанномуЭлементуСправочникаДанныеДД_1СЭДО(Пакет.Данные1С.Контрагент, Пакет.Данные1С.Организация);
			Пакет.Данные1С.Вставить("СоглашениеОбИспользованииЭДО", СтруктураДанныхДД.Ссылка);
		Иначе
			СтруктураДанныхДД = ПолучитьПоСвязанномуЭлементуСправочникаДанныеДД(Пакет.Данные1С.Контрагент);
		КонецЕсли;
		
		Пакет.ДанныеДД.CounterAgentId = СтруктураДанныхДД.ID;
		Пакет.ДанныеДД.ToDepartmentId = СтруктураДанныхДД.ID_ОсновноеПодразделение;
		
	КонецЕсли;
	
	// Здесь можно переопределить любые свойства
	ЭДО_ПодключаемыйМодуль_ОбработатьСобытие("ПослеПодготовкиПакета",Новый Структура("Пакет",Пакет));
	
КонецПроцедуры

Функция ПолучитьПоСвязанномуЭлементуСправочникаДанныеДД(ЮрФизЛицо)
	
	Результат = Новый Структура("ID, ID_ОсновноеПодразделение");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Диадок_ЮрФизЛица.ID,
	|	Диадок_ЮрФизЛица.ID_ОсновноеПодразделение
	|ИЗ
	|	Справочник.Диадок_ЮрФизЛица КАК Диадок_ЮрФизЛица
	|ГДЕ
	|	Диадок_ЮрФизЛица.СвязанныйСправочник1 = &СвязанныйСправочник1"
	);
	
	Запрос.УстановитьПараметр("СвязанныйСправочник1",ЮрФизЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();			
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПоСвязанномуЭлементуСправочникаДанныеДД_1СЭДО(ЮрФизЛицо, Организация=Неопределено)
	
	Результат = Новый Структура("ID, ID_ОсновноеПодразделение, Ссылка");
	
	Запрос = Новый Запрос;
	
	Если ТипЗнч(ЮрФизЛицо) = Тип(ЭДО_Модуль_ТипЗначенияОбъекта("Контрагенты")) Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СоглашенияОбИспользованииЭД.Ссылка,
		|	СоглашенияОбИспользованииЭД.ИдентификаторКонтрагента КАК ID,
		|	"""" КАК ID_ОсновноеПодразделение
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
		|ГДЕ
		|	НЕ СоглашенияОбИспользованииЭД.ПометкаУдаления
		|	И СоглашенияОбИспользованииЭД.Контрагент = &ЮрФизЛицо
		|	И СоглашенияОбИспользованииЭД.ПрофильНастроекЭДО.Организация = &Организация";	
		
		Запрос.УстановитьПараметр("Организация", Организация);
		
	ИначеЕсли ТипЗнч(ЮрФизЛицо) = Тип(ЭДО_Модуль_ТипЗначенияОбъекта("Организации")) Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПрофилиНастроекЭДО.Ссылка,
		|	ПрофилиНастроекЭДО.ИдентификаторОрганизации КАК ID,
		|	"""" КАК ID_ОсновноеПодразделение
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
		|ГДЕ
		|	НЕ ПрофилиНастроекЭДО.ПометкаУдаления
		|	И (ВЫРАЗИТЬ(ПрофилиНастроекЭДО.ОператорЭДО КАК СТРОКА(15))) = &IDОператора1СЭДО
		|	И ПрофилиНастроекЭДО.Организация = &ЮрФизЛицо";	
		
		Запрос.УстановитьПараметр("IDОператора1СЭДО", ЭДО_IDОператора1СЭДО());
	Иначе	
		Возврат Неопределено;
	КонецЕсли;	
		
	Запрос.УстановитьПараметр("ЮрФизЛицо", ЮрФизЛицо);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();			
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		СтруктураСвойств = ЭДО_ПрочитатьЗначенияСвойств1СЭДО(Результат.Ссылка, "ID_ОсновноеПодразделение");
		СтруктураСвойств.Свойство("ID_ОсновноеПодразделение", Результат.ID_ОсновноеПодразделение);
	КонецЕсли;	
	
	Возврат Результат;
	
КонецФункции

Функция ЭДО_ПакетДокументов_КонвертироватьЮрФизЛицоВДД(ЮрФизЛицо)
	
	// TODO здесь не учитывается имя справочника. И тип ЮрФизЛицо тоже.
	// Пока никаких проверок, связок с подразделением и т.д.
	// Но уже пора.
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	Диадок_ЮрФизЛица.ID
	|ИЗ
	|	Справочник.Диадок_ЮрФизЛица КАК Диадок_ЮрФизЛица
	|ГДЕ
	|	Диадок_ЮрФизЛица.СвязанныйСправочник1 = &СвязанныйСправочник1"
	);
	Запрос.УстановитьПараметр("СвязанныйСправочник1",ЮрФизЛицо);
	
	Возврат ЭДО_Служебные_ПолучитьРезультатЗапроса(Запрос, "ID");
	
КонецФункции	

Функция ЭДО_ПолучитьДанныеСуществующегоДокументаПакета(ПакетСсылка, ДокументСсылка, ВидДокументаРазвернутый) Экспорт
	
	Если ЭДО_Использовать1СЭДО() Тогда
		Возврат ЭДО_ПолучитьДанныеСуществующегоДокументаПакета_1СЭДО(ПакетСсылка, ДокументСсылка, ВидДокументаРазвернутый);		
	КонецЕсли;
	
	Результат = Новый Структура("Ссылка, Статус, Метка");
			
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Диадок_Документы.Ссылка,
	|	Диадок_Документы.Метка,
	|	Диадок_Документы.Статус
	|ИЗ
	|	Справочник.Диадок_Документы КАК Диадок_Документы
	|ГДЕ
	|	Диадок_Документы.Документ = &Документ
	|	И Диадок_Документы.Пакет = &Пакет
	|	И Диадок_Документы.ВидДокумента = &ВидДокумента
	|	И НЕ Диадок_Документы.ПометкаУдаления"
	);
	
	Запрос.УстановитьПараметр("Пакет", ПакетСсылка);
	Запрос.УстановитьПараметр("Документ", ДокументСсылка);
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокументаРазвернутый.Ссылка);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда			
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();			
		ЗаполнитьЗначенияСвойств(Результат, Выборка);			
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ЭДО_ПолучитьДанныеСуществующегоДокументаПакета_1СЭДО(ПакетСсылка, ДокументСсылка, ВидДокументаРазвернутый) Экспорт
	
	Результат = Новый Структура("Ссылка, Статус, Метка");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент КАК Ссылка,
	|	ПакетЭДЭлектронныеДокументы.Ссылка.СтатусПакета КАК Метка,
	|	ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент.СтатусЭД КАК Статус
	|ИЗ
	|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ПакетЭДЭлектронныеДокументы
	|ГДЕ
	|	ПакетЭДЭлектронныеДокументы.Ссылка = &Пакет
	|	И ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент.ВладелецФайла = &Документ
	|	И ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент.НомерЭД = &ВидДокумента
	|	И НЕ ПакетЭДЭлектронныеДокументы.ЭлектронныйДокумент.ПометкаУдаления"
	);
	
	Запрос.УстановитьПараметр("Пакет", ПакетСсылка);
	Запрос.УстановитьПараметр("Документ", ДокументСсылка);
	Запрос.УстановитьПараметр("ВидДокумента", ВидДокументаРазвернутый.ID);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда			
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();			
		ЗаполнитьЗначенияСвойств(Результат, Выборка);			
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Процедура ЭДО_Хранение_СохранитьПакетДокументов(Пакет,Статус) Экспорт
	
	Если ЭДО_Использовать1СЭДО() Тогда
		ЭДО_Хранение_СохранитьПакетДокументов_1СЭДО(Пакет, Статус);
		Возврат;
	КонецЕсли;
	
	// Описание структуры Пакет лежит в ЭДО_ПакетДокументовМенеджер_СоздатьНовый 
	// (речь о тех полях, которые необходимы для построения списков и идентификации сообщений)
	
	НачатьТранзакцию();
	
	Попытка
		
		мДатаОтправки = ТекущаяДата();
		
		// Если переотправляем уже существующий пакет, то пометим его "Переотправлен" и создадим новый.
		// Эти действия выполняем только на этапе подготовки пакета к отправке
		Если ТипЗнч(Пакет.Данные1С.ПереотправляемыйПакетСсылка) = Тип(ТипОбъекта_ПакетДокументов())
			И ЗначениеЗаполнено(Пакет.Данные1С.ПереотправляемыйПакетСсылка)
			И Статус = "Подготовлен" Тогда
						
			Для Каждого ДокументПакета Из Пакет.Документы Цикл				
				Если ДокументПакета.ПереотправляемыйДокументСсылка <> Неопределено Тогда
					
					Если ДокументПакета.ПереотправляемыйДокументСсылка.Метка = "Переотправлен" Тогда
						ВызватьИсключение "В пакете """ + Пакет.Данные1С.ВидПакета + """ по документу " + Пакет.Данные1С.Документ + " """ + ДокументПакета.Вид + """ уже был переотправлен.";						
					КонецЕсли;
					
					ПереотправляемыйДокументОбъект = ДокументПакета.ПереотправляемыйДокументСсылка.ПолучитьОбъект();
					ПереотправляемыйДокументОбъект.Метка = "Переотправлен";
					ПереотправляемыйДокументОбъект.Записать();
					
				КонецЕсли;					
			КонецЦикла;
			
			Если Пакет.Данные1С.ПереотправляемыйПакетСсылка.Метка <> "Переотправлен" Тогда
				ПредыдущийОбъектПакета= Пакет.Данные1С.ПереотправляемыйПакетСсылка.ПолучитьОбъект();
				ПредыдущийОбъектПакета.Метка= "Переотправлен";
				ПредыдущийОбъектПакета.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
		Если Пакет.Данные1С.Ссылка = Неопределено Тогда
			ОбъектПакета= Справочники.Диадок_ПакетыДокументов.СоздатьЭлемент();
		Иначе	
			ОбъектПакета= Пакет.Данные1С.Ссылка.ПолучитьОбъект();
			//ВызватьИсключение "Режим не предусмотрен";
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОбъектПакета, Пакет.Данные1С, "Документ,ВидПакета,НомерДокумента,ДатаДокумента,Организация,Контрагент,СуммаДокумента");
		ОбъектПакета.ЗаблокированныйПакет = Пакет.ДанныеДД.LockPackage;
		
		Соответствия= СсылкиНаСоответствияДляМаршрутизации(Пакет);
		ОбъектПакета.КонтрагентДиадок	= Соответствия.Получатель;
		ОбъектПакета.ОрганизацияДиадок	= Соответствия.Отправитель;
		
		ОбъектПакета.Метка				= Статус;
		ОбъектПакета.Направление		= "Исходящее";
		ОбъектПакета.ДатаЗагрузки		= мДатаОтправки;
					
		//Если есть информация об ошибках, то такой пакет требуется потом отправлять повторно
		Если Пакет.Свойство("РезультатОтправкиТекст") Тогда
			
			Если ЗначениеЗаполнено(Пакет.РезультатОтправкиТекст) Тогда
				ОбъектПакета.Метка = "Не отправлен";
			КонецЕсли;
			
			ЭДО_СправочникМенеджер_УстановитьЗначениеДопРеквизита(ОбъектПакета, "ДатаОтправки",				мДатаОтправки);
			ЭДО_СправочникМенеджер_УстановитьЗначениеДопРеквизита(ОбъектПакета, "ОписаниеОшибкиХранилище",	Пакет.РезультатОтправкиТекст, Пакет.РезультатОтправкиТекст);
			// TODO это тоже можно выкинуть в шапку
			
		КонецЕсли;		
		
		ОбъектПакета.Записать();
		Пакет.Данные1С.Вставить("Ссылка",ОбъектПакета.Ссылка);
				
		Для Каждого СтрокаСостава Из Пакет.Документы Цикл
			
			Если СтрокаСостава.Ссылка = Неопределено Тогда
				ОбъектДокумента= Справочники.Диадок_Документы.СоздатьЭлемент();
			Иначе
				ОбъектДокумента= СтрокаСостава.Ссылка.ПолучитьОбъект();
			КонецЕсли;
			
			ОбъектДокумента.ДатаЗагрузки				= мДатаОтправки;
			ОбъектДокумента.ТипДокумента				= СтрокаСостава.Тип;
			ОбъектДокумента.ВидДокумента				= СтрокаСостава.Вид;
			ОбъектДокумента.Документ					= СтрокаСостава.Документ1С;
			ОбъектДокумента.Направление					= "Исходящее";
			ОбъектДокумента.ТребуетсяОбработка			= Истина;
			ОбъектДокумента.Метка						= ОбъектПакета.Метка;
			
			ОбъектДокумента.КонтрагентДиадок			= ОбъектПакета.КонтрагентДиадок;
			ОбъектДокумента.ОрганизацияДиадок			= ОбъектПакета.ОрганизацияДиадок;
			
			ОбъектДокумента.DocumentID					= СтрокаСостава.DD_API_DocumentID;
			ОбъектДокумента.LetterID					= СтрокаСостава.DD_API_LetterID;
			Если ЗначениеЗаполнено(СтрокаСостава.DD_API_BoxID) Тогда
				ОбъектДокумента.BoxID						= ЭДО_Служебные_КаноническийГуид(СтрокаСостава.DD_API_BoxID);
			КонецЕсли;
			ОбъектДокумента.DepartmentId				= Пакет.ДанныеДД.FromDepartmentId;
			
			ОбъектДокумента.Пакет						= ОбъектПакета.Ссылка;
			ЗаполнитьЗначенияСвойств(ОбъектДокумента,Пакет.Данные1С,"НомерДокумента,ДатаДокумента,Организация,Контрагент,СуммаДокумента");
			
			ОбъектДокумента.Записать();
			СтрокаСостава.Ссылка = ОбъектДокумента.Ссылка;
			
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		_Ошибка = ОписаниеОшибки();
		ОтменитьТранзакцию();
		
		// Сбросим ссылки, раз транзакция отменилась.
		Пакет.Данные1С.Ссылка= Неопределено;
		Для каждого СтрокаПакета Из Пакет.Документы Цикл
			СтрокаПакета.Ссылка= Неопределено;
		КонецЦикла;
		
		ВызватьИсключение(_Ошибка);
		
	КонецПопытки;
	
	Если Статус = "Отправлен" Тогда
		
		// Выходы в подключаемый модуль для возможности установить какие-то статусы/пометки по отправленным документам, например.
		
		ЭДО_ПодключаемыйМодуль_ОбработатьСобытие("ПослеОтправкиПакета", 
				Новый Структура("Пакет, ОтложеннаяОтправка", Пакет, (Пакет.ДанныеДД.DelaySend = Истина)));
				
		// Если Пакет.ДанныеДД.DelaySend = Истина , значит, документ находится в "Исходящих" и фактически еще не отправлен контрагенту.
		// Возможно, его отправят позже из веб-интерфейса.
		// В этом случае необходимо ориентироваться на событие "ПослеУстановкиСтатусаДокумента"
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЭДО_Хранение_СохранитьПакетДокументов_1СЭДО(Пакет, Статус) Экспорт
	
	// Описание структуры Пакет лежит в ЭДО_ПакетДокументовМенеджер_СоздатьНовый 
	// (речь о тех полях, которые необходимы для построения списков и идентификации сообщений)
	
	НачатьТранзакцию();
	
	Попытка
		
		// Если переотправляем уже существующий пакет, то пометим его "Переотправлен" и создадим новый.
		// Эти действия выполняем только на этапе подготовки пакета к отправке		
		Если ЗначениеЗаполнено(Пакет.Данные1С.ПереотправляемыйПакетСсылка) И Статус = "Подготовлен" Тогда			
			
			Для Каждого ДокументПакета Из Пакет.Документы Цикл				
				Если ДокументПакета.ПереотправляемыйДокументСсылка <> Неопределено Тогда
					
					Если ДокументПакета.ПереотправляемыйДокументСсылка.СтатусЭД = ПолучитьСтатусДокумента_1СЭДО("Переотправлен") Тогда
						ВызватьИсключение "В пакете """ + Пакет.Данные1С.ВидПакета + """ по документу " + Пакет.Данные1С.Документ + " """ + ДокументПакета.Вид.Наименование + """ уже был переотправлен.";						
					КонецЕсли;
					
					ПереотправляемыйДокументОбъект = ДокументПакета.ПереотправляемыйДокументСсылка.ПолучитьОбъект();
					ПереотправляемыйДокументОбъект.СтатусЭД = ПолучитьСтатусДокумента_1СЭДО("Переотправлен");
					ПереотправляемыйДокументОбъект.ОбменДанными.Загрузка = Истина;
					ПереотправляемыйДокументОбъект.Записать();
					
				КонецЕсли;					
			КонецЦикла;
			
			Если Пакет.Данные1С.ПереотправляемыйПакетСсылка.СтатусПакета <> ПолучитьСтатусПакета_1СЭДО("Переотправлен") Тогда
				ПредыдущийОбъектПакета= Пакет.Данные1С.ПереотправляемыйПакетСсылка.ПолучитьОбъект();
				ПредыдущийОбъектПакета.СтатусПакета = ПолучитьСтатусПакета_1СЭДО("Переотправлен");
				ПредыдущийОбъектПакета.ОбменДанными.Загрузка = Истина;
				ПредыдущийОбъектПакета.Записать();
			КонецЕсли;
			
		КонецЕсли;
		
		
		Если Пакет.Данные1С.Ссылка = Неопределено Тогда			
			
			ОбъектПакета= Документы.ПакетЭД.СоздатьДокумент();
			ОбъектПакета.УстановитьНовыйНомер();			
			
			ОбъектПакета.Дата 		  		= ТекущаяДата();
			ОбъектПакета.Направление  		= Перечисления.НаправленияЭД.Исходящий;
			ОбъектПакета.ПрофильНастроекЭДО = Пакет.Данные1С.ПрофильНастроекЭДО;
			ОбъектПакета.НастройкаЭДО		= Пакет.Данные1С.СоглашениеОбИспользованииЭДО;
						
		Иначе	
			ОбъектПакета= Пакет.Данные1С.Ссылка.ПолучитьОбъект();			
		КонецЕсли;
		
		//Если есть информация об ошибках, то такой пакет требуется потом отправлять повторно
		Если Пакет.Свойство("РезультатОтправкиТекст") Тогда			
			Если ЗначениеЗаполнено(Пакет.РезультатОтправкиТекст) Тогда
				Статус = "Не отправлен";				
			КонецЕсли;			
			ОбъектПакета.Комментарий = Пакет.РезультатОтправкиТекст;		
		КонецЕсли;
		
		DD_API_LetterID = "";
		
		Для Каждого СтрокаСостава Из Пакет.Документы Цикл
			
			Если СтрокаСостава.Ссылка = Неопределено Тогда
				
				ОбъектДокумента= Справочники.ЭДПрисоединенныеФайлы.СоздатьЭлемент();
				
				ОбъектДокумента.Наименование				= СтрокаСостава.Заголовок;
				ОбъектДокумента.НомерЭД						= СтрокаСостава.ВидID;
				ОбъектДокумента.ВладелецФайла				= СтрокаСостава.Документ1С;							
				ОбъектДокумента.НаправлениеЭД				= Перечисления.НаправленияЭД.Исходящий;
								
			Иначе
				ОбъектДокумента= СтрокаСостава.Ссылка.ПолучитьОбъект();
			КонецЕсли;			
			
			ОбъектДокумента.УникальныйИДВнешний 	= СтрокаСостава.DD_API_LetterID;
			ОбъектДокумента.УникальныйИД 			= СтрокаСостава.DD_API_DocumentID;
			ОбъектДокумента.СтатусЭД 				= ПолучитьСтатусДокумента_1СЭДО(Статус);
			
			ЭДО_ПоместитьДанныеДокументаВХранилищеЗначения1СЭДО(ОбъектДокумента, Пакет, СтрокаСостава);
			
			ОбъектДокумента.ОбменДанными.Загрузка 	= Истина;
			ОбъектДокумента.Записать();
			
			СтрокаСостава.Ссылка = ОбъектДокумента.Ссылка;			
			DD_API_LetterID = СтрокаСостава.DD_API_LetterID;
						
			Если ОбъектПакета.ЭлектронныеДокументы.Найти(ОбъектДокумента.Ссылка) = Неопределено Тогда				
				ОбъектПакетаСтрокаТЧ = ОбъектПакета.ЭлектронныеДокументы.Добавить();
				ОбъектПакетаСтрокаТЧ.ЭлектронныйДокумент = ОбъектДокумента.Ссылка;
				ОбъектПакетаСтрокаТЧ.ОбъектВладелец 	 = Пакет.Данные1С.Документ;				
			КонецЕсли;
			
		КонецЦикла;
								
		ОбъектПакета.ВнешнийУИД = Пакет.Данные1С.ВидПакетаID;
		ОбъектПакета.СтатусПакета = ПолучитьСтатусПакета_1СЭДО(Статус);				
		ОбъектПакета.ОбменДанными.Загрузка = Истина;
		ОбъектПакета.Записать();
		
		Пакет.Данные1С.Ссылка = ОбъектПакета.Ссылка;
		
		ЗафиксироватьТранзакцию();
		
	Исключение
		
		_Ошибка = ОписаниеОшибки();
		ОтменитьТранзакцию();
		
		// Сбросим ссылки, раз транзакция отменилась.
		Пакет.Данные1С.Ссылка= Неопределено;
		Для каждого СтрокаПакета Из Пакет.Документы Цикл
			СтрокаПакета.Ссылка= Неопределено;
		КонецЦикла;
		
		ВызватьИсключение(_Ошибка);
		
	КонецПопытки;
	
	Если Статус = "Отправлен" Тогда
		
		// Выходы в подключаемый модуль для возможности установить какие-то статусы/пометки по отправленным документам, например.
		
		ЭДО_ПодключаемыйМодуль_ОбработатьСобытие("ПослеОтправкиПакета", 
				Новый Структура("Пакет, ОтложеннаяОтправка", Пакет, (Пакет.ДанныеДД.DelaySend = Истина)));
				
		// Если Пакет.ДанныеДД.DelaySend = Истина , значит, документ находится в "Исходящих" и фактически еще не отправлен контрагенту.
		// Возможно, его отправят позже из веб-интерфейса.
		// В этом случае необходимо ориентироваться на событие "ПослеУстановкиСтатусаДокумента"
		
	КонецЕсли;
	
КонецПроцедуры

//}		ПАКЕТЫ ДОКУМЕНТОВ


//******************************************
//{		ДОКУМЕНТЫ
//

// Создает и заполняет единичный документ из пакета
Функция ЭДО_ДокументМенеджер_ПодготовитьИДобавитьДокументВПакет(Пакет, Документ1С, ВидДокументаСтрокой, ДополнительныеПараметры=Неопределено) Экспорт
	
	Результат = Новый Структура(ЭДО_ДокументМенеджер_РеквизитыДокументаСтрокой());	//"рыба" готового документа
	
	//Для совместимости со старыми модулями: сначала пробуем найти по новому - по ID
	ВидДокументаСсылка = ЭДО_СправочникМенеджер_НайтиПоРеквизиту("ВидыДокументов", "ID", ВидДокументаСтрокой);
	//если не нашли, то ищем по старому - по наименованию
	Если Не ЗначениеЗаполнено(ВидДокументаСсылка) Тогда
		ВидДокументаСсылка	= ЭДО_СправочникМенеджер_НайтиПоНаименованию("ВидыДокументов", ВидДокументаСтрокой);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ВидДокументаСсылка) Тогда
		ВызватьИсключение "Не найден вид документа "+ВидДокументаСтрокой;
	КонецЕсли;
	
	ВидДокументаРазвернутый = ЭДО_СправочникМенеджер_ПолучитьЭлемент("ВидыДокументов", ВидДокументаСсылка); // TODO кэшировать при массовых действиях
	
	Если ЗначениеЗаполнено(Пакет.Данные1С.ПереотправляемыйПакетСсылка) Тогда
		
		ДанныеСуществующегоДокументаПакета = ЭДО_ПолучитьДанныеСуществующегоДокументаПакета(Пакет.Данные1С.ПереотправляемыйПакетСсылка, Документ1С, ВидДокументаРазвернутый);
		
		//При переотправке не добавляем документы, которых не было в пакете в прошлый раз
		Если Не ЗначениеЗаполнено(ДанныеСуществующегоДокументаПакета.Ссылка) Тогда
			Возврат Результат;
		КонецЕсли;
		
		Результат.ПереотправляемыйДокументСсылка = ДанныеСуществующегоДокументаПакета.Ссылка;
		Результат.ПереотправляемыйДокументМетка  = ДанныеСуществующегоДокументаПакета.Метка;
		Результат.ПереотправляемыйДокументСтатус = ДанныеСуществующегоДокументаПакета.Статус;
		
	КонецЕсли;
			
	Результат.Тип			= ВидДокументаРазвернутый.ТипДокумента;
	Результат.Вид			= ВидДокументаСсылка;
	Результат.ВидID			= ВидДокументаСтрокой;
	Результат.Ключ			= Новый УникальныйИдентификатор; // для отрисовки в форме пакета. Похоже на атавизм.
	Результат.Content		= ДД_Компонента_ПолучитьПустойКонтент(ВидДокументаРазвернутый.ТипКонтента, Истина);
	Результат.Документ1С	= Документ1С; // Осторожно: Документ1С не всегда может присутствовать в параметрах
	
	ПараметрыПМ = Новый Структура("Результат, ВидДокументаРазвернутый, ДополнительныеПараметры", Результат, ВидДокументаРазвернутый, ДополнительныеПараметры);

	ЭДО_ПодключаемыйМодуль_ОбработатьСобытие("ПодготовитьЭлектронныйДокумент",ПараметрыПМ); // сам алгоритм подготовки документа будет размещаться в ПМ
	
	Результат.Заголовок = врем_ПредставлениеЭД(Результат.Content, Результат.Тип, Результат.ИмяФайла); // это просто для представления документа в интерфейсе
	
	Если ТипЗнч(Результат.Content) = Тип("ОбъектXDTO") Тогда
		// Вообще контента можно переопределить и в самом ПМ.
		Результат.ТипКонтента	= Результат.Content.Тип().Имя;
		Результат.Content		= ОбъектXDTOВСтруктуру(Результат.Content);
	КонецЕсли;
			
	Пакет.Документы.Добавить(Результат);
	
	Возврат Результат;	
	
КонецФункции

Функция ЭДО_ДокументМенеджер_РеквизитыДокументаСтрокой() Экспорт

	Возврат 
		"Ссылка,
			// "Ссылка" - ссылка на сохраненное сообщение в справочнике, если уже было отправлено
			
		|Заголовок,
			// "Заголовок" - просто для отображения на форме исходящего пакета
			
		|Тип,
			// "Тип" - тип конкретного документа (из макета ТипыДокументов)
			
		|Вид,
			// Вид документа из Справочник.Диадок_ДополнительныеСправочники
			
		|ВидID,
			// ID вида документа из Справочник.Диадок_ДополнительныеСправочники
			
		|Документ1С,
			// "Документ1С" - если в СФ указано несколько оснований, то ТОРГ12/акт будет отправляться по каждому из них
			
		|Content,
			//  "Content" - собранный контент документа (ОбъектXDTO на сервере, Структура на клиенте)
			
		|ТипКонтента,
			//  "ТипКонтента" - тип контента данного документа. Может меняться для формализованных документов: например, тип документа - Invoice, тип контента - UniversalTransferDocumentContent.
			
		|ДвоичныеДанные,
			// "ДвоичныеДанные" - бинарник с данными файла. Либо, как вариант, АдресВременногоХранилища (продумать).
			
		|Ключ,
			// "Ключ" - служебное поле для отображения в форме "ПакетДокументов_Отправка". Не используется.
			
		|DD_API_LetterID,
			// "DD_API_LetterID" - ID пакета ("message")
			
		|DD_API_DocumentID,
			// "DD_API_DocumentID"  - после непосредственной отправки на сервер сюда будем записывать полученный ID документа в ДД.
			
		|DD_API_BoxID,
			// "DD_API_BoxID" - ID ящика.
			
//+ несколько полей с метаданными документа для отображения в вебе
// например,  такие: http://diadocsdk-1c.readthedocs.io/ru/latest/Torg12ToSend.html
		|ИмяФайла,
			// FileName. "ИмяФайла" - представление неформализованного документа, отправляется на сервер. Например, "Протокол разногласий.xlsx"
			
		|Сумма,
			// Total. Сумма документа
			
		|СуммаНДС,
			// Vat. Сумма НДС документа
			
		|СуммаДоговора,
			// ContractPrice. Сумма договора
			
		|ТипДоговора,
			// ContractType. Сумма НДС документа для отображения в вебе
			
		|Основание,
			// Grounds. Основание документа (договор, счет, ...)
			
		|Комментарий,
			// Comment. Текстовый комментарий к документу
			
//- несколько полей с метаданными документа для отображения в вебе

		|ПереотправляемыйДокументСсылка, ПереотправляемыйДокументМетка, ПереотправляемыйДокументСтатус,
			// Если переотправляем пакет - ссылка на документ пакета, который был отправлен ранее.
			
		|ОтправлятьКакЕсть";
			// для использования метода компоненты AddDocumentFromFileRaw(), т.е. отправка без парсинга в контент.
		
КонецФункции // ЭДО_ДокументМенеджер_Реквизиты()
 
//}		ДОКУМЕНТЫ


//**************************************
//{		ТРЕБУЕМЫЕ ДЕЙСТВИЯ
//

// Возвращает гиперссылку на первый документ в веб-интерфейсе по ссылке на Пакет в 1С
Функция ЭДО_ПакетДокументов_СсылкаВБраузере(ПакетСсылка)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Диадок_Документы.Ссылка,
	|	Диадок_Документы.BoxId КАК BoxId,
	|	Диадок_Документы.LetterId КАК LetterId,
	|	Диадок_Документы.DocumentId КАК DocumentId
	|ИЗ
	|	Справочник.Диадок_Документы КАК Диадок_Документы
	|ГДЕ
	|	Диадок_Документы.Пакет = &Пакет"
	);
	Запрос.УстановитьПараметр("Пакет",ПакетСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат ЭДО_Служебные_СформироватьСсылкуВБраузере(Выборка.BoxId,Выборка.LetterId,Выборка.DocumentId);
	КонецЕсли;
	
КонецФункции

// Возвращает гиперссылку на документ в веб-интерфейсе по ссылке на единичный документ ЭДО (из справочника)
Функция ЭДО_Документ_СсылкаВБраузере(ДокументЭДО) Экспорт
	
	Если ЭДО_Использовать1СЭДО() Тогда
		Возврат ЭДО_Документ_СсылкаВБраузере_1СЭДО(ДокументЭДО);
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Диадок_Документы.Ссылка,
	|	Диадок_Документы.BoxId КАК BoxId,
	|	Диадок_Документы.LetterId КАК LetterId,
	|	Диадок_Документы.DocumentId КАК DocumentId
	|ИЗ
	|	Справочник.Диадок_Документы КАК Диадок_Документы
	|ГДЕ
	|	Диадок_Документы.Ссылка = &Документ"
	);
	Запрос.УстановитьПараметр("Документ",ДокументЭДО);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат ЭДО_Служебные_СформироватьСсылкуВБраузере(Выборка.BoxId,Выборка.LetterId,Выборка.DocumentId);
	КонецЕсли;
	
КонецФункции

Функция ЭДО_Документ_СсылкаВБраузере_1СЭДО(ДокументЭДО) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭлектронныеДокументы.Ссылка.ПрофильНастроекЭДО.ОператорЭДОИд КАК BoxId,
	|	ЭлектронныеДокументы.ЭлектронныйДокумент.УникальныйИДВнешний КАК LetterId,
	|	ЭлектронныеДокументы.ЭлектронныйДокумент.УникальныйИД КАК DocumentId
	|ИЗ
	|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ЭлектронныеДокументы
	|ГДЕ
	|	ЭлектронныеДокументы.ЭлектронныйДокумент = &Документ"
	);
	Запрос.УстановитьПараметр("Документ",ДокументЭДО);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат ЭДО_Служебные_СформироватьСсылкуВБраузере(Выборка.BoxId, Выборка.LetterId, Выборка.DocumentId);
	КонецЕсли;
	
КонецФункции

// Формирует текст гиперссылки на документ / пакет для браузера
Функция ЭДО_Служебные_СформироватьСсылкуВБраузере(BoxId,LetterId,DocumentId)
	// https://diadoc.kontur.ru/51eb4bfc-548d-411f-8d68-f4ace338ea3f/Document/Show?letterId=b7114682-7763-438d-83e1-1304c3f391eb&documentId=468cfc35-ec9f-4fec-a444-ee181350483e
	Возврат "https://diadoc.kontur.ru/"+BoxId+"/Document/Show?letterId="+LetterId+"&documentId="+DocumentId;
КонецФункции

//}		ТРЕБУЕМЫЕ ДЕЙСТВИЯ


//**********************************************
//{		СПРАВОЧНИКИ
//

Функция ЭДО_СправочникМенеджер_ПолучитьСписокЭлементов(ИмяСправочника,Владелец = Неопределено,ПереченьРеквизитов = Неопределено) Экспорт
	
	Если ЭДО_Использовать1СЭДО() Тогда
		Возврат ЭДО_СправочникМенеджер_ПолучитьСписокЭлементов_1СЭДО(ИмяСправочника, Владелец, ПереченьРеквизитов);
	КонецЕсли;
	
	Если ИмяСправочника = "Организации" ИЛИ ИмяСправочника = "Контрагенты" ИЛИ
		 ИмяСправочника = "ПодразделенияОрганизаций" ИЛИ ИмяСправочника = "ПодразделенияКонтрагентов" Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	Диадок_ЮрФизЛица.Ссылка,
		|	Диадок_ЮрФизЛица.Наименование КАК Наименование,
		|	Диадок_ЮрФизЛица.Аббревиатура,
		|	Диадок_ЮрФизЛица.ИНН,
		|	Диадок_ЮрФизЛица.КПП,
		|	Диадок_ЮрФизЛица.СвязанныйСправочник1 КАК Связь1,
		|	Диадок_ЮрФизЛица.СвязанныйСправочник2 КАК Связь2,
		|	Диадок_ЮрФизЛица.СвязанныйСправочник3 КАК Связь3,
		|	Диадок_ЮрФизЛица.ID,
		|	Диадок_ЮрФизЛица.ID_ОсновноеПодразделение,
		|	Диадок_ЮрФизЛица.ID_ВладелецПодразделения,
		|	Диадок_ЮрФизЛица.ID_РодительПодразделения
		|ИЗ
		|	Справочник.Диадок_ЮрФизЛица КАК Диадок_ЮрФизЛица
		|ГДЕ
		|	Диадок_ЮрФизЛица.ИмяСправочника = &ИмяСправочника
		|    "+?(Найти(ИмяСправочника,"Подразделения")>0," И Диадок_ЮрФизЛица.ID_ВладелецПодразделения = &Владелец ","")+"
		|УПОРЯДОЧИТЬ ПО
		|	Наименование"
		);
		
		Запрос.УстановитьПараметр("ИмяСправочника", ИмяСправочника);			   
		Запрос.УстановитьПараметр("Владелец",		Владелец);
		
		Возврат Запрос.Выполнить().Выгрузить();	
		
	КонецЕсли;
	
	РезультатСписок = Новый ТаблицаЗначений;
	РезультатСписок.Колонки.Добавить("Ссылка");
	РезультатСписок.Колонки.Добавить("Наименование");
	
	Если ПереченьРеквизитов = Неопределено Тогда
		Если ИмяСправочника = "ВидыДокументов" Тогда
			ПереченьРеквизитов = "Комментарий,ТипДокумента,Отправка,Получение";
		ИначеЕсли ИмяСправочника = "ПравилаКонвертации" Тогда	
			ПереченьРеквизитов = "СтруктураИсточник,СтруктураПриемник";
		ИначеЕсли ИмяСправочника = "ТребуемыеДействия" Тогда
			ПереченьРеквизитов = "ИмяКартинки,Неактивное";
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПереченьРеквизитов) Тогда
		СписокДопРеквизитов = ЭДО_Служебные_РазложитьСтрокуВМассивСлов(ПереченьРеквизитов);
		Для Каждого ДопРеквизит ИЗ СписокДопРеквизитов Цикл
			РезультатСписок.Колонки.Добавить(ДопРеквизит);
		КонецЦикла;
	КонецЕсли;
	
	Запрос = Новый Запрос( 
	"ВЫБРАТЬ
	|	Диадок_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка КАК Ссылка,
	|	Диадок_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.Наименование КАК Наименование,
	|	Диадок_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита КАК ИмяРеквизита,
	|	Диадок_ДополнительныеСправочникиДополнительныеРеквизиты.Значение,
	|	Диадок_ДополнительныеСправочникиДополнительныеРеквизиты.ЗначениеСтрока
	|ИЗ
	|	Справочник.Диадок_ДополнительныеСправочники.ДополнительныеРеквизиты КАК Диадок_ДополнительныеСправочникиДополнительныеРеквизиты
	|ГДЕ
	|	Диадок_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ИмяСправочника = &ИмяСправочника
	|
	|УПОРЯДОЧИТЬ ПО
	|	Ссылка.Наименование"
	);
				   
	Запрос.УстановитьПараметр("ИмяСправочника",ИмяСправочника);			   
				   
	СтарЭлемент = Неопределено;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если НЕ Выборка.Ссылка = СтарЭлемент Тогда
			НоваяСтрока = РезультатСписок.Добавить();
			НоваяСтрока.Ссылка = Выборка.Ссылка;
			НоваяСтрока.Наименование = Выборка.Наименование;
			СтарЭлемент = Выборка.Ссылка;	
		КонецЕсли;
		
		Если Найти(ПереченьРеквизитов,Выборка.ИмяРеквизита)>0 Тогда
			НоваяСтрока[Выборка.ИмяРеквизита] = ?(ЗначениеЗаполнено(Выборка.ЗначениеСтрока),Выборка.ЗначениеСтрока,Выборка.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РезультатСписок;
	
КонецФункции

Функция ЭДО_СправочникМенеджер_ПолучитьСписокЭлементов_1СЭДО(ИмяСправочника,Владелец = Неопределено,ПереченьРеквизитов = Неопределено) Экспорт
	
	Запрос = Новый Запрос;
	
	Если ИмяСправочника = "Организации" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПрофилиНастроекЭДО.Ссылка,
		|	ПрофилиНастроекЭДО.Наименование КАК Наименование,
		|	"""" КАК Аббревиатура,
		|	ПрофилиНастроекЭДО.ОператорЭДОИНН КАК ИНН,
		|	ПрофилиНастроекЭДО.ОператорЭДОКПП КАК КПП,
		|	ПрофилиНастроекЭДО.Организация КАК Связь1,
		|	"""" КАК Связь2,
		|	"""" КАК Связь3,
		|	ПрофилиНастроекЭДО.ОператорЭДОИд КАК ID,
		|	"""" КАК ID_ОсновноеПодразделение,
		|	"""" КАК ID_ВладелецПодразделения,
		|	"""" КАК ID_РодительПодразделения
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
		|ГДЕ
		|	(ВЫРАЗИТЬ(ПрофилиНастроекЭДО.ОператорЭДО КАК СТРОКА(15))) = &IDОператора1СЭДО
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		
	ИначеЕсли ИмяСправочника = "Контрагенты" Тогда	
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоглашенияОбИспользованииЭД.Ссылка,
		|	СоглашенияОбИспользованииЭД.Наименование КАК Наименование,
		|	"""" КАК Аббревиатура,
		|	ПОДСТРОКА(СоглашенияОбИспользованииЭД.Комментарий, 1, 12) КАК ИНН,
		|	ПОДСТРОКА(СоглашенияОбИспользованииЭД.Комментарий, 13, 9) КАК КПП,
		|	СоглашенияОбИспользованииЭД.Контрагент КАК Связь1,
		|	"""" КАК Связь2,
		|	"""" КАК Связь3,
		|	СоглашенияОбИспользованииЭД.ИдентификаторКонтрагента КАК ID,
		|	"""" КАК ID_ОсновноеПодразделение,
		|	"""" КАК ID_ВладелецПодразделения,
		|	"""" КАК ID_РодительПодразделения
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
		|ГДЕ
		|	(ВЫРАЗИТЬ(СоглашенияОбИспользованииЭД.ПрофильНастроекЭДО.ОператорЭДО КАК СТРОКА(15))) = &IDОператора1СЭДО
		|
		|УПОРЯДОЧИТЬ ПО
		|	Наименование";
		
	ИначеЕсли ИмяСправочника = "ВидыДокументов" ИЛИ ИмяСправочника = "ВидыПакетов" Тогда
		
		Возврат ЭДО_ПредопределенныеСписки_Получить(ИмяСправочника);
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("IDОператора1СЭДО", ЭДО_IDОператора1СЭДО());
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

Функция ЭДО_СправочникМенеджер_ПолучитьДеревоЭлементов(ИмяСправочника,Владелец = Неопределено) Экспорт
	
	// TODO реально используется только для дерева подразделений
	Дерево = Новый ДеревоЗначений;
	ЭДО_Служебные_ДобавитьКолонкиВТаблицуЗначений(Дерево, "ID,Наименование,Аббревиатура,ИНН,КПП,Связь1,Связь2,Связь3,Ссылка");
	
	ТаблицаПодразделений = ЭДО_СправочникМенеджер_ПолучитьСписокЭлементов(ИмяСправочника,Владелец.ID);
	
	ТаблицаПодразделений.Индексы.Добавить("ID_РодительПодразделения");
	
	ЭДО_Преобразование_ТаблицаЗначенийВДеревоЗначений(ТаблицаПодразделений,Дерево,"ID_РодительПодразделения","");

	Возврат Дерево;
	
КонецФункции

Функция ЭДО_СправочникМенеджер_ВыбратьЭлемент(ИмяСправочника,ФормаВладелец = Неопределено) Экспорт
	
	#Если Клиент Тогда
	ФормаВыбора = ПолучитьФорму(ИмяСправочника+"_ФормаСписка",ФормаВладелец ,Новый УникальныйИдентификатор());
	ФормаВыбора.РежимВыбораСписка	= Истина;

	Если ФормаВыбора.ОткрытьМодально() = Истина Тогда
		Возврат ФормаВыбора.СсылкаВыбора;
	КонецЕсли;
	
	Возврат Неопределено;
	#КонецЕсли
	
КонецФункции

Функция ЭДО_СправочникМенеджер_НайтиПоРеквизиту(ИмяСправочника,ИмяРеквизита,ЗначениеРеквизита) Экспорт
	
	Если ЭДО_Использовать1СЭДО() Тогда
		Возврат ЭДО_СправочникМенеджер_НайтиПоРеквизиту_1СЭДО(ИмяСправочника,ИмяРеквизита,ЗначениеРеквизита);
	КонецЕсли;	
	
	Запрос = Новый Запрос( 
	"ВЫБРАТЬ
	|	Диадок_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка
	|ИЗ
	|	Справочник.Диадок_ДополнительныеСправочники.ДополнительныеРеквизиты КАК Диадок_ДополнительныеСправочникиДополнительныеРеквизиты
	|ГДЕ
	|	Диадок_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита = &ИмяРеквизита
	|	И Диадок_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка.ИмяСправочника = &ИмяСправочника
	|	И Диадок_ДополнительныеСправочникиДополнительныеРеквизиты.Значение = &Значение"
	);
	 
	 Запрос.УстановитьПараметр("ИмяРеквизита",	ИмяРеквизита);
	 Запрос.УстановитьПараметр("ИмяСправочника",ИмяСправочника);
	 Запрос.УстановитьПараметр("Значение",		ЗначениеРеквизита);
	 
	 Возврат ЭДО_Служебные_ПолучитьРезультатЗапроса(Запрос);

	
КонецФункции

Функция ЭДО_СправочникМенеджер_НайтиПоРеквизиту_1СЭДО(ИмяСправочника,ИмяРеквизита,ЗначениеРеквизита) Экспорт
	
	Результат = Неопределено;
	
	Если ИмяРеквизита = "ID" Тогда
		
		Результат = Новый Структура("Наименование, ID");
		
		Если ИмяРеквизита = "ID" Тогда
			Отбор = Новый Структура("ID", ЗначениеРеквизита);
		Иначе
			Отбор = Новый Структура("Наименование", ЗначениеРеквизита);
		КонецЕсли;
		
		МассивСтрокСпискаВидовПакета = ЭДО_ПредопределенныеСписки_Получить(ИмяСправочника).НайтиСтроки(Отбор);
		
		Если МассивСтрокСпискаВидовПакета.Количество() > 0 Тогда			
			ЗаполнитьЗначенияСвойств(Результат, МассивСтрокСпискаВидовПакета[0]);
		КонецЕсли;
				
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭДО_СправочникМенеджер_НайтиПоНаименованию(ИмяСправочника,Наименование) Экспорт
	
	Если ЭДО_Использовать1СЭДО() Тогда
		Возврат ЭДО_СправочникМенеджер_НайтиПоНаименованию_1СЭДО(ИмяСправочника,Наименование);
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Диадок_ДополнительныеСправочники.Ссылка
	|ИЗ
	|	Справочник.Диадок_ДополнительныеСправочники КАК Диадок_ДополнительныеСправочники
	|ГДЕ
	|	Диадок_ДополнительныеСправочники.ИмяСправочника = &ИмяСправочника
	|	И Диадок_ДополнительныеСправочники.Наименование = &Наименование"
	);
	 
	 Запрос.УстановитьПараметр("ИмяСправочника",	ИмяСправочника);
	 Запрос.УстановитьПараметр("Наименование",		Наименование);
	 
	 Возврат ЭДО_Служебные_ПолучитьРезультатЗапроса(Запрос);

КонецФункции

Функция ЭДО_СправочникМенеджер_НайтиПоНаименованию_1СЭДО(ИмяСправочника,Наименование) Экспорт
	
	Возврат Неопределено;

КонецФункции

Функция ЭДО_СправочникМенеджер_ОткрытьФорму(ИмяСправочника, СсылкаНаЭлемент, ФормаВладелец = Неопределено) Экспорт
	
	// TODO перенести в служебную форму вроде "Модуль_КлиентскиеПроцедуры"
	#Если Клиент Тогда
	ФормаЭлемента = ПолучитьФорму(ИмяСправочника + "_ФормаЭлемента", ФормаВладелец, СсылкаНаЭлемент);
	ФормаЭлемента.СсылкаНаЭлемент = СсылкаНаЭлемент;
	ФормаЭлемента.Открыть();
	#КонецЕсли
	
КонецФункции

Функция ЭДО_СправочникМенеджер_ПолучитьЭлемент(ИмяСправочника,Ссылка) Экспорт
	
	Если ЭДО_Использовать1СЭДО() Тогда
		Возврат ЭДО_СправочникМенеджер_ПолучитьЭлемент_1СЭДО(ИмяСправочника,Ссылка);		
	КонецЕсли;
	
	Результат = Новый Структура();
	Результат.Вставить("Наименование");
	
	Если ИмяСправочника = "Организации" 
		ИЛИ ИмяСправочника = "Контрагенты"
		Или ИмяСправочника = "ПодразделенияОрганизаций"
		ИЛИ ИмяСправочника = "ПодразделенияКонтрагентов" Тогда
		
		Результат.Вставить("ИНН");
		Результат.Вставить("КПП");
		Результат.Вставить("СвязанныйСправочник1");
		Результат.Вставить("СвязанныйСправочник2");
		Результат.Вставить("СвязанныйСправочник3");
		Результат.Вставить("ID");
		Результат.Вставить("ID_ОсновноеПодразделение");
		
		Если ИмяСправочника = "ПодразделенияОрганизаций" 
			ИЛИ ИмяСправочника = "ПодразделенияКонтрагентов" Тогда
			
			Результат.Вставить("Аббревиатура");
			Результат.Вставить("ID_ВладелецПодразделения");
			Результат.Вставить("ID_РодительПодразделения");
			
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(Результат,Ссылка);
		
	// сделать предварительное заполнение реквизитов пустыми значениями
	
	Для Каждого Стр ИЗ Ссылка.ДополнительныеРеквизиты Цикл
		
		Если Найти(Стр.ИмяРеквизита,"Хранилище")>0 Тогда
			//если в ИмяРеквизита встречается слово "Хранилище", то содержимое будет лежать в ХранилищеЗначения
			Значение = Стр.ЗначениеХранилищеЗначения.Получить();	
		Иначе
			Значение = Стр.Значение;
		КонецЕсли;
		
		Результат.Вставить(Стр.ИмяРеквизита,Значение);
		
	КонецЦикла;
	
	Если ИмяСправочника = "ВидыДокументов" Тогда
		
		ТипКонтента = "";
		
		Если ЗначениеЗаполнено(Результат.ТипДокумента) Тогда
			ТипКонтента = ЭДО_ОписаниеТипаДокумента(Результат.ТипДокумента).СтруктураСодержимого;
		КонецЕсли;
		
		Результат.Вставить("ТипКонтента", ТипКонтента);
		
	КонецЕсли;
	
	Результат.Вставить("Ссылка", Ссылка);
	
	Возврат Результат;

КонецФункции

Функция ЭДО_СправочникМенеджер_ПолучитьЭлемент_1СЭДО(ИмяСправочника,Ссылка) Экспорт
	
	Результат = Новый Структура();
		
	Если ИмяСправочника = "Организации" Тогда
		
		Результат = Новый Структура("Наименование, ИНН, КПП, СвязанныйСправочник1, СвязанныйСправочник2, СвязанныйСправочник3, ID, ID_ОсновноеПодразделение, AfterIndexKey, ИспользоватьУПД");
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПрофилиНастроекЭДО.Наименование КАК Наименование,
		|	ПрофилиНастроекЭДО.ОператорЭДОИНН КАК ИНН,
		|	ПрофилиНастроекЭДО.ОператорЭДОКПП КАК КПП,
		|	ПрофилиНастроекЭДО.Организация КАК СвязанныйСправочник1,
		|	ПрофилиНастроекЭДО.ОператорЭДОИд КАК ID
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
		|ГДЕ
		|	ПрофилиНастроекЭДО.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка); 
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ЗаполнитьЗначенияСвойств(Результат, Выборка);
			
			Результат.ИспользоватьУПД 			= ЭДО_СправочникМенеджер_ЗначениеДопРеквизита_1СЭДО(Ссылка, "ИспользоватьУПД");
			Результат.ID_ОсновноеПодразделение 	= ЭДО_СправочникМенеджер_ЗначениеДопРеквизита_1СЭДО(Ссылка, "ID_ОсновноеПодразделение");
			Результат.AfterIndexKey 			= ЭДО_СправочникМенеджер_ЗначениеДопРеквизита_1СЭДО(Ссылка, "AfterIndexKey");
			
		КонецЕсли;
				
	ИначеЕсли  ИмяСправочника = "Контрагенты" Тогда
		
		Результат = Новый Структура("Наименование, ИНН, КПП, СвязанныйСправочник1, СвязанныйСправочник2, СвязанныйСправочник3, ID, ID_ОсновноеПодразделение");
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоглашенияОбИспользованииЭД.Ссылка,
		|	СоглашенияОбИспользованииЭД.Наименование КАК Наименование,
		|	"""" КАК Аббревиатура,
		|	ПОДСТРОКА(СоглашенияОбИспользованииЭД.Комментарий, 1, 12) КАК ИНН,
		|	ПОДСТРОКА(СоглашенияОбИспользованииЭД.Комментарий, 13, 9) КАК КПП,
		|	СоглашенияОбИспользованииЭД.Контрагент КАК СвязанныйСправочник1,
		|	СоглашенияОбИспользованииЭД.ИдентификаторКонтрагента КАК ID
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
		|ГДЕ
		|	СоглашенияОбИспользованииЭД.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", Ссылка); 
		
		РезультатЗапроса = Запрос.Выполнить();
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			Выборка.Следующий();
			ЗаполнитьЗначенияСвойств(Результат, Выборка);			
			
			Результат.ID_ОсновноеПодразделение = ЭДО_СправочникМенеджер_ЗначениеДопРеквизита_1СЭДО(Ссылка, "ID_ОсновноеПодразделение");
						
		КонецЕсли;
		
	Иначе
				
		Результат = Новый Структура("Наименование, ID, ТипДокумента");
		
		Если ТипЗнч(Ссылка) = Тип("Строка") ИЛИ ТипЗнч(Ссылка) = Тип("Структура") Тогда
			
			Если ТипЗнч(Ссылка) = Тип("Строка") Тогда
				
				Отбор = Новый Структура("ID", Ссылка);
				
			ИначеЕсли ТипЗнч(Ссылка) = Тип("Структура") Тогда
				
				Если Ссылка.Свойство("ID") Тогда
					Отбор = Новый Структура("ID", Ссылка.ID);
				Иначе
					Возврат Результат;
				КонецЕсли;
				
			КонецЕсли;
			
			МассивСтрокСпискаВидовПакета = ЭДО_ПредопределенныеСписки_Получить(ИмяСправочника).НайтиСтроки(Отбор);
			
			Если МассивСтрокСпискаВидовПакета.Количество() > 0 Тогда			
				
				ЗаполнитьЗначенияСвойств(Результат, МассивСтрокСпискаВидовПакета[0]);
				
				Если ИмяСправочника = "ВидыДокументов" Тогда				
					ОписаниеТипаДокумента = ЭДО_ПредопределенныеСписки_Получить("ТипыДокументов").Найти(Результат.ТипДокумента,"Наименование");
					Результат.Вставить("ТипКонтента",ОписаниеТипаДокумента.СтруктураСодержимого);				
				КонецЕсли;
				
			КонецЕсли;		
			
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЭДО_СправочникМенеджер_СохранитьЭлемент(ИмяСправочника, Ссылка = Неопределено, Знач СтруктураЭлемента) Экспорт
	
	Если ЭДО_Использовать1СЭДО() Тогда
		ЭДО_СправочникМенеджер_СохранитьЭлемент_1СЭДО(ИмяСправочника, Ссылка, СтруктураЭлемента);
		Возврат;
	КонецЕсли;
	
	Если ИмяСправочника = "Организации"
		ИЛИ ИмяСправочника = "Контрагенты"
		ИЛИ ИмяСправочника = "ПодразделенияОрганизаций"
		ИЛИ ИмяСправочника = "ПодразделенияКонтрагентов" Тогда
		
		ЭлементОбъект = Ссылка.ПолучитьОбъект();
		
		ЭлементОбъект.СвязанныйСправочник1 = СтруктураЭлемента.СвязанныйСправочник1;
		ЭлементОбъект.СвязанныйСправочник2 = СтруктураЭлемента.СвязанныйСправочник2;
		ЭлементОбъект.СвязанныйСправочник3 = СтруктураЭлемента.СвязанныйСправочник3;
		
		СтруктураЭлемента.Свойство("ID_ОсновноеПодразделение", ЭлементОбъект.ID_ОсновноеПодразделение);		
		
		Если ИмяСправочника = "Организации" Тогда
			ЭДО_СправочникМенеджер_УстановитьЗначениеДопРеквизита(ЭлементОбъект,"AfterIndexKey",СтруктураЭлемента.AfterIndexKey);
			ЭДО_СправочникМенеджер_УстановитьЗначениеДопРеквизита(ЭлементОбъект,"ХранилищеСертификатовОрганизации",СтруктураЭлемента.ТаблицаСертификатов);
		КонецЕсли;
		
		ЭлементОбъект.Записать();
		
		Возврат;
		
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Ссылка) Тогда
		
		ЭлементОбъект = Справочники.Диадок_ДополнительныеСправочники.СоздатьЭлемент();
		ЭлементОбъект.ИмяСправочника = ИмяСправочника;
		ЭлементОбъект.Наименование = СтруктураЭлемента.Наименование;
		
	Иначе	
		
		ЭлементОбъект = Ссылка.ПолучитьОбъект();
		ЭлементОбъект.Наименование = СтруктураЭлемента.Наименование;
		
	КонецЕсли;
	
	Для Каждого Эл Из СтруктураЭлемента Цикл
		
		ЭДО_СправочникМенеджер_УстановитьЗначениеДопРеквизита(ЭлементОбъект,Эл.Ключ,Эл.Значение);
		
	КонецЦикла;
	
	ЭлементОбъект.Записать();
	
	Ссылка = ЭлементОбъект.Ссылка;
	
КонецПроцедуры

Процедура ЭДО_СправочникМенеджер_СохранитьЭлемент_1СЭДО(ИмяСправочника, Ссылка = Неопределено, Знач СтруктураЭлемента) Экспорт
	
	Если ИмяСправочника = "Организации" Тогда
		
		ЭлементОбъект = Ссылка.ПолучитьОбъект();		
		ЭлементОбъект.Организация = СтруктураЭлемента.СвязанныйСправочник1;
		ЭлементОбъект.ОбменДанными.Загрузка = Истина;
		ЭлементОбъект.Записать();
		
		Если СтруктураЭлемента.Свойство("ИспользоватьУПД") Тогда
			ЭДО_УстановитьЗначениеСвойства1СЭДО("ИспользоватьУПД", СтруктураЭлемента.ИспользоватьУПД, Ссылка);			
		КонецЕсли;
		
		Если СтруктураЭлемента.Свойство("AfterIndexKey") Тогда
			ЭДО_УстановитьЗначениеСвойства1СЭДО("AfterIndexKey", СтруктураЭлемента.AfterIndexKey, Ссылка);			
		КонецЕсли;
		
		Если СтруктураЭлемента.Свойство("ID_ОсновноеПодразделение") Тогда
			ЭДО_УстановитьЗначениеСвойства1СЭДО("ID_ОсновноеПодразделение", СтруктураЭлемента.ID_ОсновноеПодразделение, Ссылка);
		КонецЕсли;
		
	ИначеЕсли ИмяСправочника = "Контрагенты" Тогда
		
		ЭлементОбъект = Ссылка.ПолучитьОбъект();
		
		ЭлементОбъект.Контрагент = СтруктураЭлемента.СвязанныйСправочник1;
		ЭлементОбъект.ОбменДанными.Загрузка = Истина;
		ЭлементОбъект.Записать();
		
		Если СтруктураЭлемента.Свойство("ID_ОсновноеПодразделение") Тогда
			ЭДО_УстановитьЗначениеСвойства1СЭДО("ID_ОсновноеПодразделение", СтруктураЭлемента.ID_ОсновноеПодразделение, Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
	Ссылка = ЭлементОбъект.Ссылка;
	
КонецПроцедуры

Функция ЭДО_СправочникМенеджер_ЗначениеДопРеквизита(Объект,ИмяРеквизита) Экспорт
	
	Если ЭДО_Использовать1СЭДО() Тогда
		Возврат ЭДО_СправочникМенеджер_ЗначениеДопРеквизита_1СЭДО(Объект,ИмяРеквизита);
	КонецЕсли;
	
	ИмяСправочника = Объект.Метаданные().Имя;
	
	Результат = Неопределено;
	ЭтоХранилище = Найти(ИмяРеквизита,"Хранилище")>0;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Диадок_ДополнительныеСправочникиДополнительныеРеквизиты.Значение КАК Значение
	|ИЗ
	|	Справочник.Диадок_ДополнительныеСправочники.ДополнительныеРеквизиты КАК Диадок_ДополнительныеСправочникиДополнительныеРеквизиты
	|ГДЕ
	|	Диадок_ДополнительныеСправочникиДополнительныеРеквизиты.Ссылка = &Объект
	|	И Диадок_ДополнительныеСправочникиДополнительныеРеквизиты.ИмяРеквизита = &ИмяРеквизита"
	);
	Запрос.УстановитьПараметр("Объект",			Объект);
	Запрос.УстановитьПараметр("ИмяРеквизита",	ИмяРеквизита);
		
	Запрос.Текст = СтрЗаменить(Запрос.Текст,"Диадок_ДополнительныеСправочники",ИмяСправочника);
	
	Если ЭтоХранилище Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст,".Значение", ".ЗначениеХранилищеЗначения");
	КонецЕсли;
	
	Выб = Запрос.Выполнить().Выбрать();
	
	Если Выб.Следующий() Тогда
		
		Если ЭтоХранилище Тогда
			Если ТипЗнч(Выб.Значение) = Тип("ХранилищеЗначения") Тогда
				Результат = Выб.Значение.Получить();
			КонецЕсли;
		Иначе
			Результат = Выб.Значение;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

Функция ЭДО_СправочникМенеджер_ЗначениеДопРеквизита_1СЭДО(Объект, ИмяРеквизита) Экспорт
	
	Результат = "";
	
	Если ТипЗнч(Объект) = Тип("СправочникСсылка.ЭДПрисоединенныеФайлы") И Объект.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		
		ДанныеХранилища = Объект.ФайлХранилище.Получить();
		
		Если ТипЗнч(ДанныеХранилища) = Тип("Структура") Тогда
			ДанныеХранилища.Свойство(ИмяРеквизита, Результат);			
		КонецЕсли;
		
	Иначе		
		
		РезультатСтруктура = ЭДО_ПрочитатьЗначенияСвойств1СЭДО(ЭДО_ПолучитьДляОрганизацииПрофильНастроекЭДО(Объект), ИмяРеквизита);
		РезультатСтруктура.Свойство(ИмяРеквизита, Результат);
				
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//Пишет в табличную часть Элемент.ДополнительныеРеквизиты строку с "ИмяРеквизита" и "Значение"
//Если такая строка уже присутствует, она будет перезаписана
//Может работать как с объектом, так и со Ссылкой для единичных реквизитов
//Если в Элемент лежит объект, он не будет сразу записан, записать надо из вышестоящих методов
Процедура ЭДО_СправочникМенеджер_УстановитьЗначениеДопРеквизита(Элемент, ИмяРеквизита, Значение, ЗначениеСтрока="") Экспорт

	Если ЭДО_Использовать1СЭДО() Тогда		
		ЭДО_СправочникМенеджер_УстановитьЗначениеДопРеквизита_1СЭДО(Элемент, ИмяРеквизита, Значение, ЗначениеСтрока);
		Возврат;
	КонецЕсли;
	
	ЭтоОбъект = ЭДО_Служебные_ЭтоОбъект(Элемент);
	Объект = ?(ЭтоОбъект,Элемент,Элемент.ПолучитьОбъект());
	
	СтрокаРеквизита = Объект.ДополнительныеРеквизиты.Найти(ИмяРеквизита,"ИмяРеквизита");
	Если СтрокаРеквизита = Неопределено Тогда
		СтрокаРеквизита = Объект.ДополнительныеРеквизиты.Добавить();
		СтрокаРеквизита.ИмяРеквизита = ИмяРеквизита;
	КонецЕсли;
	
	Если Найти(ИмяРеквизита,"Хранилище")>0 Тогда
		СтрокаРеквизита.ЗначениеХранилищеЗначения = Новый ХранилищеЗначения(Значение);
		ИмяКолонки = "ЗначениеХранилищеЗначения";
	Иначе
		СтрокаРеквизита.Значение = Значение;
	КонецЕсли;
	
	СтрокаРеквизита.ЗначениеСтрока = ЗначениеСтрока;
	
	Если Не ЭтоОбъект Тогда
		Объект.Записать();
	КонецЕсли;

КонецПроцедуры

Процедура ЭДО_СправочникМенеджер_УстановитьЗначениеДопРеквизита_1СЭДО(Элемент, ИмяРеквизита, Значение, ЗначениеСтрока="") Экспорт
	
	Если ТипЗнч(Элемент) = Тип("СправочникОбъект.ЭДПрисоединенныеФайлы") И Элемент.НаправлениеЭД = Перечисления.НаправленияЭД.Входящий Тогда
		
		ДанныеХранилища = Элемент.ФайлХранилище.Получить();
		
		Если ТипЗнч(ДанныеХранилища) = Тип("Структура") Тогда
			ДанныеХранилища.Вставить(ИмяРеквизита, Значение);
			Элемент.ФайлХранилище = Новый ХранилищеЗначения(ДанныеХранилища);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭДО_ВыполнитьГрупповоеСопоставлениеКонтрагентов() Экспорт
	
	Результат = Новый Массив;
		
	МестоХраненияКонтрагентов = ЭДО_Модуль_ТипЗначенияОбъекта("Контрагенты", "ДляЗапроса");
	 
	Запрос = Новый Запрос;
	
	Если ЭДО_Использовать1СЭДО() Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоглашенияОбИспользованииЭД.Ссылка КАК КонтрагентДиадока,
		|	ПОДСТРОКА(СоглашенияОбИспользованииЭД.Комментарий, 1, 12) КАК ИНН,
		|	ПОДСТРОКА(СоглашенияОбИспользованииЭД.Комментарий, 13, 9) КАК КПП,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(СоглашенияОбИспользованииЭД.Контрагент КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК СвязанныйКонтрагент1С
		|ПОМЕСТИТЬ ВТ_ТаблицаКонтрагентовДиадока
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
		|ГДЕ
		|	(ВЫРАЗИТЬ(СоглашенияОбИспользованииЭД.ПрофильНастроекЭДО.ОператорЭДО КАК СТРОКА(15))) = &IDОператора1СЭДО
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИНН,
		|	КПП
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ТаблицаКонтрагентовДиадока.КонтрагентДиадока КАК КонтрагентДиадока,
		|	ВТ_ТаблицаКонтрагентовДиадока.ИНН КАК ИНН,
		|	ВТ_ТаблицаКонтрагентовДиадока.КПП КАК КПП,
		|	Контрагенты.Ссылка КАК Контрагент1С,
		|	1 КАК КолКонтаргентов1С
		|ИЗ
		|	ВТ_ТаблицаКонтрагентовДиадока КАК ВТ_ТаблицаКонтрагентовДиадока
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО (ВТ_ТаблицаКонтрагентовДиадока.СвязанныйКонтрагент1С = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
		|			И ВТ_ТаблицаКонтрагентовДиадока.ИНН = Контрагенты.ИНН
		|			И ВТ_ТаблицаКонтрагентовДиадока.КПП = Контрагенты.КПП
		|ИТОГИ
		|	СУММА(КолКонтаргентов1С)
		|ПО
		|	КонтрагентДиадока";
		
		Запрос.УстановитьПараметр("IDОператора1СЭДО", ЭДО_IDОператора1СЭДО());
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	Диадок_ЮрФизЛица.Ссылка КАК КонтрагентДиадока,
		|	Диадок_ЮрФизЛица.ИНН КАК ИНН,
		|	Диадок_ЮрФизЛица.КПП КАК КПП,
		|	ЕСТЬNULL(ВЫРАЗИТЬ(Диадок_ЮрФизЛица.СвязанныйСправочник1 КАК Справочник.Контрагенты), ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)) КАК СвязанныйКонтрагент1С
		|ПОМЕСТИТЬ ВТ_ТаблицаКонтрагентовДиадока
		|ИЗ
		|	Справочник.Диадок_ЮрФизЛица КАК Диадок_ЮрФизЛица
		|ГДЕ
		|	Диадок_ЮрФизЛица.ИмяСправочника = ""Контрагенты""
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ИНН,
		|	КПП
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВТ_ТаблицаКонтрагентовДиадока.КонтрагентДиадока КАК КонтрагентДиадока,
		|	ВТ_ТаблицаКонтрагентовДиадока.ИНН КАК ИНН,
		|	ВТ_ТаблицаКонтрагентовДиадока.КПП КАК КПП,
		|	Контрагенты.Ссылка КАК Контрагент1С,
		|	1 КАК КолКонтаргентов1С
		|ИЗ
		|	ВТ_ТаблицаКонтрагентовДиадока КАК ВТ_ТаблицаКонтрагентовДиадока
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК Контрагенты
		|		ПО (ВТ_ТаблицаКонтрагентовДиадока.СвязанныйКонтрагент1С = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
		|			И ВТ_ТаблицаКонтрагентовДиадока.ИНН = Контрагенты.ИНН
		|			И ВТ_ТаблицаКонтрагентовДиадока.КПП = Контрагенты.КПП
		|ИТОГИ
		|	СУММА(КолКонтаргентов1С)
		|ПО
		|	КонтрагентДиадока";
	КонецЕсли;
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "Справочник.Контрагенты", МестоХраненияКонтрагентов);
	
	РезультатЗапроса = Запрос.Выполнить();
	КоличествоСопоставленныхКонтрагентов = 0;

	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		ВыборкаПоГруппировкам = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаПоГруппировкам.Следующий() Цикл
			
			Выборка = ВыборкаПоГруппировкам.Выбрать();
			КоличествоЭлементовВыборки = Выборка.Количество();
			
			Если КоличествоЭлементовВыборки = 1 Тогда
				
				Выборка.Следующий();
				
				КонтрагентДиадокаОбъект = Выборка.КонтрагентДиадока.ПолучитьОбъект();
				
				Если ЭДО_Использовать1СЭДО() Тогда
					КонтрагентДиадокаОбъект.Контрагент = Выборка.Контрагент1С;
					КонтрагентДиадокаОбъект.ОбменДанными.Загрузка = Истина;
				Иначе
					КонтрагентДиадокаОбъект.СвязанныйСправочник1 = Выборка.Контрагент1С;
				КонецЕсли;
				
				КонтрагентДиадокаОбъект.Записать();
				
				КоличествоСопоставленныхКонтрагентов = КоличествоСопоставленныхКонтрагентов + 1;
				
			Иначе
				Если ЭДО_Использовать1СЭДО() Тогда
					текИНН = СокрЛП(Лев(ВыборкаПоГруппировкам.КонтрагентДиадока.Комментарий,12));
					текКПП = СокрЛП(Сред(ВыборкаПоГруппировкам.КонтрагентДиадока.Комментарий,13,9));					
				Иначе
					текИНН = ВыборкаПоГруппировкам.КонтрагентДиадока.ИНН;
					текКПП = ВыборкаПоГруппировкам.КонтрагентДиадока.КПП;					
				КонецЕсли;
				
				Результат.Добавить(Новый Структура("КонтрагентДиадока, КолНайденныхСоответствий, ИНН, КПП", ВыборкаПоГруппировкам.КонтрагентДиадока, КоличествоЭлементовВыборки, текИНН, текКПП));				
			КонецЕсли;	
			
		КонецЦикла;
		
	КонецЕсли;
	
		
	РезультатТекст = "Количество сопоставленных контрагентов: "+КоличествоСопоставленныхКонтрагентов;
	
	Если Результат.Количество() > 0 Тогда
		
		РезультатТекст = РезультатТекст+Символы.ПС+"Для следующих контрагентов Диадока было найдено по несколько соответствий в 1С:";
		
		Для Каждого текРезультат Из Результат Цикл
			РезультатТекст = РезультатТекст+Символы.ПС+""+текРезультат.КонтрагентДиадока+" ("+текРезультат.ИНН+"/"+текРезультат.КПП+") - "+текРезультат.КолНайденныхСоответствий;
		КонецЦикла;
	
	КонецЕсли;	
	
	Возврат РезультатТекст;
	
КонецФункции

//}		СПРАВОЧНИКИ


//**********************************************
//{		РЕГИСТР СВЕДЕНИЙ ДОПОЛНИТЕЛЬНЫХ НАСТРОЕК
//

Процедура ЭДО_РегистрНастроекКонтрагентов_ДобавитьЗапись(СтруктураДанных) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.Диадок_НастройкиКонтрагентов.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураДанных);
	МенеджерЗаписи.Записать();
	
КонецПроцедуры

Функция ЭДО_РегистрНастроекКонтрагентов_ПрочитатьЗначениеЗаписи(СтруктураДанных) Экспорт
	
	МенеджерЗаписи = РегистрыСведений.Диадок_НастройкиКонтрагентов.СоздатьМенеджерЗаписи();
	ЗаполнитьЗначенияСвойств(МенеджерЗаписи, СтруктураДанных);
	МенеджерЗаписи.Прочитать();
	
	Возврат МенеджерЗаписи.Значение;
	
КонецФункции

//}		РЕГИСТР СВЕДЕНИЙ ДОПОЛНИТЕЛЬНЫХ НАСТРОЕК


//**************************************
//{		ПРЕДОПРЕДЕЛЕННЫЕ СПИСКИ
//

Функция ЭДО_ПредопределенныеСписки_Получить(ИмяСписка) Экспорт
	
	Результат = ЭДО_Кэш_Прочитать(ИмяСписка);
	
	Если Результат = Неопределено Тогда
		
		Если ИмяСписка = "ТипыДокументов" Тогда
		
			Результат = Новый ТаблицаЗначений;
			ЭДО_Служебные_ДобавитьКолонкиВТаблицуЗначений(Результат, 
					"Наименование, Описание, Формализованный, СтруктураСодержимого, СтруктураМетаданных, ПодписаниеПолучателем,
						|ТипКонтентаПодписи, ТипКонтентаОтказаПодписи, ТипКонтентаЗапросаУточнения, ИмяМеты, РеквизитыМетаданных"
					);
			
			Область = ПолучитьМакет("ТипыДокументов").ПолучитьОбласть("ТипыДокументов");
			
			Для Сч=1 По Область.ВысотаТаблицы Цикл
				
				НоваяСтрока = Результат.Добавить();
				НоваяСтрока.Наименование					= ЭДО_Служебные_ПолучитьТекстЯчейкиОбласти(Область,Сч,1);
				НоваяСтрока.Описание						= ЭДО_Служебные_ПолучитьТекстЯчейкиОбласти(Область,Сч,2);
				НоваяСтрока.Формализованный					= ЗначениеЗаполнено(ЭДО_Служебные_ПолучитьТекстЯчейкиОбласти(Область,Сч,3));
				НоваяСтрока.СтруктураСодержимого			= ЭДО_Служебные_ПолучитьТекстЯчейкиОбласти(Область,Сч,4);
				НоваяСтрока.СтруктураМетаданных				= ЭДО_Служебные_ПолучитьТекстЯчейкиОбласти(Область,Сч,5);
				НоваяСтрока.ПодписаниеПолучателем			= (нрег(ЭДО_Служебные_ПолучитьТекстЯчейкиОбласти(Область,Сч,6)) = "да");
				НоваяСтрока.ТипКонтентаПодписи				= ЭДО_Служебные_ПолучитьТекстЯчейкиОбласти(Область,Сч,7);
				НоваяСтрока.ТипКонтентаОтказаПодписи		= ЭДО_Служебные_ПолучитьТекстЯчейкиОбласти(Область,Сч,8);
				НоваяСтрока.ТипКонтентаЗапросаУточнения		= ЭДО_Служебные_ПолучитьТекстЯчейкиОбласти(Область,Сч,9);
				НоваяСтрока.ИмяМеты							= ЭДО_Служебные_ПолучитьТекстЯчейкиОбласти(Область,Сч,10);
				НоваяСтрока.РеквизитыМетаданных				= ЭДО_Служебные_ПолучитьТекстЯчейкиОбласти(Область,Сч,11);
				
			КонецЦикла;
			
		ИначеЕсли ИмяСписка = "ВидыПакетов" Тогда		        		
			
			Результат = ЭДО_ПодключаемыйМодуль_ОбработатьСобытие("ПолучитьТаблицуИспользуемыхПакетов");
			
			Если Результат = Неопределено Тогда
				Результат = Новый ТаблицаЗначений;
				Результат.Колонки.Добавить("ID");
			КонецЕсли;
			
			Результат.Колонки.Добавить("Ссылка");
			
			Для Каждого СтрокаРезультат Из Результат Цикл
				СтрокаРезультат.Ссылка = СтрокаРезультат.Наименование;				
			КонецЦикла;					
			
		ИначеЕсли ИмяСписка = "ВидыДокументов" Тогда
			
			Результат = ЭДО_ПодключаемыйМодуль_ОбработатьСобытие("ПолучитьТаблицуИспользуемыхВидовДокументов");
			
			Если Результат = Неопределено Тогда
				Результат = Новый ТаблицаЗначений;
				Результат.Колонки.Добавить("ID");
			КонецЕсли;
			
			Результат.Колонки.Добавить("Ссылка");			
			
			Для Каждого СтрокаРезультат Из Результат Цикл
				СтрокаРезультат.Ссылка = СтрокаРезультат.Наименование;				
			КонецЦикла;			
			
		КонецЕсли;
		
		ЭДО_Кэш_Поместить(ИмяСписка, Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭДО_ОписаниеТипаДокумента(ИмяТипа) Экспорт
	Возврат ЭДО_ПредопределенныеСписки_Получить("ТипыДокументов").Найти(ИмяТипа, "Наименование");
КонецФункции

//}		ПРЕДОПРЕДЕЛЕННЫЕ СПИСКИ


//**************************************
//{		СЛУЖЕБНЫЕ
//

Процедура ЭДО_Служебные_СообщитьОбОшибке(Пояснение, ОписаниеОшибки=Неопределено) Экспорт
	
	ПолныйТекст= Пояснение + Символы.ПС + ОписаниеОшибки;
	Сообщить(ПолныйТекст);  // Можно переназначить в ЖР или еще куда-нибудь
	
КонецПроцедуры

Функция ЭДО_Служебные_ПолучитьРезультатЗапроса(Запрос, ИмяПоля = "Ссылка", ПустоеЗначение=Неопределено) Экспорт 
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если Не РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка[ИмяПоля];
		
	Иначе
			
		Возврат ПустоеЗначение;
	
	КонецЕсли;
	
КонецФункции

Функция ЭДО_Служебные_ПолучитьТекстЯчейкиОбласти(Область,Строка,Колонка) Экспорт
	Возврат Строка(Область.ПолучитьОбласть("R"+Формат(Строка,"ЧГ=0")+"C"+Формат(Колонка,"ЧГ=0")).ТекущаяОбласть.Текст);
КонецФункции	

Функция ЭДО_Служебные_РазложитьСтрокуВМассивСлов(Знач Строка, РазделителиСлов=",") Экспорт
	
	Слова = Новый Массив;
	
	Для Сч = 1 По СтрДлина(РазделителиСлов) Цикл
		Строка = СтрЗаменить(Строка,Сред(РазделителиСлов,Сч,1),Символы.ПС);
	КонецЦикла;
	
	Для Сч=1 По СтрЧислоСтрок(Строка) Цикл
		ТекСлово = СокрЛП(СтрПолучитьСтроку(Строка,Сч));
		Если ТекСлово<>"" Тогда
			Слова.Добавить(ТекСлово);
		КонецЕсли;	
	КонецЦикла;	
	
	Возврат Слова;
	
КонецФункции

// "00000000000000000000000000000000"				-> "00000000-0000-0000-0000-000000000000"
// "00000000-0000-0000-0000-000000000000"			-> "00000000-0000-0000-0000-000000000000"
// "00000000000000000000000000000000@diadoc.ru"		-> "00000000-0000-0000-0000-000000000000"
Функция ЭДО_Служебные_КаноническийГуид(Гуид) Экспорт
	
	// В лентах API и объектах компоненты много разночтений по гуидам
	// Перебирать их в каждом отдельном случае становится слишком накладно и чревато ошибками.
	// Поэтому стандартизацию сделаем здесь.
	
	Если СтрДлина(Гуид)=32 // 00000000000000000000000000000000 
		Или СтрДлина(Гуид)=42 Тогда // 00000000000000000000000000000000@diadoc.ru
		
		Возврат ""+Сред(Гуид,1,8)+"-"+Сред(Гуид,9,4)+"-"+Сред(Гуид,13,4)+"-"+Сред(Гуид,17,4)+"-"+Сред(Гуид,21,12);
		
	ИначеЕсли СтрДлина(Гуид)=36 Тогда // 00000000-0000-0000-0000-000000000000
		
		Возврат Гуид; // предполагаем, что уже все хорошо
		
	Иначе
		
		ВызватьИсключение "Формат GUID неверный";
		
	КонецЕсли;
	
КонецФункции


// "00000000-0000-0000-0000-000000000000"			-> "00000000000000000000000000000000@diadoc.ru"
// "00000000000000000000000000000000"				-> "00000000000000000000000000000000@diadoc.ru"
// "00000000000000000000000000000000"				-> "00000000000000000000000000000000@diadoc.ru"
Функция ЭДО_Служебные_АдресЯщикаКонтрагента(Гуид) Экспорт
	
	// действие, обратное действию ЭДО_Служебные_КаноническийГуид()
	
	Если СтрДлина(Гуид) = 32 Тогда 
		
		Возврат Гуид + "@diadoc.ru";
		
	ИначеЕсли СтрДлина(Гуид) = 36 Тогда
		
		Возврат СтрЗаменить(Гуид,"-","")+"@diadoc.ru";
		
	ИначеЕсли СтрДлина(Гуид) = 42 Тогда
		
		Возврат Гуид;
		
	Иначе
		
		ВызватьИсключение "Неверный идентификатор ящика";
		
	КонецЕсли;
	
КонецФункции


// Создает пустой объект XDTO и при необходимости - все его вложенные объекты
Функция ЭДО_Служебные_СоздатьПустойОбъектXDTO(мФабрика,Тип_Основной,СоздатьВложенныеОбъекты = Ложь)
	
	Результат = мФабрика.Создать(Тип_Основной);
	
	Если СоздатьВложенныеОбъекты Тогда
		Для Каждого Эл из Тип_Основной.Свойства Цикл
	        флСвойствоНеСписковое =	(Эл.ВерхняяГраница=1);
			Если Эл.Тип.URIПространстваИмен=Тип_Основной.URIПространстваИмен 
				И флСвойствоНеСписковое	Тогда
				
				Если ТипЗнч(Эл.Тип) = Тип("ТипОбъектаXDTO") Тогда//вложенные свойства создаем только для объектов
					Результат[Эл.Имя] = ЭДО_Служебные_СоздатьПустойОбъектXDTO(мФабрика,Эл.Тип,СоздатьВложенныеОбъекты);
				КонецЕсли;
				
			КонецЕсли;	
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Объект обработки для парсинга JSON
Функция ЭДО_Служебные_ПарсерJSON() Экспорт
	
	Результат = ЭДО_Кэш_Прочитать("ЭДО_Служебные_ПарсерJSON");
	
	Если Результат = Неопределено Тогда
		
		Если ЭДО_Служебные_РежимОтладкиВключен() Тогда
			
			Результат = ВнешниеОбработки.Создать(ЭДО_Модуль_КаталогОбработки()+"json_parser.epf",Ложь);
			
		Иначе
			
			ФайлОбработки = ПолучитьИмяВременногоФайла("epf");
			ПолучитьМакет("JSON_Parser_epf").Записать(ФайлОбработки);
			Результат = ВнешниеОбработки.Создать(ФайлОбработки,Ложь);
			ЭДО_Кэш_Поместить("ЭДО_Служебные_ПарсерJSON",Результат);
			
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЭДО_Служебные_ДобавитьКолонкиВТаблицуЗначений(Таблица,Колонки,ОписаниеТипов = Неопределено) Экспорт
	
	Если ТипЗнч(Колонки) = Тип("Массив") Тогда
		МассивИменКолонок = Колонки;
	Иначе
		МассивИменКолонок = ЭДО_Служебные_РазложитьСтрокуВМассивСлов(Колонки,",");
	КонецЕсли;
	
	Для Каждого ИмяКолонки Из МассивИменКолонок Цикл
		Если Таблица.Колонки.Найти(ИмяКолонки)=Неопределено Тогда
			Таблица.Колонки.Добавить(ИмяКолонки,ОписаниеТипов);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных(СтрокаМетаданных)
	
	ТекПолеМетаданных = Метаданные;
	
	МассивИмен = ЭДО_Служебные_РазложитьСтрокуВМассивСлов(СтрокаМетаданных,".");

	КоличествоИмен = МассивИмен.Количество();
	
	// КоличествоИмен = 2 для проверки наличия объекта, например 					Справочники.Диадок_ДополнительныеСправочники
	// КоличествоИмен = 4 для проверки наличия реквизита\ресурса и т.д., например	Справочники.Диадок_ДополнительныеСправочники.Реквизиты.ИмяСправочника
	// КоличествоИмен = 6 для проверки наличия реквизита таб. части, например		Справочники.Диадок_ДополнительныеСправочники.ТабличныеЧасти.ДополнительныеРеквизиты.Реквизиты.ЗначениеСтрока
	
	Если НЕ (КоличествоИмен = 2 ИЛИ КоличествоИмен = 4 ИЛИ КоличествоИмен = 6) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	КоличествоПоисков = КоличествоИмен/2;
	Для н = 1 По КоличествоПоисков Цикл
		ТекПолеМетаданных = ТекПолеМетаданных[МассивИмен[н*2-2]].Найти(МассивИмен[н*2-1]);
		Если ТекПолеМетаданных = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;	
	
КонецФункции

Процедура ЭДО_Служебные_ПроверитьДоступностьОбъектаМетаданных(СписокОшибок,ПолноеИмя, ПравоЧтение =  Истина, ПравоДобавление =  Истина, ПравоИзменение =  Истина, ПравоУдаление = Ложь)
	
	ПозицияТочки = Найти(ПолноеИмя,".");
	ВидМетаданных = Лев(ПолноеИмя,ПозицияТочки-1);
	ИмяОбъекта = Сред(ПолноеИмя,ПозицияТочки+1);
	
	ОбъектМетаданных = Метаданные[ВидМетаданных].Найти(ИмяОбъекта);
	
	Если ОбъектМетаданных = Неопределено Тогда
		СписокОшибок.Добавить("В конфигурации отсутствует: "+ПолноеИмя);
	Иначе
		Если ПравоЧтение Тогда
			Если НЕ ПравоДоступа("Чтение",ОбъектМетаданных) Тогда
				СписокОшибок.Добавить("У вас недостаточно прав на чтение: "+ПолноеИмя);
			КонецЕсли;
		КонецЕсли;
		Если ПравоДобавление Тогда
			Если НЕ ПравоДоступа("Добавление",ОбъектМетаданных) Тогда
				СписокОшибок.Добавить("У вас недостаточно прав на добавление: "+ПолноеИмя);
			КонецЕсли;
		КонецЕсли;
		Если ПравоИзменение Тогда
			Если НЕ ПравоДоступа("Изменение",ОбъектМетаданных) Тогда
				СписокОшибок.Добавить("У вас недостаточно прав на изменение: "+ПолноеИмя);
			КонецЕсли;
		КонецЕсли;
		Если ПравоУдаление Тогда
			Если НЕ ПравоДоступа("Удаление",ОбъектМетаданных) Тогда
				СписокОшибок.Добавить("У вас недостаточно прав на удаление: "+ПолноеИмя);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Заглушка для Состояние на сервере
Процедура ЭДО_Служебные_ПоказатьСостояние(текст) Экспорт
	#Если Клиент Тогда
	Состояние(текст);
	#Иначе
	Сообщить(текст);
	#КонецЕсли	
КонецПроцедуры	

// Возвращает инициализированный объект подключаемого модуля (ПМ). В ПМ хранится практически вся логика, относящаяся к текущей конфигурации.
Функция ЭДО_ПодключаемыйМодуль() Экспорт
	
	НеКэшировать = ЭДО_Служебные_РежимОтладкиВключен(); // позволяет не перезагружать основной модуль каждый раз
	
	мНастройки = ЭДО_Модуль_ОбщиеНастройки();
		
	Результат = ЭДО_Кэш_Прочитать("ПодключаемыйМодуль");
	
	Если Результат=Неопределено	Тогда
		
		Если НЕ мНастройки.ИспользоватьПодключаемыйМодуль=Истина Тогда //Используем встроенный ПМ
			
			ИмяПМ = Неопределено;
			
			//Бухгалтерия Предприятия
			Если Найти(Метаданные.Имя, "БухгалтерияПредприятия")>0 И Лев(Метаданные.Версия, 3) = "2.0" Тогда
				ИмяПМ = "ПМ_БП_20_epf";
			ИначеЕсли Найти(Метаданные.Имя, "БухгалтерияПредприятия")>0 И Лев(Метаданные.Версия, 3) = "3.0" Тогда
				ИмяПМ = "ПМ_БП_30_epf";
				
			//Управление Торговлей	
			ИначеЕсли Найти(Метаданные.Имя, "УправлениеТорговлей")>0 И Лев(Метаданные.Версия, 4) = "10.3" Тогда
				ИмяПМ = "ПМ_УТ_10_epf";	
			ИначеЕсли Найти(Метаданные.Имя, "УправлениеТорговлей")>0 И (Лев(Метаданные.Версия, 4) = "11.1" ИЛИ Лев(Метаданные.Версия, 4) = "11.2" ИЛИ Лев(Метаданные.Версия, 4) = "11.3") Тогда
				ИмяПМ = "ПМ_УТ_11_epf";
				
			//Управление Производственным Предприятием	
			ИначеЕсли Найти(Метаданные.Имя, "УправлениеПроизводственнымПредприятием")>0 И Лев(Метаданные.Версия, 3) = "1.3" Тогда
				ИмяПМ = "ПМ_БП_20_epf";	
				
			//ERP	
			ИначеЕсли Найти(Метаданные.Имя, "УправлениеПредприятием")>0 И Лев(Метаданные.Версия, 3) = "2.1" Тогда
				ИмяПМ = "ПМ_УТ_11_epf";
			КонецЕсли;
			
			Если ИмяПМ <> Неопределено Тогда
				ДД = ПолучитьМакет(ИмяПМ);
				ИмяФайлаСМодулем = КаталогВременныхФайлов()+"ПодключаемыйМодуль.epf";
				ДД.Записать(ИмяФайлаСМодулем);
				Результат = ВнешниеОбработки.Создать(ИмяФайлаСМодулем, Ложь);
			Иначе				
				Возврат Неопределено;
			КонецЕсли;
			
		ИначеЕсли мНастройки.МестонахождениеПодключаемогоМодуля = "Диск" Тогда
		
			Попытка
				Результат = ВнешниеОбработки.Создать(мНастройки.ПодключаемыйМодульПуть,Ложь);
			Исключение
				Возврат Неопределено;
			КонецПопытки;	
			
		ИначеЕсли мНастройки.МестонахождениеПодключаемогоМодуля = "Конфигурация" Тогда
			
			Результат = Обработки[мНастройки.ПодключаемыйМодульИмяОбработки].Создать();
			
		ИначеЕсли мНастройки.МестонахождениеПодключаемогоМодуля = "1С" Тогда
			
			// Имя реквизита лучше бы закинуть в настройки (визуально - на той же вкладке).
			
			Если ЗначениеЗаполнено(мНастройки.ПодключаемыйМодульСсылка) Тогда
				
				МетаданныеСправочника = мНастройки.ПодключаемыйМодульСсылка.Метаданные();
				
				Для Каждого ВозможноеИмяРеквизита Из ЭДО_Служебные_РазложитьСтрокуВМассивСлов("ХранилищеВнешнейОбработки,ХранилищеОбработки") Цикл
					// Пока что поиграем в угадайку.
					
					Если НЕ МетаданныеСправочника.Реквизиты.Найти(ВозможноеИмяРеквизита)=Неопределено Тогда
						
						ИмяФайла = ПолучитьИмяВременногоФайла();
						ДвоичныеДанные = мНастройки.ПодключаемыйМодульСсылка[ВозможноеИмяРеквизита].Получить();
						ДвоичныеДанные.Записать(ИмяФайла);
						
						Результат = ВнешниеОбработки.Создать(ИмяФайла, Ложь);
						УдалитьФайлы(ИмяФайла);
						
					КонецЕсли;
					
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;	
		
		Результат.ОсновнойМодуль = ЭтотОбъект;
			
		Если Не НеКэшировать Тогда
			ЭДО_Кэш_Поместить("ПодключаемыйМодуль",Результат);
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// инициализирует внешнюю обработку - типовой модуль Диадок для обычных форм
Процедура ИнициализацияТиповогоМодуляОФ(ТиповойМодульДиадока) Экспорт
	
	ТиповойМодульДиадока.ЗаполнитьПрофильКонфигурации();
	ТиповойМодульДиадока.ИнициализироватьМодулиЯдра();		
	ТиповойМодульДиадока.ИспользоватьПодсистемуКонтурDiadoc = Истина; //чтобы не создавать в базе дополнительные свойства для типового модуля
	ТиповойМодульДиадока.ОдинСАдаптер_Инициализировать();
	ТиповойМодульДиадока.ИспользоватьПодсистемуКонтурDiadoc = Ложь;
	ТиповойМодульДиадока.ЗапущенКакВнешнийМодуль = Истина;
	
КонецПроцедуры

// инициализирует внешнюю обработку - типовой модуль Диадок для управляемых форм
Процедура ИнициализацияТиповогоМодуляУФ(ТиповойМодульДиадока) Экспорт
	
	// с этим минимумом он уже взлетает
	ТиповойМодульДиадока.ПараметрыКлиентСервер = Новый Структура;
	
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("СинонимКонфигурации", Метаданные.Синоним);
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("ВерсияКонфигурации" , Метаданные.Версия);
	
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("РежимОтладкиСервера",	Ложь);
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("ИмяОбработки",			"___");
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("ПодключаемыйМодуль",	Новый Структура("ИспользоватьМодуль",Ложь));
	
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("ВременноеХранилище",	Новый Структура);
	
	ТиповойМодульДиадока.ПараметрыКлиентСервер.ВременноеХранилище.Вставить("АдресКэшаСервераНаВремяСеанса",	ПоместитьВоВременноеХранилище(Неопределено));
	ТиповойМодульДиадока.ПараметрыКлиентСервер.ВременноеХранилище.Вставить("АдресНеСуществующиеОбработки",	ПоместитьВоВременноеХранилище(Неопределено));
	ТиповойМодульДиадока.ПараметрыКлиентСервер.ВременноеХранилище.Вставить("АдресПодключенныеОбработки",	ПоместитьВоВременноеХранилище(Неопределено));
	ТиповойМодульДиадока.ПараметрыКлиентСервер.ВременноеХранилище.Вставить("АдресПодписантыОрганизаций", 	ПоместитьВоВременноеХранилище(Новый Массив));
	
	ТиповойМодульДиадока.ЗаполнитьМанифест(ТиповойМодульДиадока,"Платформа");
	
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("МаркерКонфигурации",	ТиповойМодульДиадока.МетодСервера(,"ПолучитьМаркерКонфигурации"));
	ТиповойМодульДиадока.ПараметрыКлиентСервер.Вставить("ИмяФормыИнтеграции",	ТиповойМодульДиадока.МетодСервера(,"ИмяФормыИнтеграции"));
	
КонецПроцедуры


// Выполняет код обработчика события ИмяСобытия в подключаемом модуле, если таковой там присутствует.
Функция ЭДО_ПодключаемыйМодуль_ОбработатьСобытие(ИмяСобытия,Параметры=Неопределено) Экспорт
	
	ПМ = ЭДО_ПодключаемыйМодуль();
	
	Если Не ПМ = Неопределено Тогда
		Возврат ПМ.ОбработатьСобытие(ИмяСобытия,Параметры);
	Иначе
		Возврат Неопределено;	
	КонецЕсли;
	
КонецФункции


// Возвращает объект ВнешнейОбработки, который прикидывается объектом ТабличныйДокумент и позволяет парсить печатные формы.
Функция ЭДО_Модуль_НовыйЭмуляторТабличногоДокумента() Экспорт
	
	Результат = Неопределено;
	
	Если ЭДО_Служебные_РежимОтладкиВключен() Тогда
		
		Результат = ВнешниеОбработки.Создать(ЭДО_Модуль_КаталогОбработки()+"ЭмуляторТабличногоДокумента.epf",Ложь);
		
	Иначе
		
		ИмяВременногоФайла = ПолучитьИмяВременногоФайла("epf");
		ПолучитьМакет("ЭмуляторТабличногоДокумента_epf").Записать(ИмяВременногоФайла);
		
		Результат = ВнешниеОбработки.Создать(ИмяВременногоФайла,Ложь);
		
		УдалитьФайлы(ИмяВременногоФайла);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Просто пишем что-то куда-то для отладки
Процедура ЭДО_Служебные_ЗаписьЛога(Текст)

	ЗТ = Новый ЗаписьТекста;
	ЗТ.Открыть("c:\temp\DD_API_eventlist.txt",,, Истина);
	ЗТ.ЗаписатьСтроку(Текст);
	ЗТ.Закрыть();

КонецПроцедуры

// Проверяет, чем является Нечто: ссылкой или объектом
Функция ЭДО_Служебные_ЭтоОбъект(Нечто)
	
	Результат = Ложь;
	
	Если НЕ Нечто = Неопределено
	   И НЕ XMLТипЗнч(Нечто) = Неопределено Тогда
		ТипЗначенияСтрокой = XMLТипЗнч(Нечто).ИмяТипа;
		Результат = Найти(ТипЗначенияСтрокой, "Object.") > 0;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции	

// Выбирает все поля из временной таблицы ИмяВТ запроса Запрос, и возвращает их в виде ТаблицыЗначений
//используется для отладки
Функция ЭДО_Служебные_ПросмотретьВременнуюТаблицуЗапроса(Запрос,ИмяВТ) Экспорт
	ТекстЗапроса_Исходный = Запрос.Текст;
	Запрос.Текст = "Выбрать * Из "+ИмяВТ;
	Попытка
		ТЗ = Запрос.Выполнить().Выгрузить();
	Исключение
		//например, указали не то имя ВТ 
	КонецПопытки;	
	
	Запрос.Текст = ТекстЗапроса_Исходный;
	Возврат ТЗ;
КонецФункции	

Функция ЭДО_Служебные_СтрокаТаблицыЗначенийВСтруктуру(СтрокаТЗ) Экспорт
	
	Результат = Новый Структура;
	
	Для Каждого Колонка Из СтрокаТЗ.Владелец().Колонки Цикл
		Результат.Вставить(Колонка.Имя,СтрокаТЗ[Колонка.Имя]);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Поиграемся с подсказкой
Функция ЭДО_Служебные_ПримерКода(ИмяРаздела) Экспорт
	
	Макет = ПолучитьМакет("ШаблоныКода");
	
	Попытка
		Область = Макет.ПолучитьОбласть(ИмяРаздела);
		Если Не Область=Неопределено Тогда
			Возврат Область//.ПолучитьТекст();
		КонецЕсли;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
КонецФункции	

// Клиентская процедура
Процедура ЭДО_Служебные_ВставитьПримерКода(ТекстовыйДокумент,ИмяРаздела) Экспорт
	
	#Если Клиент Тогда
	Пример = ЭДО_Служебные_ПримерКода(ИмяРаздела);
	
	Если Не Пример=Неопределено Тогда
		ТекстовыйДокумент.Вывести(Пример);
	Иначе
		Сообщить("Нет примера для раздела: "+ИмяРаздела);
	КонецЕсли;	
	#КонецЕсли

КонецПроцедуры

// Прослойка для сериализации в JSON с учетом старых платформ
// TODO упаковать вместе с парсером
Функция ЭДО_Служебные_СтруктураВJSON(Структура) Экспорт
	
	Если ПлатформаСтаршеЧем_8_3_6_1977() Тогда
		
		// Под старые платформы придется эмулировать функцию ЗаписатьJSON
		// Пока утащил с Инфостарта, надо оптимизировать (хотя бы перевести на ЗаписьXML)
		// Исходный адрес публикации: http://infostart.ru/public/61194/
		// Автору - большое спасибо!
		Возврат врем_json_НеФорматированныйJSON(Структура);
		
	Иначе
		
		Запись = Вычислить("Новый ЗаписьJSON");
		Запись.УстановитьСтроку();
		
		Выполнить("ЗаписатьJSON(Запись,Структура)");
		
		Результат = Запись.Закрыть();
		
	КонецЕсли;
	
	
	Возврат Результат;
	
КонецФункции

//В функции конструкции условий расставлены по частоте их использования.
//Если кому нибудь удастся более оптимально (в смысле быстродействия) написать,
//то просьба сообщить мне на bigb.forum@gmail.com
Функция врем_json_НеФорматированныйJSON(Значение)
	Разделитель="";
	
	ТипЗн=ТипЗнч(Значение);

	Если ТипЗн=Тип("Строка") Тогда
		Стр=""""+врем_json_Экранировать(Значение)+""""

	ИначеЕсли ТипЗн=Тип("Число") ИЛИ ТипЗнч(Значение)=Тип("Булево") Тогда
		Стр=XMLСтрока(Значение)

	ИначеЕсли ТипЗн=Тип("Дата") Тогда
		Стр=""""+?(ЗначениеЗаполнено(Значение),XMLСтрока(Значение),"")+""""

	ИначеЕсли ТипЗн=Тип("Структура") ИЛИ ТипЗн=Тип("Соответствие") Тогда
		Стр="{";
		Для Каждого Параметр Из Значение Цикл
			Стр=Стр+Разделитель+Символы.ПС+""""+Параметр.Ключ+""":"+врем_json_НеФорматированныйJSON(Параметр.Значение);
			Разделитель=","
		КонецЦикла;
		Стр=Стр+Символы.ПС+"}";

	ИначеЕсли ТипЗн=Тип("Массив") Тогда
		Стр="[";
		Для Каждого Элемент Из Значение Цикл
			Стр=Стр+Разделитель+Символы.ПС+врем_json_НеФорматированныйJSON(Элемент);
			Разделитель=","
		КонецЦикла;
		Стр=Стр+Символы.ПС+"]";

	ИначеЕсли ТипЗн=Тип("ТаблицаЗначений") Тогда
		Колонки=Значение.Колонки;
		Массив=Новый Массив;
		Для Каждого СтрокаТЗ Из Значение Цикл
			Структура=Новый Структура;
			Для Каждого Колонка Из Колонки Цикл
				Структура.Вставить(Колонка.Имя,СтрокаТЗ[Колонка.Имя])
			КонецЦикла;
			Массив.Добавить(Структура);
		КонецЦикла;
		Стр=врем_json_НеФорматированныйJSON(Массив)

	ИначеЕсли Значение=Неопределено Тогда
		Стр="null"

	Иначе
		Стр=""""+врем_json_Экранировать(Значение)+""""
	КонецЕсли;

	Возврат Стр
КонецФункции

//Экранирует недопустимые символы
Функция врем_json_Экранировать(Стр)
	Х=СтрЗаменить(Стр,"""","\""");
	//Х=СтрЗаменить(Х,"'","\'"); //??? Не уверен в этой строке. Кто нибудь может подтвердить или опровергнуть нужность этой строки.
	Х=СтрЗаменить(Х,"\","\\");
	Х=СтрЗаменить(Х,"/","\/"); //Тут тоже не уверен, но пока оставлю.
	Х=СтрЗаменить(Х,Символ(8),"\b");
	Х=СтрЗаменить(Х,Символы.ПФ,"\f");
	Х=СтрЗаменить(Х,Символы.ПС,"\n");
	Х=СтрЗаменить(Х,Символы.ВК,"\r");
	Х=СтрЗаменить(Х,Символы.ВТаб,"\t");
	Возврат Х
КонецФункции

// Возвращает каталог, в котором расположена запущенная внешняя обработка.
// Если обработка встроена в конфигурацию, выдаст соответствующее исключение
Функция ЭДО_Модуль_КаталогОбработки() Экспорт
	
	попытка
		Ф = Новый Файл(Вычислить("ЭтотОбъект.ИспользуемоеИмяФайла"));
		Возврат Ф.Путь;
	Исключение
		ВызватьИсключение "Отлаживать можно только внешнюю обработку";
	КонецПопытки;
	
КонецФункции

Функция ЭДО_Модуль_ЭтоУправляемаяФорма(Форма) Экспорт
	
	Возврат (СтрДлина(ТипЗнч(Форма))>5); //TODO посмотреть еще раз, в чем была проблема
	
КонецФункции

Функция ЭДО_Служебные_МассивВСтроку(МассивСтрок, ЗНАЧ Разделитель = Неопределено) Экспорт
	
	Результат = "";
	
	Если Разделитель=Неопределено Тогда
		Разделитель = Символы.ПС;
	КонецЕсли;
	
	Для Каждого Эл Из МассивСтрок Цикл
		Результат = Результат + ?(СтрДлина(Результат)=0, "", Разделитель) + Эл;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Точка входа для регламентного задания.
// В подключаемом модуле на такое событие можно повесить любую логику.
// Например, авторизацию под логином/паролем, загрузку и анализ новых сообщений, согласование документов для облачной подписи и т.д.
Функция ЭДО_ВыполнитьРегламентныеДействия(Параметры = Неопределено) Экспорт
	
	Если Не ЭДО_Модуль_Инициализировать().Успешно Тогда
		ВызватьИсключение "Не удалось инициализировать подсистему хранения данных";
	КонецЕсли;
	
	Возврат ЭДО_ПодключаемыйМодуль_ОбработатьСобытие("ВыполнитьРегламентныеДействия", Параметры);
	
КонецФункции

//}		СЛУЖЕБНЫЕ


//**************************************
//{		МОДУЛЬ
//

//{ Синхронизация контрагентов
	
Процедура ВыполнитьСинхронизациюКонтрагентовОрганизаций() Экспорт
	
	Если СоответствиеТокеновBoxID.Количество() = 0 Тогда
		ВызватьИсключение "Не авторизован";
	КонецЕсли;
	
	Таблицы = ЭДО_Модуль_ПодготовитьДанныеЮрФизЛиц();
	
	СинхронизироватьСправочникЮрФизЛиц(Таблицы.ТаблицаОрганизаций,					"Организации");
	СинхронизироватьСправочникЮрФизЛиц(Таблицы.ТаблицаКонтрагентов,					"Контрагенты");
	
	Если НЕ ЭДО_Использовать1СЭДО() Тогда
		
		СинхронизироватьСправочникЮрФизЛиц(Таблицы.ТаблицаПодразделенийОрганизаций,		"ПодразделенияОрганизаций");
		СинхронизироватьСправочникЮрФизЛиц(Таблицы.ТаблицаПодразделенийКонтрагентов,	"ПодразделенияКонтрагентов");
		
		ЭДО_Модуль_СинхронизироватьСтатусыКонтрагентов(Таблицы.ТаблицаКонтрагентов);
		
	КонецЕсли;

КонецПроцедуры

Функция ЭДО_Модуль_ПодготовитьДанныеЮрФизЛиц()
	
	ДанныеОрганизаций = ЭДО_СерверДиадок_ПолучитьСписокДоступныхОрганизаций();
	
	КолонкиКонтрагентов					= "ID, Наименование, ИНН, КПП, ID_Организации, Статус, ИдентификаторУчастникаЭДО";
	КолонкиПодразделенийКонтрагентов	= "ID, Наименование, Аббревиатура, ИНН, КПП, ID_ВладелецПодразделения, ID_РодительПодразделения";
	
	ТаблицаКонтрагентов					= Новый ТаблицаЗначений;
	ЭДО_Служебные_ДобавитьКолонкиВТаблицуЗначений(ТаблицаКонтрагентов, КолонкиКонтрагентов, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250)));
	
	ТаблицаПодразделенийКонтрагентов	= Новый ТаблицаЗначений;
	ЭДО_Служебные_ДобавитьКолонкиВТаблицуЗначений(ТаблицаПодразделенийКонтрагентов, КолонкиПодразделенийКонтрагентов, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250)));
	
	Для Каждого Стр Из ДанныеОрганизаций.ТаблицаОрганизаций Цикл
		ЭДО_СерверДиадок_ПолучитьСписокКонтрагентовОрганизации(Стр.OrgID, ТаблицаКонтрагентов, ТаблицаПодразделенийКонтрагентов, Стр.ID, Стр.BoxId);
	КонецЦикла;
	
	Таблицы = Новый Структура;
	Таблицы.Вставить("ТаблицаОрганизаций",					ДанныеОрганизаций.ТаблицаОрганизаций);
	Таблицы.Вставить("ТаблицаПодразделенийОрганизаций",		ДанныеОрганизаций.ТаблицаПодразделенийОрганизаций);
	Таблицы.Вставить("ТаблицаКонтрагентов",					ТаблицаКонтрагентов);
	Таблицы.Вставить("ТаблицаПодразделенийКонтрагентов",	ТаблицаПодразделенийКонтрагентов);
	
	Возврат Таблицы;
	
КонецФункции
	
Функция ЭДО_СерверДиадок_ПолучитьСписокДоступныхОрганизаций()
	
	КолонкиОрганизаций		= "ID, Наименование, ИНН, КПП, OrgId, BoxId, ИдентификаторУчастникаЭДО";
	КолонкиПодразделений	= "ID, Наименование, Аббревиатура, ИНН, КПП, ID_ВладелецПодразделения, ID_РодительПодразделения";
					
	ТаблицаОрганизаций = Новый ТаблицаЗначений;
	ЭДО_Служебные_ДобавитьКолонкиВТаблицуЗначений(ТаблицаОрганизаций, КолонкиОрганизаций, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250)));
	
	ТаблицаПодразделенийОрганизаций = Новый ТаблицаЗначений;
	ЭДО_Служебные_ДобавитьКолонкиВТаблицуЗначений(ТаблицаПодразделенийОрганизаций, КолонкиПодразделений, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250)));
	
	Для Каждого текСоответствиеТокеновBoxID Из СоответствиеТокеновBoxID Цикл
		
		Ответ = DD_API_GetMyOrganizations(текСоответствиеТокеновBoxID.Ключ);
		OrganizationList = ЭДО_Транспорт_РазобратьОтветAPI(Ответ);
		
		Для Каждого Organization Из OrganizationList.Organizations Цикл
			
			Если ТаблицаОрганизаций.Найти(Organization.OrgId) = Неопределено Тогда
				
				НоваяСтрока = ТаблицаОрганизаций.Добавить();
				ЗаполнитьСтрокуКонтрагентаПриСинхронизации(НоваяСтрока, Organization);
				
				НоваяСтрока.OrgId						= Organization.OrgId;  // ID именно организации, не ящика
				НоваяСтрока.BoxId						= текСоответствиеТокеновBoxID.Ключ; //запоминаем boxId серта, по которому получили данные организации
				
				ЗаполнитьТаблицуПодразделений(ТаблицаПодразделенийОрганизаций, Organization.Departments, НоваяСтрока.ИНН, НоваяСтрока.ID, "");
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
		
	Возврат Новый Структура("ТаблицаОрганизаций, ТаблицаПодразделенийОрганизаций", ТаблицаОрганизаций, ТаблицаПодразделенийОрганизаций);
	
КонецФункции

Процедура ЭДО_СерверДиадок_ПолучитьСписокКонтрагентовОрганизации(ОргID, ТаблицаКонтрагентов, ТаблицаПодразделенийКонтрагентов, ОргBoxId, BoxId)
	
	afterIndexKey = "";
	
	Пока Истина Цикл
		
		Ответ = DD_API_GetCounteragents(ОргID, "IsMyCounteragent", afterIndexKey, BoxId);  // загружаем только тех, кто указал согласие обмениваться документами
		
		CounteragentList = ЭДО_Транспорт_РазобратьОтветAPI(Ответ);
		
		Для Каждого Counteragent Из CounteragentList.Counteragents Цикл
			
			НоваяСтрока = ТаблицаКонтрагентов.Добавить();
			
			ЗаполнитьСтрокуКонтрагентаПриСинхронизации(НоваяСтрока, Counteragent.Organization);
			
			// следующие 2 поля пригодятся при обновлении статусов
			НоваяСтрока.ID_Организации	= ОргBoxId;
			НоваяСтрока.Статус			= Counteragent.CurrentStatus;
			
			ЗаполнитьТаблицуПодразделений(ТаблицаПодразделенийКонтрагентов, Counteragent.Organization.Departments, НоваяСтрока.ИНН, НоваяСтрока.ID, "");
			
			afterIndexKey = Counteragent.IndexKey;
			
		КонецЦикла;
		
		Если CounteragentList.Counteragents.Количество()=0 Тогда
			Прервать;  // больше контрагентов не будет
		КонецЕсли;
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьСтрокуКонтрагентаПриСинхронизации(СтрокаКонтрагента, Organization)
	
	СтрокаКонтрагента.ID						= Organization.boxes[0].boxID;  // legacy

	СтрокаКонтрагента.Наименование				= Organization.FullName;
	СтрокаКонтрагента.ИНН						= Organization.INN;
	СтрокаКонтрагента.КПП						= Organization.KPP;
	СтрокаКонтрагента.ИдентификаторУчастникаЭДО	= Organization.FnsParticipantId;
	
КонецПроцедуры

Процедура ЗаполнитьТаблицуПодразделений(ТаблицаПодразделений, Коллекция, ИНН, ID_Владельца, ID_Родителя)
	
	Для Каждого Department Из Коллекция Цикл
		
		НоваяСтрока = ТаблицаПодразделений.Добавить();
		
		НоваяСтрока.ID							= department.DepartmentId;
		НоваяСтрока.Наименование				= department.Name;
		
		НоваяСтрока.ИНН							= ИНН;
		НоваяСтрока.ID_ВладелецПодразделения	= ID_Владельца;
		Если department.ParentDepartmentId <> "00000000-0000-0000-0000-000000000000" Тогда
			НоваяСтрока.ID_РодительПодразделения	= department.ParentDepartmentId;
		КонецЕсли;
		
		department.Свойство("Abbreviation", НоваяСтрока.Аббревиатура);
		
		Если Department.Свойство("Kpp") Тогда
			// http://api-docs.diadoc.ru/ru/latest/proto/Department.html - может отсутствовать
			НоваяСтрока.КПП = department.KPP;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция DD_API_GetMyOrganizations(boxID)
	
	//http://api-docs.diadoc.ru/ru/latest/http/GetMyOrganizations.html
	
	Возврат ЭДО_Транспорт_ВызватьМетодAPI("/GetMyOrganizations", "GET",,,boxID);
	
КонецФункции

Функция DD_API_GetCounteragents(myOrgId, counteragentStatus="", afterIndexKey="", boxId="")
	
	//http://api-docs.diadoc.ru/ru/latest/http/GetCounteragents.html
	
	_Параметры = "?myOrgId="+myOrgId;
	
	Если Не ПустаяСтрока(counteragentStatus) Тогда
		_Параметры = _Параметры + "&counteragentStatus="+counteragentStatus;
	КонецЕсли;

	Если Не ПустаяСтрока(afterIndexKey) Тогда
		_Параметры = _Параметры + "&afterIndexKey="+afterIndexKey;
	КонецЕсли;
	
	Возврат ЭДО_Транспорт_ВызватьМетодAPI("/V2/GetCounteragents" + _Параметры, "GET",,, boxId);
	
КонецФункции

Функция DD_API_GetCounteragent(myOrgId, counteragentOrgId)
	
	//http://api-docs.diadoc.ru/ru/latest/http/GetCounteragent.html
	
	_Параметры = "?myOrgId=" + myOrgId + "&counteragentOrgId=" + counteragentOrgId;
	
	Возврат ЭДО_Транспорт_ВызватьМетодAPI("/V2/GetCounteragent" + _Параметры, "GET");
	
КонецФункции

// Обновляет справочник подразделений для выбранного контрагента с сервера Диадок.
// А также его реквизиты
Процедура ЭДО_ОбновитьДанныеКонтрагента(КонтрагентДД) Экспорт
	
	Если ЭДО_Использовать1СЭДО() Тогда
		Возврат;  // пока не реализовано
	КонецЕсли;
	
	КолонкиКонтрагентов					= "ID, Наименование, ИНН, КПП, ID_Организации, Статус, ИдентификаторУчастникаЭДО";
	КолонкиПодразделенийКонтрагентов	= "ID, Наименование, Аббревиатура, ИНН, КПП, ID_ВладелецПодразделения, ID_РодительПодразделения";
	
	ТаблицаПодразделенийКонтрагентов	= Новый ТаблицаЗначений;
	ЭДО_Служебные_ДобавитьКолонкиВТаблицуЗначений(ТаблицаПодразделенийКонтрагентов, КолонкиПодразделенийКонтрагентов, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250)));
	
	ТаблицаКонтрагентов	= Новый ТаблицаЗначений;
	ЭДО_Служебные_ДобавитьКолонкиВТаблицуЗначений(ТаблицаКонтрагентов, КолонкиКонтрагентов, Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(250)));
	
	boxInfo = ЭДО_Транспорт_ВызватьМетодAPI("/GetBox?boxId=" + КонтрагентДД.ID, "GET");
	РазобранныйОтвет = ЭДО_Транспорт_РазобратьОтветAPI(boxInfo);
	
	// Обновим данные самого контрагента
	НоваяСтрока = ТаблицаКонтрагентов.Добавить();
	ЗаполнитьСтрокуКонтрагентаПриСинхронизации(НоваяСтрока, РазобранныйОтвет.Organization);
	СинхронизироватьСправочникЮрФизЛиц(ТаблицаКонтрагентов, "Контрагенты");
	
	// И теперь - подразделения контрагента
	ЗаполнитьТаблицуПодразделений(ТаблицаПодразделенийКонтрагентов, РазобранныйОтвет.Organization.Departments, КонтрагентДД.ИНН, КонтрагентДД.ID, "");
	СинхронизироватьСправочникЮрФизЛиц(ТаблицаПодразделенийКонтрагентов, "ПодразделенияКонтрагентов");
		
КонецПроцедуры

Процедура СинхронизироватьСправочникЮрФизЛиц(ДанныеСправочника, ИмяСправочника)
	
	Если ЭДО_Использовать1СЭДО() Тогда
		СинхронизироватьСправочникЮрФизЛиц_1СЭДО(ДанныеСправочника, ИмяСправочника);
		Возврат;
	КонецЕсли;
	
	ЭДО_Служебные_ПоказатьСостояние("Синхронизируем справочник " + ИмяСправочника);
	
	ЭтоПодразделение = (Найти(ИмяСправочника,"Подразделения")>0);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Таб.ID КАК ID,
	|	Таб.Наименование КАК Наименование,
	|	Таб.ИНН КАК ИНН,
	|	Таб.ИдентификаторУчастникаЭДО КАК ИдентификаторУчастникаЭДО,
	|	Таб.Аббревиатура КАК Аббревиатура,
	|	Таб.ID_ВладелецПодразделения КАК ID_ВладелецПодразделения,
	|	Таб.ID_РодительПодразделения КАК ID_РодительПодразделения,
	|	Таб.КПП КАК КПП
	|ПОМЕСТИТЬ ВремТаб
	|ИЗ
	|	&Таблица КАК Таб
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Диадок_ЮрФизЛица.Ссылка,
	|	ВТ.ID КАК ID,
	|	ВТ.ИНН КАК ИНН_ДД,
	|	Диадок_ЮрФизЛица.ИНН КАК ИНН,
	|	ВТ.КПП КАК КПП_ДД,
	|	Диадок_ЮрФизЛица.КПП КАК КПП,
	|	ВТ.Наименование КАК Наименование_ДД,
	|	Диадок_ЮрФизЛица.Наименование КАК Наименование,
	|	ВТ.Аббревиатура КАК Аббревиатура_ДД,
	|	Диадок_ЮрФизЛица.Аббревиатура КАК Аббревиатура,
	|	ВТ.ИдентификаторУчастникаЭДО КАК ИдентификаторУчастникаЭДО_ДД,
	|	Диадок_ЮрФизЛица.ИдентификаторУчастникаЭДО КАК ИдентификаторУчастникаЭДО,
	|	ВТ.ID_ВладелецПодразделения КАК ID_ВладелецПодразделения_ДД,
	|	Диадок_ЮрФизЛица.ID_ВладелецПодразделения КАК ID_ВладелецПодразделения,
	|	ВТ.ID_РодительПодразделения КАК ID_РодительПодразделения_ДД,
	|	Диадок_ЮрФизЛица.ID_РодительПодразделения КАК ID_РодительПодразделения
	|ИЗ
	|	ВремТаб КАК ВТ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Диадок_ЮрФизЛица КАК Диадок_ЮрФизЛица
	|		ПО (Диадок_ЮрФизЛица.ID = ВТ.ID)
	|			И (Диадок_ЮрФизЛица.ИмяСправочника = &ИмяСправочника)"
	);
	
	Если Не ЭтоПодразделение Тогда
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,	"Таб.Аббревиатура",				"&ПустаяСтрока");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,	"Таб.ID_ВладелецПодразделения",	"&ПустаяСтрока");
		Запрос.Текст = СтрЗаменить(Запрос.Текст,	"Таб.ID_РодительПодразделения",	"&ПустаяСтрока");
		
	Иначе
		
		Запрос.Текст = СтрЗаменить(Запрос.Текст,	"Таб.ИдентификаторУчастникаЭДО","&ПустаяСтрока");
		
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Таблица",		ДанныеСправочника);
	Запрос.УстановитьПараметр("ИмяСправочника",	ИмяСправочника);
	Запрос.УстановитьПараметр("ПустаяСтрока",	"");
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ЕстьИзменения = Ложь;
		
		// Проверим, совпадают ли основные реквизиты на сервере и в базе: ИНН, КПП, Наименование
		Если 	НЕ СокрЛП(Выборка.ИНН)			= СокрЛП(Выборка.ИНН_ДД)
			Или НЕ СокрЛП(Выборка.КПП)			= СокрЛП(Выборка.КПП_ДД)
			Или НЕ СокрЛП(Выборка.Наименование)	= СокрЛП(Выборка.Наименование_ДД) Тогда
			
			ЕстьИзменения = Истина;
			
		ИначеЕсли ЭтоПодразделение Тогда
			
			// У подразделений дополнительно может измениться родительское подразделение или аббревиатура (редактируется в вебе)
			Если 	НЕ СокрЛП(Выборка.Аббревиатура)				= СокрЛП(Выборка.Аббревиатура_ДД)
				Или НЕ СокрЛП(Выборка.ID_ВладелецПодразделения)	= СокрЛП(Выборка.ID_ВладелецПодразделения_ДД)
				Или НЕ СокрЛП(Выборка.ID_РодительПодразделения)	= СокрЛП(Выборка.ID_РодительПодразделения_ДД)Тогда
				ЕстьИзменения = Истина;
			КонецЕсли;
			
		ИначеЕсли НЕ СокрЛП(Выборка.ИдентификаторУчастникаЭДО)	= СокрЛП(Выборка.ИдентификаторУчастникаЭДО_ДД) Тогда
			
			ЕстьИзменения = Истина;
			
		КонецЕсли;
		
		Если НЕ ЕстьИзменения Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
			ЮрЛицо = Выборка.Ссылка.ПолучитьОбъект();
		Иначе
			ЮрЛицо = Справочники.Диадок_ЮрФизЛица.СоздатьЭлемент();
		КонецЕсли;
		
		ЮрЛицо.ИмяСправочника	= ИмяСправочника;
		ЮрЛицо.ID				= СокрЛП(Выборка.ID);	
		ЮрЛицо.Наименование		= СокрЛП(Выборка.Наименование_ДД);
		ЮрЛицо.ИНН				= СокрЛП(Выборка.ИНН_ДД);
		ЮрЛицо.КПП				= СокрЛП(Выборка.КПП_ДД);
		
		Если ЭтоПодразделение Тогда
			
			ЮрЛицо.Аббревиатура				= СокрЛП(Выборка.Аббревиатура_ДД);
			ЮрЛицо.ID_ВладелецПодразделения	= СокрЛП(Выборка.ID_ВладелецПодразделения_ДД);
			ЮрЛицо.ID_РодительПодразделения	= СокрЛП(Выборка.ID_РодительПодразделения_ДД);
			
		Иначе
			
			ЮрЛицо.ИдентификаторУчастникаЭДО = СокрЛП(Выборка.ИдентификаторУчастникаЭДО_ДД);
		
		КонецЕсли;
		
		ЮрЛицо.Записать();
			
	КонецЦикла;
	
КонецПроцедуры

Процедура СинхронизироватьСправочникЮрФизЛиц_1СЭДО(Данные, ИмяСправочника)
	
	ЭДО_Служебные_ПоказатьСостояние("Синхронизируем справочник "+ИмяСправочника);
		
	Если Данные.Количество()=0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Данные) = Тип("Массив") Тогда
		Таблица = врем_МассивСтруктур_2_ТаблицаЗначений(Данные);
	Иначе
		Таблица = Данные;	
	КонецЕсли;
		
	Запрос = Новый Запрос;	
	Запрос.УстановитьПараметр("Таблица", Таблица);
	Запрос.УстановитьПараметр("IDОператора1СЭДО", ЭДО_IDОператора1СЭДО());
	
	Если ИмяСправочника = "Организации" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таб.ID КАК ID,
		|	Таб.Наименование КАК Наименование,
		|	Таб.ИНН КАК ИНН,
		|	Таб.КПП КАК КПП
		|ПОМЕСТИТЬ ВремТаб
		|ИЗ
		|	&Таблица КАК Таб
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПрофилиНастроекЭДО.Ссылка,
		|	ВТ.ID КАК ID,
		|	ВТ.ИНН КАК ИНН_ДД,
		|	ПрофилиНастроекЭДО.ОператорЭДОИНН КАК ИНН,
		|	ВТ.КПП КАК КПП_ДД,
		|	ПрофилиНастроекЭДО.ОператорЭДОКПП КАК КПП,
		|	ВТ.Наименование КАК Наименование_ДД,
		|	ПрофилиНастроекЭДО.Наименование КАК Наименование
		|ИЗ
		|	ВремТаб КАК ВТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
		|		ПО ((ВЫРАЗИТЬ(ВТ.ID КАК СТРОКА(50))) = (ВЫРАЗИТЬ(ПрофилиНастроекЭДО.ИдентификаторОрганизации КАК СТРОКА(50))))
		|			И ((ВЫРАЗИТЬ(ПрофилиНастроекЭДО.ОператорЭДО КАК СТРОКА(15))) = &IDОператора1СЭДО)";		
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если СокрЛП(Выборка.ИНН) <> СокрЛП(Выборка.ИНН_ДД)
				ИЛИ СокрЛП(Выборка.КПП) <> СокрЛП(Выборка.КПП_ДД)
				ИЛИ СокрЛП(Выборка.Наименование) <> СокрЛП(Выборка.Наименование_ДД) Тогда
				
				Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
					ЭлементОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Иначе
					ЭлементОбъект = Справочники.ПрофилиНастроекЭДО.СоздатьЭлемент();
					ЭлементОбъект.УстановитьНовыйКод();
				КонецЕсли;
				
				ЭлементОбъект.Наименование				= СокрЛП(Выборка.Наименование_ДД);
				ЭлементОбъект.ОператорЭДО				= ЭДО_IDОператора1СЭДО();
				ЭлементОбъект.ОператорЭДОИд				= ЭДО_Служебные_КаноническийГуид(СокрЛП(Выборка.ID));
				ЭлементОбъект.ИдентификаторОрганизации	= СокрЛП(Выборка.ID);
				ЭлементОбъект.ОператорЭДОИНН			= СокрЛП(Выборка.ИНН_ДД);
				ЭлементОбъект.ОператорЭДОКПП			= СокрЛП(Выборка.КПП_ДД);
								
				ЭлементОбъект.ОбменДанными.Загрузка = Истина;
				ЭлементОбъект.Записать();
				
			КонецЕсли;		
			
		КонецЦикла;
		
	ИначеЕсли ИмяСправочника = "Контрагенты" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	Таб.ID КАК ID,
		|	Таб.ID_Организации КАК ID_Организации,
		|	Таб.Наименование КАК Наименование,
		|	Таб.ИНН КАК ИНН,
		|	Таб.КПП КАК КПП,
		|	Таб.Статус КАК Статус
		|ПОМЕСТИТЬ ВремТаб
		|ИЗ
		|	&Таблица КАК Таб
		|
		|ИНДЕКСИРОВАТЬ ПО
		|	ID
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СоглашенияОбИспользованииЭД.Ссылка,
		|	ВТ.ID КАК ID,
		|	ВТ.ID_Организации КАК ID_Организации,
		|	ВТ.Наименование КАК Наименование_ДД,
		|	ВТ.Статус,
		|	ВТ.ИНН,
		|	ВТ.КПП,
		|	СоглашенияОбИспользованииЭД.Наименование КАК Наименование,
		|	СоглашенияОбИспользованииЭД.ПрофильНастроекЭДО КАК ТекущийПрофильНастроекЭДО,
		|	СоглашенияОбИспользованииЭД.Комментарий
		|ПОМЕСТИТЬ ВТ_Данные
		|ИЗ
		|	ВремТаб КАК ВТ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
		|		ПО ((ВЫРАЗИТЬ(ВТ.ID КАК СТРОКА(50))) = (ВЫРАЗИТЬ(СоглашенияОбИспользованииЭД.ИдентификаторКонтрагента КАК СТРОКА(50))))
		|			И ((ВЫРАЗИТЬ(ВТ.ID_Организации КАК СТРОКА(50))) = (ВЫРАЗИТЬ(СоглашенияОбИспользованииЭД.ИдентификаторОрганизации КАК СТРОКА(50))))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_Данные.Ссылка,
		|	ВТ_Данные.ID,
		|	ВТ_Данные.ID_Организации,
		|	ВТ_Данные.Наименование_ДД,
		|	ВТ_Данные.Наименование,
		|	ВТ_Данные.ТекущийПрофильНастроекЭДО,
		|	ВТ_Данные.Статус,
		|	ВТ_Данные.Комментарий КАК ИНН_КПП,
		|	ВТ_Данные.ИНН КАК ИНН_ДД,
		|	ВТ_Данные.КПП КАК КПП_ДД,
		|	(ВЫРАЗИТЬ(ВТ_Данные.ИНН + ""  "" КАК СТРОКА(12))) + ВТ_Данные.КПП КАК ИНН_КПП_ДД,
		|	ПрофилиНастроекЭДО.Ссылка КАК ПрофильНастроекЭДО
		|ИЗ
		|	ВТ_Данные КАК ВТ_Данные
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
		|		ПО ((ВЫРАЗИТЬ(ВТ_Данные.ID_Организации КАК СТРОКА(50))) = (ВЫРАЗИТЬ(ПрофилиНастроекЭДО.ИдентификаторОрганизации КАК СТРОКА(50))))";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			Если СокрЛП(Выборка.Наименование) <> СокрЛП(Выборка.Наименование_ДД)
				ИЛИ СокрЛП(Выборка.ТекущийПрофильНастроекЭДО) <> СокрЛП(Выборка.ПрофильНастроекЭДО)
				ИЛИ СокрЛП(Выборка.ИНН_КПП_ДД) <> СокрЛП(Выборка.ИНН_КПП) Тогда
				
				Если ЗначениеЗаполнено(Выборка.Ссылка) Тогда
					ЭлементОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Иначе
					ЭлементОбъект = Справочники.СоглашенияОбИспользованииЭД.СоздатьЭлемент();
					ЭлементОбъект.УстановитьНовыйКод();
				КонецЕсли;
				
				ЭлементОбъект.Наименование				= СокрЛП(Выборка.Наименование_ДД);
				ЭлементОбъект.ИдентификаторОрганизации	= СокрЛП(Выборка.ID_Организации);
				ЭлементОбъект.ИдентификаторКонтрагента	= СокрЛП(Выборка.ID);
				ЭлементОбъект.ПрофильНастроекЭДО		= Выборка.ПрофильНастроекЭДО;				
				ЭлементОбъект.СтатусПодключения			= ПолучитьСтатусКонтрагента_1СЭДО(СокрЛП(Выборка.Статус));	
				ЭлементОбъект.Комментарий				= СокрЛП(Выборка.ИНН_КПП_ДД);
				
				ЭлементОбъект.ОбменДанными.Загрузка = Истина;
				ЭлементОбъект.Записать();
				
			КонецЕсли;		
			
		КонецЦикла;
		
	КонецЕсли;	
	
КонецПроцедуры

// Записывает статусы контрагентов в базу
Процедура ЭДО_Модуль_СинхронизироватьСтатусыКонтрагентов(ДанныеКонтрагентов)
	
	ЭДО_Служебные_ПоказатьСостояние("Синхронизируем статусы контрагентов");

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Таб.ID,
	|	Таб.ID_Организации,
	|	Таб.Статус
	|ПОМЕСТИТЬ ВремТаб
	|ИЗ
	|	&ТаблицаКонтрагентов КАК Таб
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ТабДД.Статус,
	|	ТабДД.Контрагент,
	|	ТабДД.Организация,
	|	Диадок_НастройкиКонтрагентов.Значение КАК Статус1С
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВремТаб.Статус КАК Статус,
	|		ТабКонтрагентов.Ссылка КАК Контрагент,
	|		ТабОрганизаций.Ссылка КАК Организация
	|	ИЗ
	|		ВремТаб КАК ВремТаб
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Диадок_ЮрФизЛица КАК ТабОрганизаций
	|			ПО ВремТаб.ID_Организации = ТабОрганизаций.ID
	|				И (ТабОрганизаций.ИмяСправочника = ""Организации"")
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Диадок_ЮрФизЛица КАК ТабКонтрагентов
	|			ПО ВремТаб.ID = ТабКонтрагентов.ID
	|				И (ТабКонтрагентов.ИмяСправочника = ""Контрагенты"")) КАК ТабДД
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.Диадок_НастройкиКонтрагентов КАК Диадок_НастройкиКонтрагентов
	|		ПО ТабДД.Контрагент = Диадок_НастройкиКонтрагентов.Контрагент
	|			И ТабДД.Организация = Диадок_НастройкиКонтрагентов.Организация
	|			И Диадок_НастройкиКонтрагентов.ИмяСвойства = ""Статус""";
				   
	Запрос.УстановитьПараметр("ТаблицаКонтрагентов",	ДанныеКонтрагентов);
				   
	Выборка = Запрос.Выполнить().Выбрать();
	НаборЗаписей = РегистрыСведений.Диадок_НастройкиКонтрагентов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ИмяСвойства.Установить("Статус");
	
	Пока Выборка.Следующий() Цикл
		
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Организация = Выборка.Организация;
		НоваяЗапись.Контрагент = Выборка.Контрагент;
		НоваяЗапись.ИмяСвойства = "Статус";
		НоваяЗапись.Значение = Выборка.Статус;
			
	КонецЦикла;
	
	НаборЗаписей.Записать();

КонецПроцедуры

//} Синхронизация контрагентов


Функция ЭДО_ПодсистемаДиадок_Установлена()
	
	Если ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.Диадок_ДополнительныеСправочники")
		 И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.Диадок_ЮрФизЛица")
		 И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("РегистрыСведений.Диадок_НастройкиКонтрагентов")
		 И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.Диадок_Документы.Реквизиты.КонтрагентДиадок")
		 И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.Диадок_Документы.Реквизиты.ОрганизацияДиадок")
		 И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.Диадок_ПакетыДокументов.Реквизиты.КонтрагентДиадок")
		 
		 // Начиная с релиза 1_0_0, где требуется конвертация сохраненных данных
		 И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.Диадок_Документы.Реквизиты.ХранилищеОтвета")
		 И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.Диадок_ПакетыДокументов.Реквизиты.LetterId")
		 И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("РегистрыСведений.Диадок_СтатусыДокументов.Ресурсы.StatusText") Тогда
		 
		 Возврат Истина;
		 
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭДО_Подсистема1СЭДО_Установлена()
	
	Если  ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.ПрофилиНастроекЭДО")
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.ПрофилиНастроекЭДО.Реквизиты.ИдентификаторОрганизации")
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.ПрофилиНастроекЭДО.Реквизиты.ОператорЭДО")
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.ПрофилиНастроекЭДО.Реквизиты.ОператорЭДОИд")
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.ПрофилиНастроекЭДО.Реквизиты.ОператорЭДОИНН")
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.ПрофилиНастроекЭДО.Реквизиты.ОператорЭДОКПП")
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.ПрофилиНастроекЭДО.Реквизиты.Организация")
		
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.СоглашенияОбИспользованииЭД")
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.СоглашенияОбИспользованииЭД.Реквизиты.ИдентификаторКонтрагента")
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.СоглашенияОбИспользованииЭД.Реквизиты.ИдентификаторОрганизации")
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.СоглашенияОбИспользованииЭД.Реквизиты.Комментарий")
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.СоглашенияОбИспользованииЭД.Реквизиты.Контрагент")
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.СоглашенияОбИспользованииЭД.Реквизиты.ПрофильНастроекЭДО")
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.СоглашенияОбИспользованииЭД.Реквизиты.СтатусПодключения")
		 
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.ЭДПрисоединенныеФайлы")
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.ЭДПрисоединенныеФайлы.Реквизиты.ВладелецФайла")
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.ЭДПрисоединенныеФайлы.Реквизиты.ДатаСоздания")
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.ЭДПрисоединенныеФайлы.Реквизиты.ДополнительнаяИнформация")
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.ЭДПрисоединенныеФайлы.Реквизиты.НаправлениеЭД")
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.ЭДПрисоединенныеФайлы.Реквизиты.НомерЭД")
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.ЭДПрисоединенныеФайлы.Реквизиты.СтатусЭД")
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.ЭДПрисоединенныеФайлы.Реквизиты.УникальныйИД")
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.ЭДПрисоединенныеФайлы.Реквизиты.УникальныйИДВнешний")
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Справочники.ЭДПрисоединенныеФайлы.Реквизиты.ФайлХранилище")
				 
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Документы.ПакетЭД") 
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Документы.ПакетЭД.Реквизиты.ВнешнийУИД") 
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Документы.ПакетЭД.Реквизиты.Направление")
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Документы.ПакетЭД.Реквизиты.СтатусПакета") 
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Документы.ПакетЭД.Реквизиты.НастройкаЭДО")		
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Документы.ПакетЭД.Реквизиты.ПрофильНастроекЭДО")		
		
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("РегистрыСведений.СостоянияЭД") 
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("РегистрыСведений.СостоянияЭД.Измерения.СсылкаНаОбъект")
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("РегистрыСведений.СостоянияЭД.Ресурсы.ДействияСНашейСтороны")
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("РегистрыСведений.СостоянияЭД.Ресурсы.ДействияСоСтороныДругогоУчастника")
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("РегистрыСведений.СостоянияЭД.Ресурсы.ЭлектронныйДокумент")
		И ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("РегистрыСведений.СостоянияЭД.Реквизиты.Комментарий")
		
		Тогда Возврат Истина;
		 
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

Функция ЭДО_ПодсистемаДиадок_ЕстьДоступКДанным()
	
	РезультатПроверки = Новый Структура("Успешно,СписокОшибок");
	
	СписокОшибок = Новый СписокЗначений;
	
	ЭДО_Служебные_ПроверитьДоступностьОбъектаМетаданных(СписокОшибок, "Справочники.Диадок_ДополнительныеСправочники");
	ЭДО_Служебные_ПроверитьДоступностьОбъектаМетаданных(СписокОшибок, "Справочники.Диадок_ЮрФизЛица");
	ЭДО_Служебные_ПроверитьДоступностьОбъектаМетаданных(СписокОшибок, "РегистрыСведений.Диадок_НастройкиКонтрагентов");
	
	РезультатПроверки.Успешно = (СписокОшибок.Количество()=0);
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ЭДО_Подсистема1СЭДО_ЕстьДоступКДанным()
	
	РезультатПроверки = Новый Структура("Успешно,СписокОшибок");
	
	СписокОшибок = Новый СписокЗначений;
	
	ЭДО_Служебные_ПроверитьДоступностьОбъектаМетаданных(СписокОшибок, "Справочники.ПрофилиНастроекЭДО");
	ЭДО_Служебные_ПроверитьДоступностьОбъектаМетаданных(СписокОшибок, "Справочники.СоглашенияОбИспользованииЭД");
	ЭДО_Служебные_ПроверитьДоступностьОбъектаМетаданных(СписокОшибок, "Справочники.ЭДПрисоединенныеФайлы");
	ЭДО_Служебные_ПроверитьДоступностьОбъектаМетаданных(СписокОшибок, "Документы.ПакетЭД");
	ЭДО_Служебные_ПроверитьДоступностьОбъектаМетаданных(СписокОшибок, "Справочники.СоглашенияОбИспользованииЭД");
	ЭДО_Служебные_ПроверитьДоступностьОбъектаМетаданных(СписокОшибок, "РегистрыСведений.СостоянияЭД");
	
	РезультатПроверки.Успешно = (СписокОшибок.Количество()=0);
	
	Возврат РезультатПроверки;
	
КонецФункции

Функция ЭДО_Модуль_Инициализировать(РаботатьВПодсистеме_1С_ЭДО = Ложь) Экспорт
	
	РезультатИнициализации = Новый Структура;
	РезультатИнициализации.Вставить("Успешно",									Истина);
	РезультатИнициализации.Вставить("СписокОшибок");
	РезультатИнициализации.Вставить("ПредложитьОбновлениеПоставки",				Ложь);
	РезультатИнициализации.Вставить("ПредложитьОбновлениеДанных",				Ложь);
	РезультатИнициализации.Вставить("ПредложитьОбновлениеПодключаемогоМодуля",	Ложь);
	РезультатИнициализации.Вставить("ВерсияМодуляИзменена",						Ложь);
	
	Если РаботатьВПодсистеме_1С_ЭДО Тогда
		
		Если НЕ ЭДО_Подсистема1СЭДО_Установлена() Тогда		
			
			РезультатИнициализации.Успешно = Ложь;
			РезультатИнициализации.ПредложитьОбновлениеПоставки = Истина;
			
			Возврат РезультатИнициализации;
			
		КонецЕсли;
		
		РезультатПроверкиДоступа = ЭДО_Подсистема1СЭДО_ЕстьДоступКДанным();
		
	Иначе  // подсистема Диадок
		
		Если НЕ ЭДО_ПодсистемаДиадок_Установлена() Тогда
			
			РезультатИнициализации.Успешно = Ложь;
			РезультатИнициализации.ПредложитьОбновлениеПоставки = Истина;
			
			Возврат РезультатИнициализации;
			
		КонецЕсли;
		
		РезультатПроверкиДоступа = ЭДО_ПодсистемаДиадок_ЕстьДоступКДанным();
		
	КонецЕсли;
	
	Если НЕ РезультатПроверкиДоступа.Успешно Тогда
		
		РезультатИнициализации.Успешно = Ложь;
		РезультатИнициализации.СписокОшибок = РезультатПроверкиДоступа.СписокОшибок;
		
		Возврат РезультатИнициализации;
		
	КонецЕсли;
		
	// теперь проверим необходимость обновления сохраненных данных
	Если ЭДО_Модуль_НеобходимоОбновлениеСохраненныхДанных() Тогда
		
		РезультатИнициализации.ПредложитьОбновлениеДанных = Истина;
		РезультатИнициализации.Успешно = Ложь;
		
	КонецЕсли;
	
	СовместимостьПодключаемогоМодуля = ЭДО_Модуль_ПроверитьСовместимостьВерсииAPIПодключаемогоМодуля();
	
	Если НЕ СовместимостьПодключаемогоМодуля.ВерсииСовместимы Тогда
		
		РезультатИнициализации.ПредложитьОбновлениеПодключаемогоМодуля	= Истина;
		РезультатИнициализации.Успешно									= Ложь;
		
	КонецЕсли;
	
	РезультатИнициализации.ВерсияМодуляИзменена = ЭДО_Модуль_ВерсияИзменена();
	
	Возврат РезультатИнициализации;

КонецФункции

Функция ЭДО_Модуль_Инициализировать_1СЭДО() Экспорт
	
	Возврат ЭДО_Модуль_Инициализировать(Истина);  // для совместимости. Выпилить, если не используется в стандартных ПМах
	
КонецФункции




Процедура ЭДО_Модуль_Финализировать() Экспорт
	
	Кэш = Неопределено;
			
КонецПроцедуры

// Возвращает таблицу юр/физ.лиз из справочника "Диадок_ЮрФизЛица", для которых заданы соответствия
Функция ЭДО_Модуль_ТаблицаОрганизацийПользователя() Экспорт
	
	Если ЭДО_Использовать1СЭДО() Тогда
		Возврат ЭДО_Модуль_ТаблицаОрганизацийПользователя_1СЭДО();
	КонецЕсли;
	
	//TODO будем обновлять только по организациям, записанным в БД. Т.е. компоненту отсюда выпилить.
	
	//СписокИД = Новый Массив;
	//OrganizationList = ДиадокСоединение.GetOrganizationList();
	//
	//Для Сч = 0 По OrganizationList.Count - 1 Цикл
	//	Organization = OrganizationList.GetItem(Сч);
	//	СписокИД.Добавить(Organization.Id);
	//КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	Диадок_ЮрФизЛица.ID КАК BoxID,
	|	Диадок_ЮрФизЛица.Наименование КАК Наименование,
	|	Диадок_ЮрФизЛица.Ссылка КАК Ссылка
	|ИЗ
	|	РегистрСведений.Диадок_НастройкиКонтрагентов КАК Диадок_НастройкиКонтрагентов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Диадок_ЮрФизЛица КАК Диадок_ЮрФизЛица
	|		ПО Диадок_НастройкиКонтрагентов.Организация = Диадок_ЮрФизЛица.Ссылка
	|			И (Диадок_ЮрФизЛица.ИмяСправочника = ""Организации"")
	|			И (НЕ Диадок_ЮрФизЛица.ПометкаУдаления)
	|ГДЕ
	|	Диадок_ЮрФизЛица.СвязанныйСправочник1 <> НЕОПРЕДЕЛЕНО
	|	И Диадок_ЮрФизЛица.СвязанныйСправочник1 <> &ПустаяСсылка
	//|	И Диадок_ЮрФизЛица.ID В(&СписокИД)
	|	");
	Запрос.УстановитьПараметр("ПустаяСсылка",ЭДО_Модуль_ПолучитьПустуюСсылкуОбъекта("Организации"));
	//Запрос.УстановитьПараметр("СписокИД",СписокИД);
	
	Возврат Запрос.Выполнить().Выгрузить();
	
	//Возвращать массив структур или ТЗ?

КонецФункции

Функция ЭДО_Модуль_ТаблицаОрганизацийПользователя_1СЭДО() Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПрофилиНастроекЭДО.Ссылка КАК ПрофильНастроекЭДО,
	|	ПрофилиНастроекЭДО.ИдентификаторОрганизации КАК BoxID,
	|	ПрофилиНастроекЭДО.Наименование КАК Наименование,
	|	ПрофилиНастроекЭДО.Организация КАК Ссылка
	|ИЗ
	|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
	|ГДЕ
	|	НЕ ПрофилиНастроекЭДО.ПометкаУдаления
	|	И (ВЫРАЗИТЬ(ПрофилиНастроекЭДО.ОператорЭДО КАК СТРОКА(15))) = &IDОператора1СЭДО
	|	И ПрофилиНастроекЭДО.Организация <> &ПустаяСсылка");
	
	Запрос.УстановитьПараметр("ПустаяСсылка",ЭДО_Модуль_ПолучитьПустуюСсылкуОбъекта("Организации"));
	Запрос.УстановитьПараметр("IDОператора1СЭДО", ЭДО_IDОператора1СЭДО());
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Возвращает Соответствие:
// Ключ - Ссылка на справочник "Организации" или аналогичную сущность текущей конфигурации
// Значение - Структура с ключами: ОтпечатокСертификата, ПредставлениеСертификата
// Выдает только организации с привязанными облачными сертификатами.
Функция ЭДО_ПолучитьСоответствиеОрганизацийИОблачныхСертификатов() Экспорт
	
	Результат = Новый Соответствие;
	
	Если ЭДО_Использовать1СЭДО() Тогда
		Возврат Результат; // Для 1С-ЭДО пока не реализовано
	КонецЕсли;
	
	Для Каждого СтрокаОрганизации Из ЭДО_Модуль_ТаблицаОрганизацийПользователя() Цикл
		
		Сертификаты = ЭДО_СправочникМенеджер_ЗначениеДопРеквизита(СтрокаОрганизации.Ссылка, "ХранилищеСертификатовОрганизации");
		
		Если ТипЗнч(Сертификаты) <> Тип("ТаблицаЗначений")
			Или Сертификаты.Колонки.Найти("Облачный")=Неопределено Тогда // старый формат таблицы
			Продолжить;
		КонецЕсли;
		
		Отбор = Новый Структура("Облачный", Истина);
		СтрокиОблачныхСертификатов = Сертификаты.НайтиСтроки(Отбор);
		
		Если СтрокиОблачныхСертификатов.Количество()>0 Тогда
			
			МассивСертификатов = Новый Массив;
			
			Для Каждого Стр Из СтрокиОблачныхСертификатов Цикл
				
				СтруктураСертификата = Новый Структура("ОтпечатокСертификата, ПредставлениеСертификата");
				ЗаполнитьЗначенияСвойств(СтруктураСертификата, Стр);
				МассивСертификатов.Добавить(СтруктураСертификата);
				
			КонецЦикла;
			
			Результат.Вставить(СтрокаОрганизации.Ссылка.СвязанныйСправочник1, МассивСертификатов);
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Основная точка входа для обновления главного окна
Процедура ЭДО_Модуль_ОбновитьСписокДокументов(Параметры) Экспорт
	
	Если ЭДО_ПодключаемыйМодуль() = Неопределено Тогда
		Сообщить("Отсутствует подключаемый модуль!", СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	СписокДокументов.Очистить();
	
	ТаблицаВыполняемыхЗапросов = Новый ТаблицаЗначений;
	ЭДО_Служебные_ДобавитьКолонкиВТаблицуЗначений(ТаблицаВыполняемыхЗапросов, "ТребуемоеДействие, ВидПакета, ТекстЗапроса, ИмяКартинки");
	
	МассивВыбранныхВидов = Неопределено;
	Параметры.Свойство("МассивВыбранныхВидов", МассивВыбранныхВидов);
	
	КэшСоответствиеIDПакетов = Новый Соответствие;
	
	Если Параметры.Режим = "ПолученныеДокументы" Тогда
		
		ЭДО_Модуль_ПодготовитьВыполнениеЗапросов_ПолученныеДокументы(ТаблицаВыполняемыхЗапросов, МассивВыбранныхВидов, Параметры.ПоказыватьЗавершенные);
		// TODO проверить второй параметр - СписокВременныхТаблиц. В методах ниже он отсутствует.
		// И временные таблицы лучше вынести отдельным методом.

	ИначеЕсли Параметры.Режим="ОтправкаПакетов" Тогда
			
		ЭДО_Модуль_ЗаполнитьСписокДокументовНеотправленнымиПакетами(Параметры);
		
		//времянка для запросов по пакетам документов
		ЭДО_Модуль_ПодготовитьВыполнениеЗапросов_ПакетыДокументов(ТаблицаВыполняемыхЗапросов, МассивВыбранныхВидов);
		
		// Сюда надо протянуть ссылки на все выбранные виды пакетов
		Если Не ЭДО_Использовать1СЭДО() Тогда
			
			Для Каждого ВидПакета Из МассивВыбранныхВидов Цикл
				//ВидПакета = ЭДО_СправочникМенеджер_НайтиПоРеквизиту("ВидыПакетов", "ID", ВидПакетаID);
				ВидПакетаРазвернутый = ЭДО_СправочникМенеджер_ПолучитьЭлемент("ВидыПакетов", ВидПакета);
				КэшСоответствиеIDПакетов.Вставить(ВидПакетаРазвернутый.Id, ВидПакета);
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли Параметры.Режим="ОтправленныеДокументы" Тогда
			
		//времянка для запросов по отправленным документам (на этот раз каждый документ отдельно)
		ЭДО_Модуль_ПодготовитьВыполнениеЗапросов_ОтправленныеДокументы(ТаблицаВыполняемыхЗапросов, МассивВыбранныхВидов);
		
		// Для отображения исходящих документов, которые не отправлялись из текущей базы 1С, а были загружены из Диадока: у таких вид документа - пустой
		Если НЕ ЭДО_Использовать1СЭДО() И ТипЗнч(МассивВыбранныхВидов) = Тип("Массив") И МассивВыбранныхВидов.Количество() = 0 Тогда
			МассивВыбранныхВидов.Добавить(Справочники.Диадок_ДополнительныеСправочники.ПустаяСсылка());
		КонецЕсли;
		
	КонецЕсли;
		
	//выполнение запросов
	Запрос = Новый Запрос;
	
	//установим все параметры запроса, протянутые из формы
	Для Каждого ЭлементСтруктуры Из Параметры Цикл
		Запрос.Параметры.Вставить(ЭлементСтруктуры.Ключ, ЭлементСтруктуры.Значение);
	КонецЦикла;	
	
	// для отправляемых документов добавим параметры - ссылки на выбранные виды пакетов
	Если Не ЭДО_Использовать1СЭДО() Тогда
		Для Каждого КлючИЗначение Из КэшСоответствиеIDПакетов Цикл
			Запрос.УстановитьПараметр("ВидПакетаId_" + КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
	КонецЕсли;
		
	Запрос.УстановитьПараметр("IDОператора1СЭДО", ЭДО_IDОператора1СЭДО());
	
	//выполнение запросов с выводом в список
	Для Каждого СтрокаВыполняемогоЗапроса Из ТаблицаВыполняемыхЗапросов Цикл
		
		Если НЕ ЗначениеЗаполнено(СтрокаВыполняемогоЗапроса.ТекстЗапроса) Тогда
			Продолжить;
		КонецЕсли;
		
		Запрос.Текст = СтрокаВыполняемогоЗапроса.ТекстЗапроса;
		Запрос.УстановитьПараметр("ТребуемоеДействие",	СтрокаВыполняемогоЗапроса.ТребуемоеДействие);
		Запрос.УстановитьПараметр("ВидПакета",			СтрокаВыполняемогоЗапроса.ВидПакета);
		
		Попытка			
			Выборка = Запрос.Выполнить().Выбрать();						
		Исключение
			Сообщить(ОписаниеОшибки());
			Продолжить;
		КонецПопытки;		
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = СписокДокументов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
			ЗаполнитьЗначенияСвойств(НоваяСтрока,СтрокаВыполняемогоЗапроса,"ТребуемоеДействие,ИмяКартинки");
			
			Если ЭДО_Использовать1СЭДО() Тогда
				
				Если Параметры.Режим = "ОтправкаПакетов"
					Или Параметры.Режим = "ОтправленныеДокументы" Тогда
					
					Отбор = Новый Структура("ID", Выборка.ВидПакетаID);
					МассивСтрокСпискаВидовПакета = ЭДО_ПредопределенныеСписки_Получить("ВидыПакетов").НайтиСтроки(Отбор);
					
					Если МассивСтрокСпискаВидовПакета.Количество() > 0 Тогда
						НоваяСтрока.ВидПакета = МассивСтрокСпискаВидовПакета[0].Наименование;
						НоваяСтрока.ВидПакетаID = МассивСтрокСпискаВидовПакета[0].ID;
					КонецЕсли;
					
					Если Параметры.Режим="ОтправленныеДокументы" Тогда
						
						Отбор = Новый Структура("ID", Выборка.ВидЭлДокументаID);
						МассивСтрокСпискаВидовПакета = ЭДО_ПредопределенныеСписки_Получить("ВидыДокументов").НайтиСтроки(Отбор);
						
						Если МассивСтрокСпискаВидовПакета.Количество() > 0 Тогда
							НоваяСтрока.ВидЭлДокумента = МассивСтрокСпискаВидовПакета[0].Наименование;
						КонецЕсли;
						
					КонецЕсли;
					
				КонецЕсли;
				
			Иначе
				// при пакетном построении запроса дозаполняем ссылки на виды пакетов в этом коде. Не оптимально, в будущем разгрести.
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.ВидПакета) И ЗначениеЗаполнено(НоваяСтрока.ВидПакетаID) Тогда
					НоваяСтрока.ВидПакета = КэшСоответствиеIDПакетов.Получить(НоваяСтрока.ВидПакетаID);
				КонецЕсли;
				
			КонецЕсли;
			
			Если Параметры.Режим = "ПолученныеДокументы" Тогда
				НоваяСтрока.ТребуемоеДействие = Выборка.ТребуемоеДействие;  // снова костыль
			ИначеЕсли Параметры.Режим = "ОтправкаПакетов" И Не ЗначениеЗаполнено(НоваяСтрока.ВидПакета) Тогда
				НоваяСтрока.ВидПакета = СтрокаВыполняемогоЗапроса.ВидПакета;
				НоваяСтрока.ТребуемоеДействие = "Отправить пакет";
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ЭДО_ПодключаемыйМодуль_ОбработатьСобытие("ПослеОбновленияСпискаДокументов", 
			Новый Структура("СписокДокументов, Режим", СписокДокументов, Параметры.Режим));
			
	//необходимая сортировка таблицы определяется в ПМ

КонецПроцедуры

Процедура ЭДО_Модуль_ЗаполнитьСписокДокументовНеотправленнымиПакетами(Параметры)
	
	Если ЭДО_Использовать1СЭДО() Тогда
		ЭДО_Модуль_ЗаполнитьСписокДокументовНеотправленнымиПакетами_1СЭДО(Параметры);
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Диадок_ПакетыДокументов.Документ КАК Документ,
	|	Диадок_ПакетыДокументов.НомерДокумента КАК НомерДокумента,
	|	Диадок_ПакетыДокументов.ДатаДокумента КАК ДатаДокумента,
	|	Диадок_ПакетыДокументов.Контрагент КАК Контрагент,
	|	Диадок_ПакетыДокументов.Организация КАК Организация,
	|	Диадок_ПакетыДокументов.СуммаДокумента КАК СуммаДокумента,
	|	Диадок_ПакетыДокументов.Ссылка КАК Пакет,
	|	Диадок_ПакетыДокументов.Метка КАК Статус,
	|	Диадок_ПакетыДокументов.ВидПакета КАК ВидПакета
	|ИЗ
	|	Справочник.Диадок_ПакетыДокументов КАК Диадок_ПакетыДокументов
	|ГДЕ
	|	(Диадок_ПакетыДокументов.Метка = ""Подготовлен""
	|			ИЛИ Диадок_ПакетыДокументов.Метка = ""Не отправлен"")
	|	И Диадок_ПакетыДокументов.ДатаДокумента МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НЕ Диадок_ПакетыДокументов.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	НомерДокумента"
	);
				   
	Запрос.УстановитьПараметр("НачалоПериода",	Параметры.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода",	Параметры.КонецПериода);
				   
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = СписокДокументов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
			НоваяСтрока.ТребуемоеДействие = "Отправить пакет";
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЭДО_Модуль_ЗаполнитьСписокДокументовНеотправленнымиПакетами_1СЭДО(Параметры)
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	Диадок_ПакетыДокументов.ОбъектВладелец КАК Документ,
	               |	Диадок_ПакетыДокументов.ОбъектВладелец.Номер КАК НомерДокумента,
	               |	Диадок_ПакетыДокументов.ОбъектВладелец.Дата КАК ДатаДокумента,
	               |	Диадок_ПакетыДокументов.ОбъектВладелец.СуммаДокумента КАК СуммаДокумента,
	               |	Диадок_ПакетыДокументов.Ссылка.НастройкаЭДО.Контрагент КАК Контрагент,
	               |	Диадок_ПакетыДокументов.Ссылка.ПрофильНастроекЭДО.Организация КАК Организация,
	               |	Диадок_ПакетыДокументов.Ссылка КАК Пакет,
	               |	Диадок_ПакетыДокументов.Ссылка.СтатусПакета КАК Статус,
	               |	Диадок_ПакетыДокументов.Ссылка.ВнешнийУИД КАК ВидПакетаID
	               |ИЗ
	               |	Документ.ПакетЭД.ЭлектронныеДокументы КАК Диадок_ПакетыДокументов
	               |ГДЕ
	               |	Диадок_ПакетыДокументов.Ссылка.СтатусПакета = ЗНАЧЕНИЕ(Перечисление.СтатусыПакетовЭД.Неизвестный)
	               |	И Диадок_ПакетыДокументов.ОбъектВладелец.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	               |	И НЕ Диадок_ПакетыДокументов.Ссылка.ПометкаУдаления
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДатаДокумента,
	               |	НомерДокумента";
				   
	Запрос.УстановитьПараметр("НачалоПериода", Параметры.НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", Параметры.КонецПериода);
	
	ПривестиТипыВЗапросеПоТаблицеЭлектронныхДокументов_1СЭДО(Запрос.Текст);
	
	РезультатЗапроса = Запрос.Выполнить();
	
	Если НЕ РезультатЗапроса.Пустой() Тогда
		
		Выборка = РезультатЗапроса.Выбрать();
		
		Пока Выборка.Следующий() Цикл
			
			НоваяСтрока = СписокДокументов.Добавить();
			
			ЗаполнитьЗначенияСвойств(НоваяСтрока,Выборка);
			НоваяСтрока.ТребуемоеДействие = "Отправить пакет";
			
			Отбор = Новый Структура("ID", Выборка.ВидПакетаID);
			МассивСтрокСпискаВидовПакета = ЭДО_ПредопределенныеСписки_Получить("ВидыПакетов").НайтиСтроки(Отбор);
			
			Если МассивСтрокСпискаВидовПакета.Количество() > 0 Тогда
				НоваяСтрока.ВидПакета = МассивСтрокСпискаВидовПакета[0].Наименование;
				НоваяСтрока.ВидПакетаID = МассивСтрокСпискаВидовПакета[0].ID;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПривестиТипыВЗапросеПоТаблицеЭлектронныхДокументов_1СЭДО(ТекстЗапроса)
	
	ТаблицаИспользуемыхДокументовКонфигурации = ЭДО_ПодключаемыйМодуль_ОбработатьСобытие("ПолучитьТаблицуИспользуемыхДокументовКонфигурации");
	
	Если ТипЗнч(ТаблицаИспользуемыхДокументовКонфигурации) = Тип("ТаблицаЗначений") И ТаблицаИспользуемыхДокументовКонфигурации.Количество() > 0 Тогда
	
		ТекстПоля_Дата = "";
		ТекстПоля_Номер = "";
		ТекстПоля_СуммаДокумента = "";
		
		Для Каждого СтрокаТЗ Из ТаблицаИспользуемыхДокументовКонфигурации Цикл
			
			ТекстПоля_Дата = ТекстПоля_Дата + "		КОГДА Диадок_ПакетыДокументов.ОбъектВладелец ССЫЛКА Документ."+СтрокаТЗ.ТипДокумента+" ТОГДА ВЫРАЗИТЬ(Диадок_ПакетыДокументов.ОбъектВладелец КАК Документ."+СтрокаТЗ.ТипДокумента+").Дата
											  |	";
			ТекстПоля_Номер= ТекстПоля_Номер+ "		КОГДА Диадок_ПакетыДокументов.ОбъектВладелец ССЫЛКА Документ."+СтрокаТЗ.ТипДокумента+" ТОГДА ВЫРАЗИТЬ(Диадок_ПакетыДокументов.ОбъектВладелец КАК Документ."+СтрокаТЗ.ТипДокумента+").Номер
											  |	";
											  
			Если ЗначениеЗаполнено(СтрокаТЗ.РеквизитСуммы) Тогда
				ТекстПоля_СуммаДокумента = ТекстПоля_СуммаДокумента + "		КОГДА Диадок_ПакетыДокументов.ОбъектВладелец ССЫЛКА Документ."+СтрокаТЗ.ТипДокумента+" ТОГДА ВЫРАЗИТЬ(Диадок_ПакетыДокументов.ОбъектВладелец КАК Документ."+СтрокаТЗ.ТипДокумента+")."+СтрокаТЗ.РеквизитСуммы+"
											  |	";
			КонецЕсли;
										
		КонецЦикла;
		
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Диадок_ПакетыДокументов.ОбъектВладелец.Дата", 
						"ВЫБОР
						|"+ТекстПоля_Дата+"КОНЕЦ");
						
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Диадок_ПакетыДокументов.ОбъектВладелец.Номер", 
						"ВЫБОР
						|"+ТекстПоля_Номер+"КОНЕЦ");
		
		Если ЗначениеЗаполнено(ТекстПоля_СуммаДокумента) Тогда
			ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "Диадок_ПакетыДокументов.ОбъектВладелец.СуммаДокумента", 
						"ВЫБОР
						|"+ТекстПоля_СуммаДокумента+"КОНЕЦ");
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭДО_ПолучитьОписаниеОшибкиПереотправляемогоПакета(ПереотправляемыйПакетСсылка) Экспорт
	
	Если ЭДО_Использовать1СЭДО() Тогда
		Возврат ЭДО_ПолучитьОписаниеОшибкиПереотправляемогоПакета_1СЭДО(ПереотправляемыйПакетСсылка);
	КонецЕсли;
	
	Возврат ЭДО_СправочникМенеджер_ЗначениеДопРеквизита(ПереотправляемыйПакетСсылка, "ОписаниеОшибкиХранилище");
	
КонецФункции

Функция ЭДО_ПолучитьОписаниеОшибкиПереотправляемогоПакета_1СЭДО(ПереотправляемыйПакетСсылка) Экспорт
	
	Возврат ПереотправляемыйПакетСсылка.Комментарий;
		
КонецФункции

// Получение списка запросов и временных таблиц
Процедура ЭДО_Модуль_ПодготовитьВыполнениеЗапросов(ТаблицаВыполняемыхЗапросов,СписокВременныхТаблиц)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДопСправочники.Ссылка КАК ТребуемоеДействие,
	|	ДопРеквизитыТекстЗапроса.ЗначениеХранилищеЗначения КАК ХранилищеТекстаЗапроса,
	|	ДопРеквизитыВременныеТаблицы.ЗначениеХранилищеЗначения КАК ХранилищеВременныхТаблиц,
	|	ДопРеквизитыИмяКартинки.Значение КАК ИмяКартинки
	|ИЗ
	|	Справочник.Диадок_ДополнительныеСправочники КАК ДопСправочники
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Диадок_ДополнительныеСправочники.ДополнительныеРеквизиты КАК ДопРеквизитыТекстЗапроса
	|		ПО ДопСправочники.Ссылка = ДопРеквизитыТекстЗапроса.Ссылка
	|			И (ДопРеквизитыТекстЗапроса.ИмяРеквизита = ""ХранилищеТекстЗапросаВыборкиДанных"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Диадок_ДополнительныеСправочники.ДополнительныеРеквизиты КАК ДопРеквизитыВременныеТаблицы
	|		ПО ДопСправочники.Ссылка = ДопРеквизитыВременныеТаблицы.Ссылка
	|			И (ДопРеквизитыВременныеТаблицы.ИмяРеквизита = ""ХранилищеВременныхТаблиц"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Диадок_ДополнительныеСправочники.ДополнительныеРеквизиты КАК ДопРеквизитыИмяКартинки
	|		ПО ДопСправочники.Ссылка = ДопРеквизитыИмяКартинки.Ссылка
	|			И (ДопРеквизитыИмяКартинки.ИмяРеквизита = ""ИмяКартинки"")
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Диадок_ДополнительныеСправочники.ДополнительныеРеквизиты КАК ДопРеквизитыНеактивное
	|		ПО ДопСправочники.Ссылка = ДопРеквизитыНеактивное.Ссылка
	|			И (ДопРеквизитыНеактивное.ИмяРеквизита = ""Неактивное"")
	|ГДЕ
	|	ДопСправочники.ИмяСправочника = ""ТребуемыеДействия""
	|	И ЕСТЬNULL(ДопРеквизитыНеактивное.Значение, ЛОЖЬ) = ЛОЖЬ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		ТекстЗапроса = Выборка.ХранилищеТекстаЗапроса.Получить();
		ИмяКартинки = Выборка.ИмяКартинки;
		ВременныеТаблицы = Выборка.ХранилищеВременныхТаблиц.Получить();
		
		Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
			
			НовыйТекстЗапроса = ТаблицаВыполняемыхЗапросов.Добавить();
			НовыйТекстЗапроса.ТребуемоеДействие = Выборка.ТребуемоеДействие;
			НовыйТекстЗапроса.ИмяКартинки = Выборка.ИмяКартинки;
			НовыйТекстЗапроса.ТекстЗапроса = ТекстЗапроса;
			
		КонецЕсли;
		
		Если НЕ ВременныеТаблицы = Неопределено Тогда
			Для Каждого Стр Из ВременныеТаблицы Цикл
				Если НЕ ЗначениеЗаполнено(Стр.ИсточникДанных) Тогда
					Продолжить;
				КонецЕсли;
				Если СписокВременныхТаблиц.Найти(Стр.ИсточникДанных) = Неопределено Тогда
					СписокВременныхТаблиц.Добавить(Стр.ИсточникДанных);
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
	КонецЦикла;
	
	
КонецПроцедуры

// Временно будет здесь: переход к "пакетам документов" от "требуемых действий".
Процедура ЭДО_Модуль_ПодготовитьВыполнениеЗапросов_ПакетыДокументов(ТаблицаВыполняемыхЗапросов, МассивВидовПакетов=Неопределено)
		
	Если МассивВидовПакетов = Неопределено Тогда
		
		Если ЭДО_Использовать1СЭДО() Тогда
			
			МассивВидовПакетов = ЭДО_ПредопределенныеСписки_Получить("ВидыПакетов").ВыгрузитьКолонку("ID");
			
		Иначе
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ДопСправочники.Ссылка КАК Ссылка,
			|	ДопСправочники.Наименование КАК Наименование
			|ИЗ
			|	Справочник.Диадок_ДополнительныеСправочники КАК ДопСправочники
			|ГДЕ
			|	ДопСправочники.ИмяСправочника = ""ВидыПакетов""";
			
			МассивВидовПакетов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
			
		КонецЕсли;
		
	КонецЕсли;
		
	ТекстЗапроса = ЭДО_ПодключаемыйМодуль_ОбработатьСобытие("ПолучитьТекстЗапросаДляСпискаПакетовНаОтправкуПоМассивуВидовПакетов", Новый Структура("МассивВидовПакетов", МассивВидовПакетов));
	
	Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
		
		НовыйТекстЗапроса = ТаблицаВыполняемыхЗапросов.Добавить();		
		НовыйТекстЗапроса.ТекстЗапроса = ТекстЗапроса;
		НовыйТекстЗапроса.ТребуемоеДействие = "Отправить пакет";
		
	Иначе //Возможно, используется старая версия ПМ - с обходом видов пакетов в цикле и получением для каждого отдельного запроса	
		
		Для Каждого ТекВидПакета Из МассивВидовПакетов Цикл
			
			ВидПакетаРазвернутый	= ЭДО_СправочникМенеджер_ПолучитьЭлемент("ВидыПакетов", ТекВидПакета);
			ТекстЗапроса			= ЭДО_ПодключаемыйМодуль_ОбработатьСобытие("ПолучитьТекстЗапросаДляСпискаПакетовНаОтправку", Новый Структура("ВидПакетаРазвернутый", ВидПакетаРазвернутый));
			
			Если ЗначениеЗаполнено(ТекстЗапроса) Тогда
				
				НовыйТекстЗапроса = ТаблицаВыполняемыхЗапросов.Добавить();
				НовыйТекстЗапроса.ВидПакета				= ТекВидПакета;
				НовыйТекстЗапроса.ТекстЗапроса			= ТекстЗапроса;
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

// Добавим "отправленные документы" в таблицу на форме
Процедура ЭДО_Модуль_ПодготовитьВыполнениеЗапросов_ОтправленныеДокументы(ТаблицаВыполняемыхЗапросов, МассивВидовДокументовДляОтбора=Неопределено)
	
	Если ЭДО_Использовать1СЭДО() Тогда
		ЭДО_Модуль_ПодготовитьВыполнениеЗапросов_ОтправленныеДокументы_1СЭДО(ТаблицаВыполняемыхЗапросов, МассивВидовДокументовДляОтбора);
		Возврат;
	КонецЕсли;
	
	//Только отправленные
	НовыйТекстЗапроса = ТаблицаВыполняемыхЗапросов.Добавить();
	НовыйТекстЗапроса.ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Диадок_Документы.Ссылка КАК ДокументЭДО,
	|	Диадок_Документы.Направление,
	|	Диадок_Документы.НомерДокумента КАК НомерДокумента,
	|	Диадок_Документы.ДатаДокумента КАК ДатаДокумента,
	|	Диадок_ЮрФизЛица_Организации.СвязанныйСправочник1 КАК Организация,
	|	Диадок_ЮрФизЛица_Контрагенты.СвязанныйСправочник1 КАК Контрагент,
	|	Диадок_Документы.Метка,
	|	Диадок_Документы.Документ,
	|	Диадок_Документы.СуммаДокумента КАК СуммаДокумента,
	|	Диадок_Документы.ВидДокумента КАК ВидЭлДокумента,
	|	Диадок_ПакетыДокументов.ВидПакета КАК ВидПакета,
	|	Диадок_ПакетыДокументов.Ссылка КАК Пакет,
	|	Диадок_Документы.Статус КАК Статус,
	|	Диадок_Документы.ТипДокумента КАК ТипДокумента,
	|	Диадок_ЮрФизЛица.Ссылка КАК Подразделение,
	|	Диадок_Документы.ДополнительныйСтатус КАК ДополнительныйСтатус
	|ИЗ
	|	Справочник.Диадок_Документы КАК Диадок_Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Диадок_ПакетыДокументов КАК Диадок_ПакетыДокументов
	|		ПО Диадок_Документы.Пакет = Диадок_ПакетыДокументов.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Диадок_ЮрФизЛица КАК Диадок_ЮрФизЛица_Контрагенты
	|		ПО Диадок_Документы.КонтрагентДиадок = Диадок_ЮрФизЛица_Контрагенты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Диадок_ЮрФизЛица КАК Диадок_ЮрФизЛица_Организации
	|		ПО Диадок_Документы.ОрганизацияДиадок = Диадок_ЮрФизЛица_Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Диадок_ЮрФизЛица КАК Диадок_ЮрФизЛица
	|		ПО Диадок_Документы.DepartmentId = Диадок_ЮрФизЛица.ID
	|			И (Диадок_ЮрФизЛица.ИмяСправочника = ""ПодразделенияОрганизаций"")
	|ГДЕ
	|	Диадок_Документы.ДатаЗагрузки МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Диадок_Документы.Направление = ""Исходящее""
	|	И Диадок_Документы.Статус <> ""Не отправлен""
	|	И Диадок_Документы.Метка <> ""Не отправлен""
	|	И Диадок_Документы.Метка <> ""Переотправлен""
	|	И &ДополнительныйОтбор
	|
	|УПОРЯДОЧИТЬ ПО
	|	Диадок_Документы.ДатаЗагрузки УБЫВ,
	|	Диадок_Документы.НомерДокумента УБЫВ";
	
	Если МассивВидовДокументовДляОтбора <> Неопределено Тогда
		НовыйТекстЗапроса.ТекстЗапроса = СтрЗаменить(НовыйТекстЗапроса.ТекстЗапроса, "&ДополнительныйОтбор", "Диадок_Документы.ВидДокумента В(&МассивВыбранныхВидов)");
	Иначе
		НовыйТекстЗапроса.ТекстЗапроса = СтрЗаменить(НовыйТекстЗапроса.ТекстЗапроса, "&ДополнительныйОтбор", "Истина");
	КонецЕсли;	
	
	НовыйТекстЗапроса.ТребуемоеДействие = "Просмотреть документ";
	
КонецПроцедуры

Процедура ЭДО_Модуль_ПодготовитьВыполнениеЗапросов_ОтправленныеДокументы_1СЭДО(ТаблицаВыполняемыхЗапросов, МассивВидовДокументовДляОтбора=Неопределено)
	
	//Только отправленные
	НовыйТекстЗапроса = ТаблицаВыполняемыхЗапросов.Добавить();
	
	НовыйТекстЗапроса.ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Диадок_ПакетыДокументов.ЭлектронныйДокумент КАК ДокументЭДО,
	|	Диадок_ПакетыДокументов.ЭлектронныйДокумент.НаправлениеЭД КАК Направление,
	|	Диадок_ПакетыДокументов.ОбъектВладелец.Номер КАК НомерДокумента,
	|	Диадок_ПакетыДокументов.ОбъектВладелец.Дата КАК ДатаДокумента,
	|	Диадок_ПакетыДокументов.Ссылка.ПрофильНастроекЭДО.Организация КАК Организация,
	|	Диадок_ПакетыДокументов.Ссылка.НастройкаЭДО.Контрагент КАК Контрагент,
	|	Диадок_ПакетыДокументов.Ссылка.СтатусПакета КАК Метка,
	|	Диадок_ПакетыДокументов.ЭлектронныйДокумент.ВладелецФайла КАК Документ,
	|	Диадок_ПакетыДокументов.ОбъектВладелец.СуммаДокумента КАК СуммаДокумента,
	|	Диадок_ПакетыДокументов.ЭлектронныйДокумент.НомерЭД КАК ВидЭлДокументаID,
	|	Диадок_ПакетыДокументов.Ссылка.ВнешнийУИД КАК ВидПакетаID,
	|	Диадок_ПакетыДокументов.Ссылка КАК Пакет,
	|	Диадок_ПакетыДокументов.ЭлектронныйДокумент.ДополнительнаяИнформация КАК Статус
	|ИЗ
	|	Документ.ПакетЭД.ЭлектронныеДокументы КАК Диадок_ПакетыДокументов
	|ГДЕ
	|	Диадок_ПакетыДокументов.ОбъектВладелец.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И Диадок_ПакетыДокументов.ЭлектронныйДокумент.НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Исходящий)
	|	И Диадок_ПакетыДокументов.ЭлектронныйДокумент.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ОшибкаПередачи)
	|	И Диадок_ПакетыДокументов.ЭлектронныйДокумент.СтатусЭД <> ЗНАЧЕНИЕ(Перечисление.СтатусыЭД.ПустаяСсылка)
	|	И НЕ Диадок_ПакетыДокументов.Ссылка.ПометкаУдаления
	|	И &ДополнительныйОтбор
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	НомерДокумента";
		
	Если МассивВидовДокументовДляОтбора <> Неопределено Тогда
		НовыйТекстЗапроса.ТекстЗапроса = СтрЗаменить(НовыйТекстЗапроса.ТекстЗапроса, "&ДополнительныйОтбор", "Диадок_ПакетыДокументов.ЭлектронныйДокумент.НомерЭД В(&МассивВыбранныхВидов)");
	Иначе
		НовыйТекстЗапроса.ТекстЗапроса = СтрЗаменить(НовыйТекстЗапроса.ТекстЗапроса, "&ДополнительныйОтбор", "Истина");
	КонецЕсли;	
	
	ПривестиТипыВЗапросеПоТаблицеЭлектронныхДокументов_1СЭДО(НовыйТекстЗапроса.ТекстЗапроса);
	
	НовыйТекстЗапроса.ТребуемоеДействие = "Просмотреть документ";
	
КонецПроцедуры

// Добавим "полученные документы" в таблицу на форме
Процедура ЭДО_Модуль_ПодготовитьВыполнениеЗапросов_ПолученныеДокументы(ТаблицаВыполняемыхЗапросов, МассивВидовДокументовДляОтбора=Неопределено, ПоказыватьЗавершенные)
	
	Если ЭДО_Использовать1СЭДО() Тогда
		ЭДО_Модуль_ПодготовитьВыполнениеЗапросов_ПолученныеДокументы_1СЭДО(ТаблицаВыполняемыхЗапросов, МассивВидовДокументовДляОтбора, ПоказыватьЗавершенные);
		Возврат;
	КонецЕсли;
	
	// Только полученные
	НовыйТекстЗапроса = ТаблицаВыполняемыхЗапросов.Добавить();
	НовыйТекстЗапроса.ТекстЗапроса = 
	"ВЫБРАТЬ
	|	Диадок_Документы.Ссылка КАК ДокументЭДО,
	|	Диадок_Документы.Направление,
	|	Диадок_Документы.НомерДокумента КАК НомерДокумента,
	|	Диадок_Документы.ДатаДокумента КАК ДатаДокумента,
	|	Диадок_ЮрФизЛица_Организации.СвязанныйСправочник1 КАК Организация,
	|	Диадок_ЮрФизЛица_Контрагенты.СвязанныйСправочник1 КАК Контрагент,
	|	Диадок_Документы.Метка,
	|	Диадок_Документы.Документ,
	|	Диадок_Документы.Пакет КАК Пакет,
	|	Диадок_Документы.СуммаДокумента КАК СуммаДокумента,
	|	Диадок_Документы.ВидДокумента КАК ВидЭлДокумента,
	|	Диадок_Документы.Статус КАК Статус,
	|	Диадок_Документы.ТипДокумента КАК ТипДокумента,
	|	""Обработать документ"" КАК ТребуемоеДействие_Стар,
	|	ВЫБОР
	|		КОГДА НЕ Диадок_Документы.АнализПроведен
	|			ТОГДА ""Выполнить анализ""
	|		КОГДА Диадок_Документы.ТребуемоеДействиеВ1С <> """"
	|			ТОГДА Диадок_Документы.ТребуемоеДействиеВ1С
	|		КОГДА Диадок_Документы.ТребуемоеДействиеВДД <> """"
	|			ТОГДА Диадок_Документы.ТребуемоеДействиеВДД
	|		ИНАЧЕ ""Просмотреть документ""
	|	КОНЕЦ КАК ТребуемоеДействие,
	|	Диадок_Документы.Направление КАК Направление,
	|	Диадок_Документы.ТребуемоеДействиеВ1С КАК ДействиеВ1С,
	|	Диадок_Документы.ТребуемоеДействиеВДД КАК ДействиеВДД,
	|	Диадок_Документы.ТекстОшибки КАК ОшибкиПроверкиТекст,
	|	Диадок_Документы.ДатаЗагрузки КАК ДатаПолучения,
	|	Диадок_ЮрФизЛица_Подразделения.Ссылка КАК Подразделение,
	|	Диадок_Документы.ДополнительныйСтатус КАК ДополнительныйСтатус
	|ИЗ
	|	Справочник.Диадок_Документы КАК Диадок_Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Диадок_ЮрФизЛица КАК Диадок_ЮрФизЛица_Контрагенты
	|		ПО Диадок_Документы.КонтрагентДиадок = Диадок_ЮрФизЛица_Контрагенты.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Диадок_ЮрФизЛица КАК Диадок_ЮрФизЛица_Организации
	|		ПО Диадок_Документы.ОрганизацияДиадок = Диадок_ЮрФизЛица_Организации.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Диадок_ЮрФизЛица КАК Диадок_ЮрФизЛица_Подразделения
	|		ПО Диадок_Документы.DepartmentId = Диадок_ЮрФизЛица_Подразделения.ID
	|			И (Диадок_ЮрФизЛица_Подразделения.ИмяСправочника = ""ПодразделенияОрганизаций"")
	|ГДЕ
	|	Диадок_Документы.ДатаЗагрузки МЕЖДУ &НачалоПериода И &КонецПериода
	|	И &ПоказыватьЗавершенные
	|	И Диадок_Документы.Направление = ""Входящее""
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаПолучения УБЫВ";
	
	// Завершенными будем считать те документы, у которых в поле "ТребуемоеДействиеВ1С" и "ТребуемоеДействиеВДД" пусто, и флаг "АнализПроведен" установлен.
	Если ПоказыватьЗавершенные Тогда
		НовыйТекстЗапроса.ТекстЗапроса = СтрЗаменить(НовыйТекстЗапроса.ТекстЗапроса, "&ПоказыватьЗавершенные", "Истина");
	Иначе
		НовыйТекстЗапроса.ТекстЗапроса = СтрЗаменить(НовыйТекстЗапроса.ТекстЗапроса, "&ПоказыватьЗавершенные",
				"	НЕ (Диадок_Документы.АнализПроведен
				|		И Диадок_Документы.ТребуемоеДействиеВ1С = """"
				|		И Диадок_Документы.ТребуемоеДействиеВДД = """")" );
	КонецЕсли;
	
	НовыйТекстЗапроса.ТребуемоеДействие = "Просмотреть документ";
	
КонецПроцедуры

Процедура ЭДО_Модуль_ПодготовитьВыполнениеЗапросов_ПолученныеДокументы_1СЭДО(ТаблицаВыполняемыхЗапросов, МассивВидовДокументовДляОтбора=Неопределено, ПоказыватьЗавершенные)
	
	// Только полученные
	НовыйТекстЗапроса = ТаблицаВыполняемыхЗапросов.Добавить();
	
	НовыйТекстЗапроса.ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Диадок_ПакетыДокументов.ЭлектронныйДокумент КАК ДокументЭДО,
	|	Диадок_ПакетыДокументов.ЭлектронныйДокумент.НаправлениеЭД КАК Направление,
	|	ПОДСТРОКА(Диадок_ПакетыДокументов.ЭлектронныйДокумент.Описание, 76, 50) КАК НомерДокумента,
	|	Диадок_ПакетыДокументов.ЭлектронныйДокумент.ДатаСоздания КАК ДатаДокумента,  // TODO разобраться
	|	Диадок_ПакетыДокументов.ЭлектронныйДокумент.ДатаСоздания КАК ДатаПолучения,
	|	Диадок_ПакетыДокументов.Ссылка.ПрофильНастроекЭДО.Организация КАК Организация,
	|	Диадок_ПакетыДокументов.Ссылка.НастройкаЭДО.Контрагент КАК Контрагент,
	|	Диадок_ПакетыДокументов.Ссылка.СтатусПакета КАК Метка,
	|	Диадок_ПакетыДокументов.ЭлектронныйДокумент.ВладелецФайла КАК Документ,
	|	ПОДСТРОКА(Диадок_ПакетыДокументов.ЭлектронныйДокумент.Описание, 41, 20) КАК СуммаДокумента,
	|	Диадок_ПакетыДокументов.ЭлектронныйДокумент.НомерЭД КАК ВидЭлДокументаID,
	|	Диадок_ПакетыДокументов.Ссылка.ВнешнийУИД КАК ВидПакетаID,
	|	Диадок_ПакетыДокументов.Ссылка КАК Пакет,
	|	Диадок_ПакетыДокументов.ЭлектронныйДокумент.ДополнительнаяИнформация КАК Статус,
	|	ПОДСТРОКА(Диадок_ПакетыДокументов.ЭлектронныйДокумент.Описание, 1, 40) КАК ТипДокумента,
	|	""Обработать документ"" КАК ТребуемоеДействие
	|ИЗ
	|	Документ.ПакетЭД.ЭлектронныеДокументы КАК Диадок_ПакетыДокументов
	|ГДЕ
	|	Диадок_ПакетыДокументов.ЭлектронныйДокумент.ДатаСоздания МЕЖДУ &НачалоПериода И &КонецПериода 
	|	И Диадок_ПакетыДокументов.ЭлектронныйДокумент.НаправлениеЭД = ЗНАЧЕНИЕ(Перечисление.НаправленияЭД.Входящий)
	|	И НЕ Диадок_ПакетыДокументов.Ссылка.ПометкаУдаления
	|	И &ДополнительныйОтбор
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаДокумента,
	|	НомерДокумента";
		
	Если МассивВидовДокументовДляОтбора <> Неопределено Тогда
		НовыйТекстЗапроса.ТекстЗапроса = СтрЗаменить(НовыйТекстЗапроса.ТекстЗапроса, "&ДополнительныйОтбор", "Диадок_ПакетыДокументов.ЭлектронныйДокумент.НомерЭД В(&МассивВыбранныхВидов)");
	Иначе
		НовыйТекстЗапроса.ТекстЗапроса = СтрЗаменить(НовыйТекстЗапроса.ТекстЗапроса, "&ДополнительныйОтбор", "Истина");
	КонецЕсли;	
	
	НовыйТекстЗапроса.ТребуемоеДействие = "Просмотреть документ";
	
КонецПроцедуры

Функция ЭДО_Модуль_ОбщиеНастройки() Экспорт
	
	Результат = ЭДО_Кэш_Прочитать("ОбщиеНастройки");
	
	Если Результат=Неопределено Тогда
		// 1. Подготовим структуру настроек
		Результат = ЭДО_Модуль_СтруктураОбщихНастроек();
		
		Если ЭДО_Использовать1СЭДО() Тогда
			
			СтруктураНастроек = ЭДО_ПрочитатьЗначенияСвойств1СЭДО();
			ЗаполнитьЗначенияСвойств(Результат, СтруктураНастроек);
			
		Иначе
			// 2. Найдем элемент справочника и прочитаем его			
			ОбщиеНастройкиСсылка = ЭДО_СправочникМенеджер_НайтиПоНаименованию("ОбщиеНастройки","ОбщиеНастройки");
			
			Если НЕ ОбщиеНастройкиСсылка=Неопределено Тогда
				
				Для Каждого КлючИЗначение Из Результат Цикл
					// Не оптимально, но пока не критично
					Результат[КлючИЗначение.Ключ] = ЭДО_СправочникМенеджер_ЗначениеДопРеквизита(ОбщиеНастройкиСсылка,КлючИЗначение.Ключ);
				КонецЦикла;
				
			КонецЕсли;
			
			Результат.Вставить("Использовать1СЭДО", Ложь);
			
		КонецЕсли;
		
		ЭДО_Кэш_Поместить("ОбщиеНастройки",Результат);
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЭДО_Модуль_СохранитьОбщиеНастройки(мНастройки) Экспорт
	
	Если ЭДО_Использовать1СЭДО() Тогда
		ЭДО_Модуль_СохранитьОбщиеНастройки_1СЭДО(мНастройки);
		Возврат;
	КонецЕсли;
	
	ОбщиеНастройкиСсылка = ЭДО_СправочникМенеджер_НайтиПоНаименованию("ОбщиеНастройки","ОбщиеНастройки");
	Если ОбщиеНастройкиСсылка=Неопределено Тогда
		ОбщиеНастройкиОбъект = Справочники.Диадок_ДополнительныеСправочники.СоздатьЭлемент();
		ОбщиеНастройкиОбъект.Наименование	= "ОбщиеНастройки";
		ОбщиеНастройкиОбъект.ИмяСправочника	= "ОбщиеНастройки";
		ОбщиеНастройкиОбъект.УстановитьНовыйКод();
	Иначе
		ОбщиеНастройкиОбъект = ОбщиеНастройкиСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	// 2.2 Перекинем в объект настройки из структуры.
	Для Каждого КлючИЗначение Из мНастройки Цикл
		
		//Необходимость использования 1С-ЭДО пишем только в регистр сведений доп.свойств объектов, при его наличии
		Если КлючИЗначение.Ключ = "Использовать1СЭДО" Тогда
			Попытка
				ЭДО_УстановитьЗначениеСвойства1СЭДО(КлючИЗначение.Ключ, КлючИЗначение.Значение);							
			Исключение
			КонецПопытки;
		Иначе
			ЭДО_СправочникМенеджер_УстановитьЗначениеДопРеквизита(ОбщиеНастройкиОбъект,КлючИЗначение.Ключ,КлючИЗначение.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	// 2.3 Запишем. Хорошо бы проверять уникальность, хотя это актуально лишь для первого запуска.
	ОбщиеНастройкиОбъект.Записать();
	
КонецПроцедуры

Процедура ЭДО_Модуль_СохранитьОбщиеНастройки_1СЭДО(мНастройки)
	
	Для Каждого КлючИЗначение Из мНастройки Цикл
		ЭДО_УстановитьЗначениеСвойства1СЭДО(КлючИЗначение.Ключ, КлючИЗначение.Значение);
	КонецЦикла;

КонецПроцедуры

// Описание обязательных настроек.
// Защитимся от ошибок в названиях настроек.
Функция ЭДО_Модуль_СтруктураОбщихНастроек()
	
	// можно завернуть на макет.
	
	Возврат Новый Структура(
		"ИспользоватьПодключаемыйМодуль,
		|МестонахождениеПодключаемогоМодуля,
		|ПодключаемыйМодульСсылка,
		|ПодключаемыйМодульИмяОбработки,
		|ПодключаемыйМодульПуть,
		|СохраненнаяВерсияМодуля,
//		|ПодключаемыйМодульСообщатьОСобытиях,
		|РежимПрокси,
		|АдресПроксиСервера,
		|ПортПроксиСервера,
		|ЛогинПроксиСервера,
		|ПарольПроксиСервера,
		|Использовать1СЭДО,
		|ЗагружатьИсходящиеДокументы,
		|ЗагружатьВходящиеДокументы"
	);
	
КонецФункции

// Времянка для определения названий объектов метаданных в текущей конфигурации
// Потом перевести на макет и/или в подключаемый модуль
Функция ЭДО_Модуль_ТипЗначенияОбъекта(Синоним,Формат="Полный") Экспорт

	Результат = ЭДО_ПодключаемыйМодуль_ОбработатьСобытие("ОпределитьТипЗначенияОбъекта", Новый Структура("Синоним", Синоним));
	
	Если Результат = Неопределено Тогда	
		
		// Оставим вариант для типовых конфигураций
		Если Синоним="Организации" Тогда
			Результат = "СправочникСсылка.Организации";
		ИначеЕсли Синоним="Контрагенты" Тогда	
			Результат = "СправочникСсылка.Контрагенты";
		КонецЕсли;
		
	КонецЕсли;
	
	Если Формат = "Краткий" Тогда
		Результат = СтрЗаменить(Результат,"СправочникСсылка.","");
		Результат = СтрЗаменить(Результат,"ДокументСсылка.","");
	ИначеЕсли Формат = "ДляЗапроса" Тогда
		Результат = СтрЗаменить(Результат,"Ссылка.",".");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ()

// Скопировано из EDI
Функция ЭДО_Модуль_ПолучитьПустуюСсылкуОбъекта(ИмяПоля) Экспорт
	
	ТипПоля = ЭДО_Модуль_ТипЗначенияОбъекта(ИмяПоля);
	
	ПустаяСсылка = Неопределено;
	
	Если ТипПоля = Неопределено Тогда
		Возврат ПустаяСсылка;
	КонецЕсли;
	
	Если Найти(ТипПоля,"СправочникСсылка.")>0 Тогда
		ИмяМетаданных	= СтрЗаменить(ТипПоля,"СправочникСсылка.","");
		Попытка
			ПустаяСсылка	= Справочники[ИмяМетаданных].ПустаяСсылка();
		Исключение
			ПустаяСсылка = Неопределено;	
		КонецПопытки;
	КонецЕсли;
	
	Если Найти(ТипПоля,"ДокументСсылка.")>0 Тогда
		ИмяМетаданных	= СтрЗаменить(ТипПоля,"ДокументСсылка.","");
		ПустаяСсылка	= Документы[ИмяМетаданных].ПустаяСсылка();
	КонецЕсли;
	Если Найти(ТипПоля,"ПеречислениеСсылка.")>0 Тогда
		ИмяМетаданных	= СтрЗаменить(ТипПоля,"ПеречислениеСсылка.","");
		ПустаяСсылка	= Перечисления[ИмяМетаданных].ПустаяСсылка();
	КонецЕсли;
	
	Возврат ПустаяСсылка;
	
КонецФункции

Функция ЭДО_КомпонентаДиадок_ТребуемаяВерсия() Экспорт
	Возврат "5_18_1_226";
КонецФункции

// Возвращает Структуру, которая впоследствии будет храниться на клиенте в форме "Модуль_РаботаСКомпонентойУправляемая"
Функция ЭДО_ПолучитьПараметрыДляКлиента() Экспорт
	
	Результат = Новый Структура;
	
	ТаблицаТиповДокументов = ЭДО_ПредопределенныеСписки_Получить("ТипыДокументов");
	СоответствиеТиповДокументов = Новый Соответствие;
	Для Каждого Эл Из ТаблицаЗначений_2_МассивСтруктур(ТаблицаТиповДокументов) Цикл
		СоответствиеТиповДокументов.Вставить(Эл.Наименование, Эл);
	КонецЦикла;
	Результат.Вставить("СоответствиеТиповДокументов", СоответствиеТиповДокументов);
	
	ОбщиеНастройки = ЭДО_Модуль_ОбщиеНастройки();
	
	Результат.Вставить("РежимПрокси",			ОбщиеНастройки.РежимПрокси);
	Результат.Вставить("АдресПроксиСервера",	ОбщиеНастройки.АдресПроксиСервера);
	Результат.Вставить("ПортПроксиСервера",		ОбщиеНастройки.ПортПроксиСервера);
	Результат.Вставить("ЛогинПроксиСервера",	ОбщиеНастройки.ЛогинПроксиСервера);
	Результат.Вставить("ПарольПроксиСервера",	ОбщиеНастройки.ПарольПроксиСервера);
	Результат.Вставить("Использовать1СЭДО",		ОбщиеНастройки.Использовать1СЭДО);
	
	Результат.Вставить("КлючРазработчика",		ЭДО_Транспорт_КлючРазработчикаAPI());
	Результат.Вставить("РежимОтладкиВключен",	ЭДО_Служебные_РежимОтладкиВключен());
	Результат.Вставить("ВерсияКомпоненты",		ЭДО_КомпонентаДиадок_ТребуемаяВерсия());
	
	Результат.Вставить("КомпонентаВСоставеОбработки",			ЭтотОбъект.Метаданные().Макеты.Найти("Diadoc_dll_zip") <> Неопределено);	
	Результат.Вставить("МассивСопоставленныхOrganizationId",	ЭДО_Модуль_ТаблицаОрганизацийПользователя().ВыгрузитьКолонку("boxId"));
	
	Возврат Результат;
	
КонецФункции


//}		МОДУЛЬ


//**********************************************
//{		ПРЕОБРАЗОВАНИЯ СУЩНОСТЕЙ

// Из ТаблицыЗначений ТЗ получает ДеревоЗначений Дерево с иерархией строк по колонке ИмяРодителя, со значением ЗначениеРодителя (для вложенных)
Функция ЭДО_Преобразование_ТаблицаЗначенийВДеревоЗначений(ТЗ,Дерево,ИмяРодителя,ЗначениеРодителя) Экспорт
	
	НайденныеСтроки = ТЗ.НайтиСтроки(Новый Структура(ИмяРодителя,ЗначениеРодителя));
	
	Для Каждого Стр ИЗ НайденныеСтроки Цикл
		НоваяСтрока = Дерево.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
		ЭДО_Преобразование_ТаблицаЗначенийВДеревоЗначений(ТЗ,НоваяСтрока,ИмяРодителя,Стр.ID);
	КонецЦикла;
	
КонецФункции

Функция ЭДО_Преобразование_МассивСтруктурВДеревоЗначений(МассивСтруктур, ИмяРодителя, ЗначениеРодителя) Экспорт
		
	ТЗ = врем_МассивСтруктур_2_ТаблицаЗначений(МассивСтруктур);	
	
	Дерево = Новый ДеревоЗначений;
	
	Для Каждого КлючИЗначение Из МассивСтруктур[0] Цикл
		Дерево.Колонки.Добавить(КлючИЗначение.Ключ,Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(250))); //пока хардкодом
	КонецЦикла;
	
	ЭДО_Преобразование_ТаблицаЗначенийВДеревоЗначений(ТЗ,Дерево,ИмяРодителя,ЗначениеРодителя);
	
	Возврат Дерево;
	
КонецФункции

//}		ПРЕОБРАЗОВАНИЯ СУЩНОСТЕЙ


//**********************************************
//{		КЭШИРОВАНИЕ

Функция ЭДО_Кэш_Прочитать(ИмяЗначения) Экспорт
	
	Если Кэш = Неопределено Тогда
		Возврат Неопределено;
	ИначеЕсли НЕ Кэш.Получить(ИмяЗначения)=Неопределено Тогда	
		Возврат Кэш.Получить(ИмяЗначения);
	Иначе
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции

Процедура ЭДО_Кэш_Поместить(ИмяЗначения,Значение) Экспорт
	
	Если Кэш = Неопределено Тогда
		Кэш = Новый Соответствие;
	КонецЕсли;
	
	Кэш.Вставить(ИмяЗначения,Значение);
	
КонецПроцедуры

//}		КЭШИРОВАНИЕ


//**********************************************
//{		НЕРАЗОБРАННОЕ


Функция ПолучитьСоответствиеСертификатовОрганизаций(МассивПерсональныхСертификатов) Экспорт
	
	СоответствиеСертификатовОрганизаций = Новый Соответствие;
			
	Для Каждого текОрганизация Из ЭДО_Модуль_ТаблицаОрганизацийПользователя() Цикл
		
		ТаблицаСертификатовОрганизации = ЭДО_СправочникМенеджер_ЗначениеДопРеквизита(текОрганизация.Ссылка, "ХранилищеСертификатовОрганизации");
		
		Если ЗначениеЗаполнено(ТаблицаСертификатовОрганизации) Тогда
			Для Каждого СтрокаТЗ Из ТаблицаСертификатовОрганизации Цикл
				Если МассивПерсональныхСертификатов.Найти(СтрокаТЗ.ОтпечатокСертификата) <> Неопределено Тогда
					СоответствиеСертификатовОрганизаций.Вставить(текОрганизация.BoxID, Новый Структура("ОтпечатокСертификата, Организация, ДиадокСоединение, Токен", СтрокаТЗ.ОтпечатокСертификата, текОрганизация.Ссылка));
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СоответствиеСертификатовОрганизаций;
	
КонецФункции

Функция ПолучитьТокенДляBoxID(BoxID)
	
	//СоответствиеТокеновBoxID - в этом соответствии хранятся все токены от COM-соединений при авторизации по заданным в настройках сертификатам
	//С пустым ключом хранится токен при интерактивной авторизации, в т.ч. по логину/паролю
	
	Если СоответствиеТокеновBoxID = Неопределено Тогда
		СоответствиеТокеновBoxID = Новый Соответствие;
	КонецЕсли;
	
	Результат = СоответствиеТокеновBoxID.Получить(BoxID);
	
	Если Результат = Неопределено Тогда
		Результат = СоответствиеТокеновBoxID.Получить("");
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭДО_Модуль_СтруктураДанныхСтрокиСписка() Экспорт
	
	Возврат Новый Структура(ЭДО_Модуль_СтруктураДанныхСтрокиСпискаСтрокой());
	
КонецФункции

Функция ЭДО_Модуль_СтруктураДанныхСтрокиСпискаСтрокой() Экспорт
	
	Возврат "ТребуемоеДействие,Документ,НомерДокумента,ДатаДокумента,Организация,Контрагент,ДокументЭДО,СуммаДокумента,ИмяКартинки,Архивный,ВидПакета,ВидПакетаID,Пакет,Статус,ВидЭлДокумента,ВидЭлДокументаID";
	
КонецФункции

// Скопировано из типового модуля ДД
Функция ПолучитьКодРегионаДляДиадок(НаименованиеРегиона) Экспорт
	Если найти(ВРЕГ(НаименованиеРегиона), врег("Адыгея"))> 0 Тогда 
		Возврат "01"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Башкортостан"))>0 Тогда 
		Возврат "02"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Алтайский"))>0 Тогда 
		Возврат "22" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Ингушетия"))>0 Тогда 
		Возврат "06"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Кабардино"))>0 Тогда 
		Возврат "07"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Карачаево"))>0 Тогда 
		Возврат "09"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Карелия"))>0 Тогда 
		Возврат "10"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Коми"))>0 Тогда 
		Возврат "11"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Марий"))>0 Тогда 
		Возврат "12" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Мордовия"))>0 Тогда 
		Возврат "13" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Якутия"))>0 Тогда 
		Возврат "14" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Татарстан"))>0 Тогда 
		Возврат "16" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Тыва"))>0 Тогда 
		Возврат "17" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Удмуртская"))>0 Тогда 
		Возврат "18" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Тыва"))>0 Тогда 
		Возврат "17" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Хакасия"))>0 Тогда 
		Возврат "19" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Чувашская"))>0 Тогда 
		Возврат "21" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Чувашия"))>0 Тогда 
		Возврат "21" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Алтай"))>0 Тогда 
		Возврат "04"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Краснодарский"))>0 Тогда 
		Возврат "23" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Приморский"))>0 Тогда 
		Возврат "25" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Ставропольский"))>0 Тогда 
		Возврат "26" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Хабаровский"))>0 Тогда 
		Возврат "27" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Амурская"))>0 Тогда 
		Возврат "28" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Архангельская"))>0 Тогда 
		Возврат "29" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Астраханская"))>0 Тогда 
		Возврат "30" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Белгородская"))>0 Тогда 
		Возврат "31" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Брянская"))>0 Тогда 
		Возврат "32"                                                    
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Владимирская"))>0 Тогда 
		Возврат "33"                                                    
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Волгоградская"))>0 Тогда 
		Возврат "34" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Вологодская"))>0 Тогда 
		Возврат "35" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Воронежская"))>0 Тогда 
		Возврат "36" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Ивановская"))>0 Тогда 
		Возврат "37" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Иркутская"))>0 Тогда 
		Возврат "38" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Калининградская"))>0 Тогда 
		Возврат "39" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Калужская"))>0 Тогда 
		Возврат "40" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Камчатский"))>0 Тогда 
		Возврат "41" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Кемеровская"))>0 Тогда 
		Возврат "42" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Кировская"))>0 Тогда 
		Возврат "43" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Костромская"))>0 Тогда 
		Возврат "44" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Курганская"))>0 Тогда 
		Возврат "45"   
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Курская"))>0 Тогда 
		Возврат "46" 		
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Ленинградская"))>0 Тогда 
		Возврат "47" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Липецкая"))>0 Тогда 
		Возврат "48" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Магаданская"))>0 Тогда 
		Возврат "49" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Московская"))>0 Тогда 
		Возврат "50"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Мурманская"))>0 Тогда 
		Возврат "51"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Нижегородская"))>0 Тогда 
		Возврат "52"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Новосибирская"))>0 Тогда 
		Возврат "54"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Томская"))>0 Тогда 
		Возврат "70"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Омская"))>0 Тогда 
		Возврат "55"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Оренбургская"))>0 Тогда 
		Возврат "56"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Орловская"))>0 Тогда 
		Возврат "57"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Пензенская"))>0 Тогда 
		Возврат "58"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Пермский"))>0 Тогда 
		Возврат "59"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Псковская"))>0 Тогда 
		Возврат "60"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Ростовская"))>0 Тогда 
		Возврат "61"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Рязанская"))>0 Тогда 
		Возврат "62"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Самарская"))>0 Тогда 
		Возврат "63"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Саратовская"))>0 Тогда 
		Возврат "64"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Сахалинская"))>0 Тогда 
		Возврат "65"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Саха"))>0 Тогда //саху ставим после сахалина
		Возврат "14" 
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Смоленская"))>0 Тогда 
		Возврат "67"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Тамбовская"))>0 Тогда 
		Возврат "68"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Тверская"))>0 Тогда 
		Возврат "69"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Тульская"))>0 Тогда 
		Возврат "71"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Тюменская"))>0 Тогда 
		Возврат "72"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Ульяновская"))>0 Тогда 
		Возврат "73"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Челябинская"))>0 Тогда 
		Возврат "74"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Забайкальский"))>0 Тогда 
		Возврат "75"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Ярославская"))>0 Тогда 
		Возврат "76"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Еврейская"))>0 Тогда 
		Возврат "79"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Ненецкий"))>0 Тогда 
		Возврат "83"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Мансийский"))>0 Тогда 
		Возврат "86"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Чукотский"))>0 Тогда 
		Возврат "87"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Ненецкий"))>0 Тогда 
		Возврат "89"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Чеченская"))>0 Тогда 
		Возврат "20"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Свердловская"))>0 Тогда 
		Возврат "66"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Новгородская"))>0 Тогда 
		Возврат "53"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Горьковская"))>0 Тогда   //синоним нижегородской
		Возврат "52"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Бурятия"))>0 Тогда 
		Возврат "03"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Пермская"))>0 Тогда     //Пермская обл - синоним Пермского края
		Возврат "59"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Красноярский"))>0 Тогда 
		Возврат "24"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Северная Осетия"))>0 Тогда 
		Возврат "15"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Камчатская"))>0 Тогда //Камчатская обл - синоним Камчатского края
		Возврат "41"                                                                                                  
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Калмыкия"))>0 Тогда 
		Возврат "08"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Читинская"))>0 Тогда   //Забайкальский край
		Возврат "75"                                                                           
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Москва"))>0 Тогда 
		Возврат "77"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Калмыкия"))>0 Тогда 
		Возврат "08"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Дагестан"))>0 Тогда 
		Возврат "05"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Санкт-Петербург"))>0 Тогда 
		Возврат "78"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Ленинград"))>0 Тогда 
		Возврат "78"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Крым"))>0 Тогда 
		Возврат "91"
	ИначеЕсли найти(врег(НаименованиеРегиона), врег("Севастополь"))>0 Тогда 
		Возврат "92"
	Иначе 	
		Возврат ""
	КонецЕсли;	
КонецФункции	

// Скопировано из типового модуля ДД, надо завернуть на таблицу типов документов
Функция врем_ПредставлениеЭД(Контент,Тип,ИмяФайла="")
	
	Если Тип = "Invoice" Тогда
		
		Возврат "Счет-фактура " + ПредставлениеДокументНомерДата(Контент.Number, Контент.Date);
		
	ИначеЕсли Тип = "InvoiceRevision" Тогда
		
		Возврат "Исправление " + ПредставлениеДокументНомерДата(Контент.InvoiceRevisionNumber, Контент.InvoiceRevisionDate)
					+ " счета-фактуры " + ПредставлениеДокументНомерДата(Контент.Number, Контент.Date);
		
	ИначеЕсли Тип = "InvoiceCorrection" Тогда
		
		Возврат "Корректировочный счет-фактура " + ПредставлениеДокументНомерДата(Контент.InvoiceCorrectionNumber, Контент.InvoiceCorrectionDate);
		
	ИначеЕсли Тип = "InvoiceCorrectionRevision" Тогда
		
		Возврат "Исправление " + ПредставлениеДокументНомерДата(Контент.InvoiceCorrectionNumber, Контент.InvoiceCorrectionDate)
			+ " корректировочного счета-фактуры " + ПредставлениеДокументНомерДата(Контент.OriginalInvoiceCorrectionNumber, Контент.OriginalInvoiceCorrectionDate);
			
	ИначеЕсли Тип = "UtdTorg12" Тогда
		
		Возврат "Торг-12 " + ПредставлениеДокументНомерДата(Контент.Number, Контент.Date) + " (УПД)";
		
	ИначеЕсли Тип = "UtdInvoice" Тогда
		
		Возврат "Счет-фактура " + ПредставлениеДокументНомерДата(Контент.Number, Контент.Date) + " (УПД)";
		
	ИначеЕсли Тип = "UtdAcceptanceCertificate" Тогда
		
		Возврат "Акт " + ПредставлениеДокументНомерДата(Контент.Number, Контент.Date) + " (УПД)";
		
	ИначеЕсли Тип = "UniversalTransferDocument" Тогда
		
		Возврат "УПД " + ПредставлениеДокументНомерДата(Контент.Number, Контент.Date);

	ИначеЕсли Тип = "UniversalCorrectionDocument" Тогда
		
		Возврат "УКД " + ПредставлениеДокументНомерДата(Контент.Number, Контент.Date);
		
	// legacy - для XmlTorg12 и Torg12	
	ИначеЕсли найти(Тип, "Torg12")>0 Тогда
		
		Возврат "Торг-12 " + ПредставлениеДокументНомерДата(Контент.Number, Контент.Date);
		
	// legacy - для XmlAcceptanceCertificate и AcceptanceCertificate	
	ИначеЕсли найти(Тип, "AcceptanceCertificate")>0 Тогда
		
		Возврат "Акт " + ПредставлениеДокументНомерДата(Контент.Number, Контент.Date);
		
	Иначе 
		
		Возврат ИмяФайла;
		
	КонецЕсли;
	
КонецФункции

Функция ПредставлениеДокументНомерДата(ДокНомер, ДокДата)
	
	Возврат "№ " + ДокНомер + " от " + Формат(ДокДата, "ДФ=dd.MM.yyyy");
	
КонецФункции


// Возвращает объект виртуального модуля
Функция ЭДО_Модуль_РаботаСКонтентом() Экспорт

	РежимОтладки = ЭДО_Служебные_РежимОтладкиВключен();
	
	Результат = ЭДО_Кэш_Прочитать("Модуль_РаботаСКонтентом");
	
	Если Результат=Неопределено ИЛИ РежимОтладки Тогда
		
		Если РежимОтладки Тогда
			
			Результат = ВнешниеОбработки.Создать(ЭДО_Модуль_КаталогОбработки()+"Модуль_РаботаСКонтентом.epf",Ложь);
			
		Иначе
			
			ИмяВременногоФайла = ПолучитьИмяВременногоФайла("epf");
			ПолучитьМакет("Модуль_РаботаСКонтентом_epf").Записать(ИмяВременногоФайла);
			
			Результат = ВнешниеОбработки.Создать(ИмяВременногоФайла,Ложь);
			
			УдалитьФайлы(ИмяВременногоФайла);
			
		КонецЕсли;
		
		Результат.ОсновнойМодуль = ЭтотОбъект;
		
		ЭДО_Кэш_Поместить("Модуль_РаботаСКонтентом",Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СобратьПакетПоСтрокеСписка(СтрокаСписка) Экспорт
	
	Пакет = ЭДО_ПакетДокументовМенеджер_СоздатьНовый();
	
	ЗаполнитьЗначенияСвойств(Пакет.Данные1С,СтрокаСписка,"ВидПакета,Документ,ДатаДокумента,НомерДокумента,СуммаДокумента,Контрагент,Организация");
	Пакет.Данные1С.ПереотправляемыйПакетСсылка = СтрокаСписка.Пакет;	// для пакетов, которые уже сохранены в базу (например, была неудачная попытка отправки)
	
	Если ЭДО_Использовать1СЭДО() Тогда
		ВидПакетаРазвернутый = ЭДО_СправочникМенеджер_ПолучитьЭлемент_1СЭДО("ВидыПакетов", СтрокаСписка.ВидПакетаID);
	Иначе
		ВидПакетаРазвернутый = ЭДО_СправочникМенеджер_ПолучитьЭлемент("ВидыПакетов", СтрокаСписка.ВидПакета);
	КонецЕсли;
	
	ВидПакетаРазвернутый.Свойство("ID", Пакет.Данные1С.ВидПакетаID);
	
	Параметры = Новый Структура("ВидПакетаРазвернутый,СтрокаСписка,Пакет", ВидПакетаРазвернутый, СтрокаСписка, Пакет);
	ЭДО_ПодключаемыйМодуль_ОбработатьСобытие("ПодготовитьПакет", Параметры); // здесь должна располагаться основная логика формирования пакета: какие документы и каким образом получить.
	
	ЭДО_ПакетДокументов_ПодготовитьСвойстваДляОтправки_Компонента(Пакет);// заполним все ID (отправитель, получатель, ...)
	
	Возврат Пакет;

КонецФункции

Функция ТаблицаЗначений_2_МассивСтруктур(ТаблЗнач) Экспорт
	
	Результат = Новый Массив;
	СтрокаКлючей = "";
	
	Для Каждого Колонка из ТаблЗнач.Колонки Цикл
		СтрокаКлючей = СтрокаКлючей + ?(ПустаяСтрока(СтрокаКлючей), "", ",") + Колонка.Имя;
	КонецЦикла;                                                        
	
	Если ТипЗнч(ТаблЗнач) = Тип("ТаблицаЗначений") тогда
		
		Для Каждого Стр Из ТаблЗнач Цикл
			
			ЭлементСписка = Новый Структура(СтрокаКлючей);
			ЗаполнитьЗначенияСвойств(ЭлементСписка, Стр);
			
			Для Каждого ЭлементСтруктуры Из ЭлементСписка Цикл
				Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("ТаблицаЗначений") Тогда
					ЭлементСписка.Вставить(ЭлементСтруктуры.Ключ, ТаблицаЗначений_2_МассивСтруктур(ЭлементСтруктуры.Значение));
				КонецЕсли;
			КонецЦикла;
			
			Результат.Добавить(ЭлементСписка);             
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция врем_МассивСтруктур_2_ТаблицаЗначений(МассивСтруктур)
	
	// Придадим массиву структур из УФ видимость ТаблицыЗначений
	Результат = Новый ТаблицаЗначений;
	Для Каждого КлючИЗначение Из МассивСтруктур[0] Цикл
		Результат.Колонки.Добавить(КлючИЗначение.Ключ,Новый ОписаниеТипов("Строка",,Новый КвалификаторыСтроки(250))); //пока хардкодом
	КонецЦикла;
	
	Для Каждого Эл Из МассивСтруктур Цикл
		НовСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока,Эл);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Выбирает из Пакет.ДанныеДД 4 ID (отправитель/получатель и их подразделения)
// Возвращает Структуру с соответствующими ссылками на справочник Диадок_ЮрФизЛица
Функция СсылкиНаСоответствияДляМаршрутизации(Пакет) Экспорт
	
	Результат = Новый Структура;
	
	Если ЭДО_Использовать1СЭДО() Тогда
		Результат.Вставить("Отправитель",				ПолучитьСоответствиеЮрФизЛицаПоИД_1СЭДО("Организации", Пакет.ДанныеДД.OrganizationId));
		Результат.Вставить("Получатель",				ПолучитьСоответствиеЮрФизЛицаПоИД_1СЭДО("Контрагенты", Пакет.ДанныеДД.CounteragentId, Пакет.ДанныеДД.OrganizationId));
		Результат.Вставить("ПодразделениеОтправителя",	"");
		Результат.Вставить("ПодразделениеПолучателя",	"");		
	Иначе	
		Результат.Вставить("Отправитель",				ПолучитьСоответствиеЮрФизЛицаПоИД(Пакет.ДанныеДД.OrganizationId,	"Организации"));
		Результат.Вставить("Получатель",				ПолучитьСоответствиеЮрФизЛицаПоИД(Пакет.ДанныеДД.CounteragentId,	"Контрагенты"));
		Результат.Вставить("ПодразделениеОтправителя",	ПолучитьСоответствиеЮрФизЛицаПоИД(Пакет.ДанныеДД.FromDepartmentId,	"ПодразделенияОрганизаций"));
		Результат.Вставить("ПодразделениеПолучателя",	ПолучитьСоответствиеЮрФизЛицаПоИД(Пакет.ДанныеДД.ToDepartmentId,	"ПодразделенияКонтрагентов"));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьСоответствиеЮрФизЛицаПоИД(ИД,ИмяСправочника)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	Диадок_ЮрФизЛица.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Диадок_ЮрФизЛица КАК Диадок_ЮрФизЛица
	|ГДЕ
	|	Диадок_ЮрФизЛица.ID = &ID
	|	И Диадок_ЮрФизЛица.ИмяСправочника = &ИмяСправочника"
	);
	Запрос.УстановитьПараметр("ID",				ИД);
	Запрос.УстановитьПараметр("ИмяСправочника",	ИмяСправочника);
	
	Возврат ЭДО_Служебные_ПолучитьРезультатЗапроса(Запрос, "Ссылка", Справочники.Диадок_ЮрФизЛица.ПустаяСсылка())
	
КонецФункции

Функция ПолучитьСоответствиеЮрФизЛицаПоИД_1СЭДО(ИмяСправочника, ИД, ОрганизацияИД=Неопределено)
	
	Запрос = Новый Запрос;
	
	Если ИмяСправочника = "Контрагенты" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	СоглашенияОбИспользованииЭД.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
		|ГДЕ
		|	(ВЫРАЗИТЬ(СоглашенияОбИспользованииЭД.ИдентификаторКонтрагента КАК СТРОКА(50))) = (ВЫРАЗИТЬ(&ИД КАК СТРОКА(50))) И 
		|	(ВЫРАЗИТЬ(СоглашенияОбИспользованииЭД.ИдентификаторОрганизации КАК СТРОКА(50))) = (ВЫРАЗИТЬ(&ОрганизацияИД КАК СТРОКА(50))) ";
		
		Запрос.УстановитьПараметр("ОрганизацияИД", ОрганизацияИД);
		
	ИначеЕсли ИмяСправочника = "Организации" Тогда
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ПрофилиНастроекЭДО.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ПрофилиНастроекЭДО КАК ПрофилиНастроекЭДО
		|ГДЕ
		|	(ВЫРАЗИТЬ(ПрофилиНастроекЭДО.ИдентификаторОрганизации КАК СТРОКА(50))) = (ВЫРАЗИТЬ(&ИД КАК СТРОКА(50)))";
						
	Иначе
		Возврат Неопределено;
	КонецЕсли;	
		
	Запрос.УстановитьПараметр("ИД", ИД);
	
	Возврат ЭДО_Служебные_ПолучитьРезультатЗапроса(Запрос, "Ссылка", "");
	
КонецФункции

//}		НЕРАЗОБРАННОЕ


//**************************************
//{		РАБОТА С ОБЪЕКТАМИ КОМПОНЕНТЫ ЧЕРЕЗ ПРОСЛОЙКУ XDTO

// Инициализирует пустой контент, из которого в конце концов будет собран новый документ для отправки
Функция ДД_Компонента_ПолучитьПустойКонтент(ИмяКонтента,СоздатьВсеСвойства = Ложь) Экспорт
	
	// Внимание! Будет использоваться в ПМ, не переименовывать!
	_Фабрика	= ЭДО_Компонента_ФабрикаXDTO();
	_Тип		= _Фабрика.Тип(ДД_Компонента_URIТиповКомпоненты(),ИмяКонтента);
	Возврат ЭДО_Служебные_СоздатьПустойОбъектXDTO(_Фабрика,_Тип,СоздатьВсеСвойства); // создаем ОбъектXDTO со всеми вложенными свойствами сразу
	
КонецФункции

// Возвращает Массив типов XDTO, соответствующих документам, которые мы можем создавать и заполнять.
Функция ДД_Компонента_ДоступныеТипыКонтентов() Экспорт
	
	// Внимание! Будет использоваться в ПМ, не переименовывать!
	Результат = Новый Массив;
	
	Для Каждого Пакет Из ЭДО_Компонента_ФабрикаXDTO().Пакеты Цикл
		Если Пакет.URIПространстваИмен = ДД_Компонента_URIТиповКомпоненты() Тогда
			
			Для Каждого Свойство Из Пакет.КорневыеСвойства Цикл
				Результат.Добавить(Свойство.Тип);
			КонецЦикла;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Типы объектов, применяемых при работе с компонентой, описаны в макете "ТипыОбъектовКомпоненты_xsd".
Функция ДД_Компонента_URIТиповКомпоненты() Экспорт
	
	Возврат "http://diadoc.kontur.ru/dll_types";
	
КонецФункции

// Возвращает ФабрикаXDTO по схеме, лежащей в макете "ТипыОбъектовКомпоненты_xsd"
// Для упрощения и визуализации доступных типов, а также частичной валидации
Функция ЭДО_Компонента_ФабрикаXDTO() Экспорт
	
	Результат = ЭДО_Кэш_Прочитать("ЭДО_Компонента_ФабрикаXDTO");
	
	Если Результат = Неопределено Тогда
		
		ФайлСхемы = ПолучитьИмяВременногоФайла("xsd");
		ПолучитьМакет("ТипыОбъектовКомпоненты_xsd").Записать(ФайлСхемы);
		Результат = СоздатьФабрикуXDTO(ФайлСхемы);
		УдалитьФайлы(ФайлСхемы);
		
		Если ЭДО_Служебные_РежимОтладкиВключен() Тогда
			//фабрику создаем из локального файла, если не забыли положить его туда
			ЛокальныйФайл = Новый Файл(ЭДО_Модуль_КаталогОбработки()+"component_types.xsd");
			Если ЛокальныйФайл.Существует() Тогда
				Результат = СоздатьФабрикуXDTO(ЛокальныйФайл.ПолноеИмя);
			КонецЕсли;
		КонецЕсли;
		
		ЭДО_Кэш_Поместить("ЭДО_Компонента_ФабрикаXDTO",Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Создадим шаблон кода для заполнения всех объектов в компоненте. Описание типов и связи между ними берется из XSD-схемы в макете "ТипыОбъектовКомпоненты_xsd"
Функция ДД_Компонента_ГенерироватьКодПодключаемогоМодуля() Экспорт
	
	// Можно еще прикрутить фильтрацию по видам документов, чтобы не было необходимости заполнять абсолютно все виды.
	
	Запись = Новый ЗаписьXML;
	Запись.УстановитьСтроку();
	
	// Сначала соберем все доступные типы объектов
	Типы = Новый Массив;
	
	Для Каждого Пакет Из ЭДО_Компонента_ФабрикаXDTO().Пакеты Цикл
		Если Пакет.URIПространстваИмен = ДД_Компонента_URIТиповКомпоненты() Тогда
			
			Для Каждого Свойство Из Пакет Цикл
				
				Если ТипЗнч(Свойство)=Тип("ТипОбъектаXDTO") Тогда
					Типы.Добавить(Свойство);
				КонецЕсли;
				
			КонецЦикла;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Теперь создадим процедуры для заполнения этих объектов
	// Тут надо будет решить, все-таки процедуры или функции (на случай, когда объект будет пропущен)
	
	Для Каждого Элемент Из Типы Цикл
		
		Запись.ЗаписатьБезОбработки("
		|Процедура Заполнить_"+Элемент.Имя+"(Контент,Параметры)
		|");
		Запись.ЗаписатьБезОбработки("
		|	// Документация: http://1c-docs.diadoc.ru/ru/latest/"+Элемент.Имя+".html
		|
		|");
		
		// Еще хорошо бы закинуть шаблон для всех вложенных свойств
		
		// Запишем заполнение свойств
		Для Каждого Свойство Из Элемент.Свойства Цикл
			
			Если Прав(Свойство.Имя,9)="_ReadOnly" Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ТипЗнч(Свойство.Тип) = Тип("ТипОбъектаXDTO")
				Или Свойство.Тип.Имя = "anyType" Тогда // anyType - для ссылок на справочники 1С
				
				Если Свойство.ВерхняяГраница<>1 Тогда
					//у нас массив
					// TODO что-то здесь не так
					Запись.ЗаписатьБезОбработки("
					|	Для Сч=1 По 0 Цикл
					|		НовЭлемент = Контент."+Свойство.Имя+".Добавить();
					|		НовЭлемент."+Свойство.Имя+"=Неопределено;
					|	КонецЦикла;
					|
					|");
					
				Иначе
					//единичный элемент
					
					СтрТабов = ДД_Компонента_Кодогенератор_ПодстрокаДляВыравнивания(""""+Свойство.Имя+""",",7);
					Запись.ЗаписатьБезОбработки("	УстановитьЗначениеXDTO(Контент, """+Свойство.Имя+""","+СтрТабов+"Неопределено);
					|");
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Запись.ЗаписатьБезОбработки(Символы.ПС);
		
		// Запишем заполнение вложенных объектов
		Для Каждого Свойство Из Элемент.Свойства Цикл
			
			Если Прав(Свойство.Имя,9)="_ReadOnly" 
				Или Свойство.Тип.Имя = "anyType" Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТипЗнч(Свойство.Тип) = Тип("ТипОбъектаXDTO") Тогда
				
				Если Свойство.ВерхняяГраница<>1 Тогда
					
					//у нас массив
					Запись.ЗаписатьБезОбработки("
					|
					|	ТипСтроки = Контент.Свойства().Получить("""+Свойство.Имя+""").Тип.Имя;
					|	Для Сч=1 По 0 Цикл
					|		
					|		НовЭлемент = Контент."+Свойство.Имя+".Добавить(НовыйКонтент(ТипСтроки));
					|		Заполнить_"+Свойство.Тип.Имя+"(НовЭлемент, Неопределено);
					|	
					|	КонецЦикла;
					|
					|");
					
				Иначе	
					
					// Единичный элемент
					СтрТабов = ДД_Компонента_Кодогенератор_ПодстрокаДляВыравнивания("Заполнить_"+Свойство.Тип.Имя,10);
					Запись.ЗаписатьБезОбработки("	Заполнить_"+Свойство.Тип.Имя+СтрТабов+"(Контент."+Свойство.Имя+", Неопределено);
					|");
					
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Запись.ЗаписатьБезОбработки("
		|КонецПроцедуры
		|");
		
	КонецЦикла;
	
	
	ТекстМодуля =	ЭДО_Служебные_ПримерКода("ПодключаемыйМодуль_НачалоПримера").ПолучитьТекст()
					+ Запись.Закрыть()
					+ ЭДО_Служебные_ПримерКода("ПодключаемыйМодуль_КонецПримера").ПолучитьТекст();
				
	ТекстМодуля = СтрЗаменить(ТекстМодуля,"#Область","//#Область");
	ТекстМодуля = СтрЗаменить(ТекстМодуля,"#КонецОбласти","//#КонецОбласти");
	
	// Ключевое слово #ЗаменаСимвола в макете не удалось настроить. Миста тоже не в курсе: http://www.forum.mista.ru/topic.php?id=596768
	// Поэтому придется работать с текстом напрямую.
	
	Результат = Новый ТекстовыйДокумент;
	Результат.УстановитьТекст(ТекстМодуля);
	
	Возврат Результат;
	
КонецФункции

Функция ДД_Компонента_Кодогенератор_ПодстрокаДляВыравнивания(ИсходнаяСтрока,КоличествоТабуляций)
	
	Результат = "";
	Табов = Макс(КоличествоТабуляций-Цел(СтрДлина(ИсходнаяСтрока)/4),0);
	Для Сч=1 По Табов Цикл
		Результат = Результат+Символы.Таб;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Для совместимости с визуализацией печатных форм электронных документов
Функция ОбъектXDTOВСтруктуру(ОбъектXDTO,ПреобразовыватьСпискиВМассивы=Истина) Экспорт
	// второй параметр уже не имеет смысла, похоже
	Если ТипЗнч(ОбъектXDTO)=Тип("ОбъектXDTO") Тогда
		
		Результат = Новый Структура;
		
		Для Каждого Свойство Из ОбъектXDTO.Свойства() Цикл
			
			Если Найти(Свойство.Имя,"_ReadOnly")>0 Тогда
				ИмяСвойстваДляВставки = СтрЗаменить(Сред(Свойство.Имя,2),"_ReadOnly","");
			Иначе
				ИмяСвойстваДляВставки = Свойство.Имя;
			КонецЕсли;
			
			Если Найти(ИмяСвойстваДляВставки,"Ссылка")>0 Тогда
				мЗначение = ОбъектXDTO[Свойство.Имя];
				Если ЗначениеЗаполнено(мЗначение) Тогда
					мСсылка = ЗначениеИзСтрокиВнутр(ОбъектXDTO[Свойство.Имя]);
					Результат.Вставить(ИмяСвойстваДляВставки,мСсылка);
				Иначе
					Результат.Вставить(ИмяСвойстваДляВставки,Неопределено);
				КонецЕсли;
			ИначеЕсли ТипЗнч(Свойство.Тип)=Тип("ТипЗначенияXDTO")
				Или Свойство.Тип.Имя = "anyType" Тогда // костыль для ссылок на справочники
				//единичный элемент
				Результат.Вставить(ИмяСвойстваДляВставки,ОбъектXDTO[Свойство.Имя]);
				
			ИначеЕсли ТипЗнч(Свойство.Тип)=Тип("ТипОбъектаXDTO") Тогда	
				
				//Если ТипЗнч(ОбъектXDTO[Свойство.Имя])=Тип("СписокXDTO") Тогда
				//	//массив
				//	Результат.Вставить(ИмяСвойстваДляВставки,СписокXDTOВТаблицу(ОбъектXDTO[Свойство.Имя],Свойство.Тип,ПреобразовыватьСпискиВМассивы));
				//Иначе
				//	//вложенный объект
				//	Результат.Вставить(ИмяСвойстваДляВставки,ОбъектXDTOВСтруктуру(ОбъектXDTO[Свойство.Имя]));
				//КонецЕсли;
				Результат.Вставить(ИмяСвойстваДляВставки,ОбъектXDTOВСтруктуру(ОбъектXDTO[Свойство.Имя],ПреобразовыватьСпискиВМассивы));
				
			КонецЕсли;
			
		КонецЦикла;
	
	ИначеЕсли ТипЗнч(ОбъектXDTO) = Тип("СписокXDTO") Тогда
		
		Если ПреобразовыватьСпискиВМассивы Тогда
			
			Результат = Новый Массив;
			Для Каждого ЭлементСписка Из ОбъектXDTO Цикл
				Результат.Добавить(ОбъектXDTOВСтруктуру(ЭлементСписка,ПреобразовыватьСпискиВМассивы));
			КонецЦикла;
			
		Иначе	
			
			Результат = Новый ТаблицаЗначений;
			Для Каждого Свойство Из ОбъектXDTO.ВладеющееСвойство.Тип.Свойства Цикл
				Результат.Колонки.Добавить(Свойство.Имя);
			КонецЦикла;
			
			Для Каждого ЭлементСписка Из ОбъектXDTO Цикл
				
				НоваяСтрока = Результат.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ЭлементСписка);
				// хорошо бы еще вложенные таблицы тоже преобразовать
				
			КонецЦикла;
			
		КонецЕсли;
		
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция СписокXDTOВТаблицу(СписокXDTO,ТипЭлементаXDTO,ПреобразовыватьСпискиВМассивы=Ложь)
	
	Результат = Новый ТаблицаЗначений;
	
	КолонкиПреобразуемыеВСсылки = Новый Массив;//костыль
	Для Каждого Свойство Из ТипЭлементаXDTO.Свойства Цикл
		
		Результат.Колонки.Добавить(Свойство.Имя);
		Если Найти(Свойство.Имя,"Ссылка")>0 Тогда
			КолонкиПреобразуемыеВСсылки.Добавить(Свойство.Имя);
		КонецЕсли;
		//будем ли проверять вложенные Структуры? Пока нет, в компоненте такое не практикуется
		
	КонецЦикла;
	
	Для Каждого Элемент Из СписокXDTO Цикл
		НовСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока,Элемент);
		
	КонецЦикла;
	
	Для Каждого Колонка Из КолонкиПреобразуемыеВСсылки Цикл
		Для Каждого Стр Из Результат Цикл
			
			Если ЗначениеЗаполнено(Стр[Колонка]) Тогда
				Стр[Колонка] = ЗначениеИзСтрокиВнутр(Стр[Колонка]);
			КонецЕсли;	
			
		КонецЦикла;
	КонецЦикла;
	
	Если ПреобразовыватьСпискиВМассивы Тогда
		Возврат ТаблицаЗначений_2_МассивСтруктур(Результат);
	Иначе	
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

// Возвращает дополнительное поле из StructedAdditionalInfos или AdditionalInfo шапки документа
Функция ПолучитьДопСвойствоШапкиДокумента(ИмяСвойства, КонтентXDTO, ТипДокумента) Экспорт
	
	Если ТипДокумента = "invoice" Тогда
		
		Для каждого ЭлементСписка Из КонтентXDTO.StructedAdditionalInfos Цикл
		
			Если нрег(ЭлементСписка.Key) = нрег(ИмяСвойства) Тогда
				Возврат ЭлементСписка.Value;
			КонецЕсли;	
		
		КонецЦикла;
		
	ИначеЕсли ТипДокумента = "universaltransferdocument" Тогда
		
		Для каждого ЭлементСписка Из КонтентXDTO.AdditionalInfoId.StructedAdditionalInfos Цикл
		
			Если нрег(ЭлементСписка.Key) = нрег(ИмяСвойства) Тогда
				Возврат ЭлементСписка.Value;
			КонецЕсли;	
		
		КонецЦикла;
		
	ИначеЕсли ТипДокумента = "xmltorg12" Тогда
		
		Возврат ПолучитьДопСвойство_СтарыйФормат(КонтентXDTO.AdditionalInfo, нрег(ИмяСвойства));
		
	КонецЕсли;	
	
	Возврат Неопределено;
	
КонецФункции

Функция ПолучитьДопСвойство_СтарыйФормат(СтрокаДопИнфо, НаименованиеСвойства)
	
	Если Найти(Врег(СтрокаДопИнфо), Врег(НаименованиеСвойства)) > 0 Тогда
		Результат = Прав(СтрокаДопИнфо, СтрДлина(СтрокаДопИнфо)-Найти(Врег(СтрокаДопИнфо), Врег(НаименованиеСвойства))-СтрДлина(НаименованиеСвойства)+1);
		Если Лев(Результат, 1)=":" ИЛИ Лев(Результат, 1)="=" Тогда
			Результат = Прав(Результат, СтрДлина(Результат)-1);
		КонецЕсли;	
		Если Найти(Результат, ";")>0 Тогда
			Результат = Лев(Результат, Найти(Результат, ";")-1);
		КонецЕсли;
		Возврат Результат;
	КонецЕсли;
	
КонецФункции

// Преобразует InvoiceContent в UtdSellerContent с функцией СЧФ (Invoice)
// Предназначена для быстрого перехода с формата счетов-фактур 5.02 на формат УПД.
Функция ЭДО_ПолучитьUtdSellerContentИзInvoiceContent(InvoiceContent) Экспорт
	
	Возврат ЭДО_Модуль_РаботаСКонтентом().ПолучитьUtdSellerContentИзInvoiceContent(InvoiceContent);
	
КонецФункции

//}		РАБОТА С ОБЪЕКТАМИ КОМПОНЕНТЫ ЧЕРЕЗ ПРОСЛОЙКУ XDTO


//**************************************
//{		ПОДКЛЮЧЕНИЕ ВО ВНЕШНИЕ ОБРАБОТКИ
	
Функция СведенияОВнешнейОбработке() Экспорт
	
	ПараметрыРегистрации = Новый Структура;
	ПараметрыРегистрации.Вставить("Вид",			 	"ДополнительнаяОбработка");
	ПараметрыРегистрации.Вставить("Наименование", 		"Диадок (СКБ Контур)");
	ПараметрыРегистрации.Вставить("БезопасныйРежим", 	Ложь);
	ПараметрыРегистрации.Вставить("Версия", 			ЭДО_НомерРелиза());
	ПараметрыРегистрации.Вставить("Информация", 		"Модуль работы с электронными первичными документами через Диадок");
	//ПараметрыРегистрации.Вставить("ВерсияБСП", "1.2.1.4");
	
	ТаблицаКоманд = ПолучитьТаблицуКоманд();
	
	ДобавитьКоманду(ТаблицаКоманд, 
		"Диадок (СКБ Контур)",
		"ФормаУправляемая",
		"ОткрытиеФормы", Ложь, "");
		
	ДобавитьКоманду(ТаблицаКоманд,
		"Выполнение регламентных операций",
		"ЭДО_ВыполнитьРегламентныеДействия",
		"ВызовСерверногоМетода");
	
	ПараметрыРегистрации.Вставить("Команды", ТаблицаКоманд);
	
	Возврат ПараметрыРегистрации;
	
КонецФункции

Функция ПолучитьТаблицуКоманд()
	
	Команды = Новый ТаблицаЗначений;
	
	Команды.Колонки.Добавить("Представление", 			Новый ОписаниеТипов("Строка")); 
	Команды.Колонки.Добавить("Идентификатор", 			Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("Использование", 			Новый ОписаниеТипов("Строка"));
	Команды.Колонки.Добавить("ПоказыватьОповещение", 	Новый ОписаниеТипов("Булево"));
	Команды.Колонки.Добавить("Модификатор", 			Новый ОписаниеТипов("Строка"));
	
	Возврат Команды;
	
КонецФункции

Процедура ДобавитьКоманду(ТаблицаКоманд, Представление, Идентификатор, Использование, ПоказыватьОповещение = Ложь, Модификатор = "")
	
	НоваяКоманда=						ТаблицаКоманд.Добавить();
	НоваяКоманда.Представление=			Представление;
	НоваяКоманда.Идентификатор=			Идентификатор;
	НоваяКоманда.Использование=			Использование;
	НоваяКоманда.ПоказыватьОповещение=	ПоказыватьОповещение;
	НоваяКоманда.Модификатор=			Модификатор;
	
КонецПроцедуры

Процедура ВыполнитьКоманду(ИдентификаторКоманды, ПараметрыВыполненияКоманды=Неопределено) Экспорт
	
	Если ИдентификаторКоманды = "ЭДО_ВыполнитьРегламентныеДействия" Тогда
		ЭДО_ВыполнитьРегламентныеДействия(ПараметрыВыполненияКоманды);	  
	КонецЕсли;
	
КонецПроцедуры

//}		ПОДКЛЮЧЕНИЕ ВО ВНЕШНИЕ ОБРАБОТКИ


//**********************************************
//{		ИНТЕРФЕЙС

Функция МодальностьЗапрещена() Экспорт
	
	СисИнфо = Новый СистемнаяИнформация;
	
	ВерсияПлатформыМассивом = ЭДО_Служебные_РазложитьСтрокуВМассивСлов(СисИнфо.ВерсияПриложения,".");
	ВтораяЦифраВерсии = Число(ВерсияПлатформыМассивом[1]);
	ТретьяЦифраВерсии = Число(ВерсияПлатформыМассивом[2]);
	
	Если (ВтораяЦифраВерсии=3 и ТретьяЦифраВерсии>=4) или ВтораяЦифраВерсии>3 Тогда 
		Попытка
			Если Строка(Метаданные.РежимИспользованияМодальности) = "Использовать" Тогда 
				Возврат Ложь;
			Иначе
				Возврат Истина;
			КонецЕсли;
		Исключение
			//платфома не в курсе, что есть режим отказа от модальности
			Возврат Ложь;
		КонецПопытки;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Для переключения видимости колонок в основной форме в зависимости от режима просмотра - отправка, отправленные, полученные документы.
Функция ЭДО_МассивПереключаемыхКолонокСписка(РежимОтображенияДокументов) Экспорт
	
	ПереключаемыеКолонки = "";
	Если РежимОтображенияДокументов = "ОтправкаПакетов" Тогда
		
		ПереключаемыеКолонки = 
			"ОшибкиПроверкиТекст
			|ДействиеВДД
			|ДействиеВ1С
			|ТипДокумента
			|ВидЭлДокумента
			|ДатаПолучения";
	
	ИначеЕсли РежимОтображенияДокументов = "ОтправленныеДокументы" Тогда
		
		ПереключаемыеКолонки = 
			"ОшибкиПроверкиТекст
			|ДействиеВДД
			|ДействиеВ1С
			|ДатаПолучения";
	
	ИначеЕсли РежимОтображенияДокументов = "ПолученныеДокументы" Тогда
		
		ПереключаемыеКолонки = 
			"ВидЭлДокумента
			|ВидПакета";
	
	КонецЕсли;
		
	Возврат ЭДО_Служебные_РазложитьСтрокуВМассивСлов(ПереключаемыеКолонки);
	
КонецФункции

// Вспомогательная клиентская процедура для ОФ
Процедура УбратьКнопкуВыбора_ОФ(мФорма,мКоманднаяПанель) Экспорт
	
	// TODO можно перенести в основную форму
	
	Если Не мФорма.РежимВыбораСписка Тогда
		
		КнопкиСписка = мКоманднаяПанель.Кнопки;
		Если НЕ КнопкиСписка.Найти("Выбрать")=Неопределено Тогда
			КнопкиСписка.Удалить(КнопкиСписка.Выбрать);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Рекурсивно копирует строки из строки СтрИсточник ДереваЗначений в СтрПриемник другого ДереваЗначений
Процедура ЗаполнитьСтрокиДерева(СтрИсточник,СтрПриемник) Экспорт
	
	Для Каждого Стр Из СтрИсточник.Строки Цикл
		НоваяСтрока = СтрПриемник.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока,Стр);
		ЗаполнитьСтрокиДерева(Стр,НоваяСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Используется в формах настроек (ОФ и УФ). С формы - и в базу
Процедура мСохранитьОбщиеНастройки(мФорма) Экспорт
	
	// Подготовим структуру настроек из данных формы
	
	мНастройки = ЭДО_Модуль_СтруктураОбщихНастроек();
	
	Для Каждого Элемент Из мНастройки Цикл
		мНастройки[Элемент.Ключ] = мФорма[Элемент.Ключ]; // предполагаем, что абсолютно все настройки будут видны на форме
	КонецЦикла;
	
	НачатьТранзакцию();
	Попытка
		ЭДО_Модуль_СохранитьОбщиеНастройки(мНастройки);
		// и попробуем инициализировать ПМ
		Кэш = Неопределено; // Принудительно скинем кэш, чтобы настройки применились в текущем сеансе
		ПроверкаПМ = ЭДО_Модуль_ПроверитьСовместимостьВерсииAPIПодключаемогоМодуля();
		Если Не ПроверкаПМ.ВерсииСовместимы Тогда
			ВызватьИсключение "Данный подключаемый модуль не совместим с основным модулем";
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение "Не удалось записать настройки по причине:" + Символы.ПС + ОписаниеОшибки();
		
	КонецПопытки;
	
	Кэш = Неопределено; // Принудительно скинем кэш, чтобы настройки применились в текущем сеансе
	
КонецПроцедуры

// Используется в формах настроек (ОФ и УФ). Из базы на форму
Процедура мПрочитатьОбщиеНастройки(мФорма) Экспорт
	
	Кэш = Неопределено; // принудительно скинем кэш, чтобы прочитать актуальные настройки.
	
	мНастройки = ЭДО_Модуль_ОбщиеНастройки();
	
	Для Каждого Элемент Из мНастройки Цикл
		мФорма[Элемент.Ключ] = Элемент.Значение; // предполагаем, что абсолютно все настройки будут видны на форме
	КонецЦикла;
	
	//и немного пропатчим
	Если НЕ ЗначениеЗаполнено(мНастройки.МестонахождениеПодключаемогоМодуля) Тогда
		мФорма.МестонахождениеПодключаемогоМодуля = "Диск";
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(мНастройки.РежимПрокси) Тогда
		мФорма.РежимПрокси = "NoProxy";
	КонецЕсли;
	
КонецПроцедуры

// Выводит в ТабличныйДокумент визуальное представление электронного документа
Процедура ВывестиЭлектронныйДокументВКарточкуСообщения(ДокументЭДО, ТабличныйДокумент) Экспорт

	Если ДокументЭДО.ТипКонтента = "UtdSellerContent" Тогда	
		
		Если ДокументЭДО.Content.Function = "Invoice" Тогда
			Таб = ЭДО_Модуль_РаботаСКонтентом().СформироватьПечатнуюФормуПоInvoiceContent(Новый Структура("InvoiceContent", ДокументЭДО.Content),Истина);
		Иначе
			Таб = ЭДО_Модуль_РаботаСКонтентом().СформироватьПечатнуюФормуПоXmlUTDContent(Новый Структура("Content", ДокументЭДО.Content),Ложь);
		КонецЕсли;
		
	ИначеЕсли ДокументЭДО.ТипКонтента = "InvoiceContent" Тогда
		
		Таб = ЭДО_Модуль_РаботаСКонтентом().СформироватьПечатнуюФормуПоInvoiceContent(Новый Структура("InvoiceContent", ДокументЭДО.Content),Истина);
		//СписокОшибок = ОбработкаОбъект().ЭДО_Модуль_РаботаСКонтентом().ВалидацияInvoiceContent(ДокументЭДО.Content);
		
	ИначеЕсли ДокументЭДО.ТипКонтента = "Torg12SellerContent" Тогда	
		
		Таб = ЭДО_Модуль_РаботаСКонтентом().СформироватьПечатнуюФормуПоXmlTorg12Content(Новый Структура("XmlTorg12Content", ДокументЭДО.Content),Истина);
		//СписокОшибок = ОбработкаОбъект().ЭДО_Модуль_РаботаСКонтентом().ВалидацияXmlTorg12Content(ДокументЭДО.Content);
		
	ИначеЕсли ДокументЭДО.ТипКонтента = "AcceptanceCertificateSellerContent" Тогда	
		
		Таб = ЭДО_Модуль_РаботаСКонтентом().СформироватьПечатнуюФормуПоXmlAcceptanceCertificateContent(Новый Структура("XmlAcceptanceCertificateContent", ДокументЭДО.Content),Истина);
		
	ИначеЕсли ДокументЭДО.ТипКонтента = "InvoiceCorrectionContent" Тогда	
		
		Таб = ЭДО_Модуль_РаботаСКонтентом().СформироватьПечатнуюФормуПоInvoiceCorrectionContent(Новый Структура("InvoiceCorrectionContent", ДокументЭДО.Content),Истина);

	Иначе
		
		Возврат;
		
	КонецЕсли;
	
	ТабличныйДокумент.ВставитьОбласть(Таб.Область());

КонецПроцедуры

Функция ЭДО_ПолучитьПечатнуюФормуЭлектронногоДокумента(ДокументДД) Экспорт
	
	Если ЗначениеЗаполнено(ДокументДД.ТипКонтента) Тогда
		ОписаниеТипаДокумента = ЭДО_ОписаниеТипаДокумента(ДокументДД.ТипКонтента);  // потенциально опасно
	Иначе
		ОписаниеТипаДокумента = ЭДО_ОписаниеТипаДокумента(ЭДО_ПолучитьТипВходящегоДокумента(ДокументДД));
	КонецЕсли;
	
	Если Не ОписаниеТипаДокумента.Формализованный Тогда
		Возврат Неопределено;
	Иначе
		ИмяКонтента = ОписаниеТипаДокумента.СтруктураСодержимого;
	КонецЕсли;
	
	КонтентXDTO = ЭДО_ПолучитьСтруктурированныйКонтентВходящегоДокумента(ДокументДД);
	СтруктураКонтента = ОбъектXDTOВСтруктуру(КонтентXDTO, Истина);
	
	Результат = Новый ТабличныйДокумент;
	
	ВывестиЭлектронныйДокументВКарточкуСообщения(Новый Структура("Content, ТипКонтента", СтруктураКонтента, ИмяКонтента), Результат);
	
	Возврат Результат;
	
КонецФункции

Функция ЭДО_ПолучитьСтруктурированныйКонтентВходящегоДокумента(ДокументДД) Экспорт
    // TODO продумать работу со старыми типами документов в формате УПД
	
	Если ЗначениеЗаполнено(ДокументДД.ТипКонтента) Тогда
		ОписаниеТипаДокумента = ЭДО_ОписаниеТипаДокумента(ДокументДД.ТипКонтента);  // потенциально опасно
	Иначе
		ОписаниеТипаДокумента = ЭДО_ОписаниеТипаДокумента(ЭДО_ПолучитьТипВходящегоДокумента(ДокументДД));
	КонецЕсли;
	
	Если Не ОписаниеТипаДокумента.Формализованный Тогда
		Возврат Неопределено;
	Иначе	
		ИмяКонтента = ОписаниеТипаДокумента.СтруктураСодержимого;
	КонецЕсли;
	
	// Получим контент документа (XML) и распарсим его в более плоскую структуру
	ИмяВремФайла = ПолучитьИмяВременногоФайла("xml");
	ЭДО_ПолучитьХранилищеКонтента(ДокументДД).Записать(ИмяВремФайла);
	Текст = Новый ТекстовыйДокумент;
	Текст.Прочитать(ИмяВремФайла, "windows-1251");
	УдалитьФайлы(ИмяВремФайла);
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Текст.ПолучитьТекст());
	ОбъектXDTO = ФабрикаXDTO.ПрочитатьXML(Чтение);
	
	КонтентXDTO = ЭДО_Модуль_РаботаСКонтентом().ПолучитьКонтентДокумента(ОбъектXDTO, ИмяКонтента);
	Возврат КонтентXDTO;
	
КонецФункции

// Клиентская процедура, только для ОФ
Процедура ЭДО_Модуль_УстановитьТипПоля1С(Форма,ИмяНаФорме,Тип1С) Экспорт
	
	Если ЭДО_Модуль_ЭтоУправляемаяФорма(Форма) Тогда 
		ПолеФормы = Форма.Элементы[ИмяНаФорме];
	Иначе
		ПолеФормы = Форма.ЭлементыФормы[ИмяНаФорме];
	КонецЕсли;
	
	ТипПоля		= ЭДО_Модуль_ТипЗначенияОбъекта(Тип1С);
			
	Если ТипПоля = Неопределено Тогда
		
		Сообщить("Не задан тип объекта 1С для поля с типом "+Тип1С);
		
	Иначе	
		
		ПолеФормы.ОграничениеТипа = Новый ОписаниеТипов(ТипПоля);
		
		Если НЕ ЗначениеЗаполнено(Форма[ИмяНаФорме]) Тогда
			
			Форма[ИмяНаФорме] = ЭДО_Модуль_ПолучитьПустуюСсылкуОбъекта(Тип1С);
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

// Считывает картинки из макета "БиблиотекаКартинок" и кэширует их
Функция ЭДО_БиблиотекаКартинок() Экспорт
	
	Результат = ЭДО_Кэш_Прочитать("БиблиотекаКартинокЭДО");
	Если Результат = Неопределено Тогда
		Результат = Новый Структура;
		Для Каждого Рисунок Из ПолучитьМакет("БиблиотекаКартинок").Рисунки Цикл
			Результат.Вставить(Рисунок.Имя,Рисунок.Картинка);
		КонецЦикла;
		ЭДО_Кэш_Поместить("БиблиотекаКартинокЭДО",Результат);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#Если ТолстыйКлиентОбычноеПриложение Тогда
Процедура ЭДО_ПрикладныеОбъекты_ПерейтиКОпределению(Имя) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	Диадок_ДополнительныеСправочники.ИмяСправочника,
	|	Диадок_ДополнительныеСправочники.Ссылка
	|ИЗ
	|	Справочник.Диадок_ДополнительныеСправочники КАК Диадок_ДополнительныеСправочники
	|ГДЕ
	|	Диадок_ДополнительныеСправочники.ИмяСправочника В (""Функции"",""ИсточникиДанных"",""СтруктурыДанных"",""ВидыДокументов"",""ПравилаКонвертации"")
	|	И Диадок_ДополнительныеСправочники.Наименование ПОДОБНО """+Имя+"%""
	|УПОРЯДОЧИТЬ ПО Диадок_ДополнительныеСправочники.ИмяСправочника";
				   
	РезультатЗапроса = Запрос.Выполнить();
	Если РезультатЗапроса.Пустой() Тогда
		Предупреждение("Не удалось найти функцию, источник данных, вид документа, структуру данных или правила конвертации с именем: "+Имя);
	Иначе
		
		ТЗ = РезультатЗапроса.Выгрузить();
		
		Если ТЗ.Количество() = 1 Тогда
		    ЭДО_СправочникМенеджер_ОткрытьФорму(ТЗ[0].ИмяСправочника,ТЗ[0].Ссылка);
		Иначе
			ВыбраннаяСтрока = ТЗ.ВыбратьСтроку();
			Если НЕ ВыбраннаяСтрока = Неопределено Тогда
			    ЭДО_СправочникМенеджер_ОткрытьФорму(ВыбраннаяСтрока.ИмяСправочника,ВыбраннаяСтрока.Ссылка);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры
#КонецЕсли

// Клиентская функция, вызывается при "переходе к определению" в формах
#Если ТолстыйКлиентОбычноеПриложение Тогда
Функция ЭДО_Служебные_ВыделенноеСловоТекстовогоДокумента(ПолеТекстовогоДокумента) Экспорт
	// Примечание: в управляемых формах можно разместить в отдельной форме
	
	Перем а,б,в,г;
	
	Результат = "";
	
	#Если Клиент Тогда
	Если ПолеТекстовогоДокумента.ВыделенныйТекст<>"" Тогда
		Возврат ПолеТекстовогоДокумента.ВыделенныйТекст;
	КонецЕсли;
	
	ПолеТекстовогоДокумента.ПолучитьГраницыВыделения(а,б,в,г);
	
	СимволыРазделители = " .,;""()";
	Если а=в и б=г Тогда
		ТекущаяСтрока = СтрПолучитьСтроку(ПолеТекстовогоДокумента.ПолучитьТекст(),а);
		
		//найдем начало слова
		Начало = б;
		Пока Истина Цикл
			Начало = Начало-1;
			Если Начало=0 Тогда
				Прервать;
			КонецЕсли;
			
			Если Найти(СимволыРазделители,Сред(ТекущаяСтрока,Начало,1))>0 Тогда
				Начало = Начало+1;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;	
		
		//найдем конец слова
		Конец = б;
		Пока Истина Цикл
			Конец = Конец+1;
			Если Конец=СтрДлина(ТекущаяСтрока) Тогда
				Прервать;
			КонецЕсли;
			
			Если Найти(СимволыРазделители,Сред(ТекущаяСтрока,Конец,1))>0 Тогда
				Конец = Конец - 1;
				Прервать;
			КонецЕсли;
			
		КонецЦикла;
		
		Результат = Сред(ТекущаяСтрока,Начало,Конец-Начало+1);
		
	КонецЕсли;
	#КонецЕсли
	
	Возврат Результат;
	
КонецФункции
#КонецЕсли

Функция ЗаполнитьДеревоОтборов() Экспорт

	Дерево = Новый ДеревоЗначений;
	ЭДО_Служебные_ДобавитьКолонкиВТаблицуЗначений(Дерево,"Имя, Представление, ТипЭлементаУправления, ТипЭлементаСписка, Пометка, Значение, ПоказатьКартинкуАктивности");
	
	Область = ПолучитьМакет("ДеревоОтборов").ПолучитьОбласть("Отборы");
	
	Для Сч=2 По Область.ВысотаТаблицы Цикл // в первой строке заголовок
		
		// Имя	Родитель	Представление	ТипЭлементаУправления	ТипЭлементаСписка
		
		тИмя					= ЭДО_Служебные_ПолучитьТекстЯчейкиОбласти(Область,Сч,1);
		тРодитель				= ЭДО_Служебные_ПолучитьТекстЯчейкиОбласти(Область,Сч,2);
		тПредставление			= ЭДО_Служебные_ПолучитьТекстЯчейкиОбласти(Область,Сч,3);
		тТипЭлементаУправления	= ЭДО_Служебные_ПолучитьТекстЯчейкиОбласти(Область,Сч,4);
		тТипЭлементаСписка		= ЭДО_Служебные_ПолучитьТекстЯчейкиОбласти(Область,Сч,5);
		
		тИмя = СокрЛП(тИмя); // Для удобства восприятия в макете можно добавлять пробелы в имена настроек. А здесь будем эти пробелы убирать.
		тРодитель = СокрЛП(тРодитель); // и у родителя
		
		Если Не ЗначениеЗаполнено(тИмя) Тогда
			Продолжить; // еще немного визуальных удобств
		КонецЕсли;
		
		ТекРодитель = ?(тРодитель = "", Дерево, Дерево.Строки.Найти(тРодитель,"Имя",Истина));
		
		Если Не ЗначениеЗаполнено(тТипЭлементаСписка) Тогда
			
			НовСтрока = ДобавитьСтрокуДереваНастроек(ТекРодитель, тИмя, тПредставление, тТипЭлементаУправления, тТипЭлементаСписка);
			// выставим пометку на первом элементе управления
			Если тТипЭлементаУправления = "Переключатель"
				И ТипЗнч(ТекРодитель)<>Тип("ДеревоЗначений") //опять костыль
				И ТекРодитель.ТипЭлементаУправления = "Переключатель" Тогда
				
				НовСтрока.Значение = тИмя;
				НовСтрока.Пометка = (ТекРодитель.Строки.Индекс(НовСтрока)=0); // это первая строка
				НовСтрока.ПоказатьКартинкуАктивности = НовСтрока.Пометка; // для УФ
				
			КонецЕсли;
			
		Иначе
			
			Если ЗначениеЗаполнено(тТипЭлементаСписка) Тогда
				
				// добавим сюда все элементы нужного справочника
				Для Каждого ЭлСписка Из ЭДО_СправочникМенеджер_ПолучитьСписокЭлементов(тТипЭлементаСписка) Цикл
					
					ИмяСтроки = ?(ЭДО_Использовать1СЭДО(), ЭлСписка.ID, ЭлСписка.Ссылка.УникальныйИдентификатор()); 
					НовСтрока = ДобавитьСтрокуДереваНастроек(ТекРодитель, ИмяСтроки, ЭлСписка.Наименование, тТипЭлементаУправления, тТипЭлементаСписка,ЭлСписка.Ссылка, Истина);
					
				КонецЦикла;
					
			КонецЕсли;
			
		КонецЕсли;
			
	КонецЦикла;
	
	Возврат Дерево;
	
КонецФункции

Функция ДобавитьСтрокуДереваНастроек(ТекущаяСтрока, ИмяНастройки, ПредставлениеНастройки, ТипЭлементаУправления, ТипЭлементаСписка = Неопределено, Значение = Неопределено, Пометка = Ложь)
	
	//ТипЭлементаУправления: 
	// - "Переключатель" (выбор одного из нескольких)
	// - "Флажки" (выбор нескольких или всех)
	
	НовСтрокаДерева = ТекущаяСтрока.Строки.Добавить();
	
	НовСтрокаДерева.Имя						= ИмяНастройки;
	НовСтрокаДерева.Представление			= ПредставлениеНастройки;
	НовСтрокаДерева.ТипЭлементаУправления	= ТипЭлементаУправления;
	НовСтрокаДерева.ТипЭлементаСписка		= ТипЭлементаСписка;
	НовСтрокаДерева.Значение				= Значение;
	НовСтрокаДерева.Пометка					= Пометка;
	
	Возврат НовСтрокаДерева;
	
КонецФункции

// Инициализирует СКД для таблицы отборов, расположенной в основной форме внизу слева
Функция ТаблицаОтборов_ПолучитьСКД(Режим) Экспорт
	
	СхемаСКД 	= ПолучитьМакет("МакетОтбора");
	
	Колонки = ЭтотОбъект.Метаданные().ТабличныеЧасти.СписокДокументов.Реквизиты;
	
	Настройки 	= СхемаСКД.НастройкиПоУмолчанию;	
	НаборДанных	= СхемаСКД.НаборыДанных.Найти("НаборДанных1");
	ПоляНабора 	= НаборДанных.Поля;
	ПоляНабора.Очистить();
	
	Для Каждого Колонка Из Колонки Цикл
		
		Если Найти(Колонка.Имя, "ДопРеквизит")>0 Тогда
			Продолжить;
		КонецЕсли;

		НовПоле = ПоляНабора.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовПоле.Поле 			= Колонка.Имя;
		НовПоле.ПутьКДанным 	= Колонка.Имя;
		НовПоле.Заголовок 		= Колонка.Имя;
		НовПоле.ТипЗначения		= Колонка.Тип;
		
		// теперь особые случаи для нескольких колонок
		Если Колонка.Имя = "Контрагент" Тогда
			
			Попытка
				НовПоле.ТипЗначения		= Новый ОписаниеТипов(ЭДО_Модуль_ТипЗначенияОбъекта("Контрагенты"));
			Исключение
			КонецПопытки;

		ИначеЕсли Колонка.Имя = "Организация" Тогда
			
			Попытка
				НовПоле.ТипЗначения		= Новый ОписаниеТипов(ЭДО_Модуль_ТипЗначенияОбъекта("Организации"));
			Исключение
			КонецПопытки;
			
		ИначеЕсли Колонка.Имя = "ТипДокумента" Тогда
			
			Список = Новый СписокЗначений;
			Для Каждого Эл Из ЭДО_ПредопределенныеСписки_Получить("ТипыДокументов") Цикл
				Список.Добавить(Эл.Наименование, Эл.Наименование + " (" + Эл.Описание + ")");
			КонецЦикла;
			
			НовПоле.УстановитьДоступныеЗначения(Список);
			
		ИначеЕсли Колонка.Имя = "Статус" Тогда
			
			Список = Новый СписокЗначений;
			Для Каждого Статус Из МассивИзвестныхСтатусовДокументов() Цикл
				Список.Добавить(Статус);
			КонецЦикла;
			
			НовПоле.УстановитьДоступныеЗначения(Список);
			
		КонецЕсли;
		
	КонецЦикла;
	
	НастройкиДопКолонок = ЭДО_ПодключаемыйМодуль_ОбработатьСобытие("ПолучитьНастройкиДополнительныхКолонокСпискаДокументов", Новый Структура("Режим", Режим));
	// и вот здесь теперь можно что-то сделать с этими колонками.
	
	Если НастройкиДопКолонок <> Неопределено Тогда
		
		Для Сч=0 По НастройкиДопКолонок.Количество()-1 Цикл
			
			КолонкаСКД = Колонки["ДопРеквизит" + Формат(Сч+1, "ЧГ=0")];
			
			НовПоле = ПоляНабора.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			НовПоле.Поле 			= КолонкаСКД.Имя;
			НовПоле.ПутьКДанным 	= КолонкаСКД.Имя;
			НовПоле.Заголовок		= НастройкиДопКолонок[Сч].Заголовок;
			
			Если НастройкиДопКолонок[Сч].Тип<>Неопределено Тогда
				НовПоле.ТипЗначения		= НастройкиДопКолонок[Сч].Тип;
			КонецЕсли;	
			
			Если НастройкиДопКолонок[Сч].ДопустимыеЗначения<>Неопределено Тогда
				НовПоле.УстановитьДоступныеЗначения(НастройкиДопКолонок[Сч].ДопустимыеЗначения)
			КонецЕсли;
			
			// Сразу добавим в интерфейс:
			НовЭлементОтбора = СхемаСКД.НастройкиПоУмолчанию.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовЭлементОтбора.ВидСравнения	= ВидСравненияКомпоновкиДанных.Равно;
			НовЭлементОтбора.ЛевоеЗначение	= Новый ПолеКомпоновкиДанных(КолонкаСКД.Имя);
			НовЭлементОтбора.Использование	= Ложь;
			
		КонецЦикла;
		
	КонецЕсли;
	
	// "НомерСтроки" отсутствует в метаданных табличной части
	НовПоле = ПоляНабора.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
	НовПоле.Поле 			= "НомерСтроки";
	НовПоле.ПутьКДанным 	= "НомерСтроки";
	НовПоле.Заголовок		= "НомерСтроки";
	НовПоле.ТипЗначения		= Новый ОписаниеТипов("Число");
	
	ГруппировкаСтрока 				= Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаСтрока.Использование = Истина;
	ПолеСтрока = ГруппировкаСтрока.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеСтрока.Использование 		= Истина;
	ПолеСтрока.Поле 				= Новый ПолеКомпоновкиДанных("НомерСтроки");
	ВыбранныеПоляДляСтроки = ГруппировкаСтрока.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранныеПоляДляСтроки.Использование = Истина;
	ПорядокДляСтроки = ГруппировкаСтрока.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	ПорядокДляСтроки.Использование 	= Истина;
	
	Возврат СхемаСКД;
	
КонецФункции

// Устанавливает значение в колонке "Видимость" списка документов в соответствии с настройками, выбранными в ТЗ "ТаблицаОтборов"
Процедура ЭДО_ТаблицаОтборов_УстановитьТекущиеОтборы(АдресСхемы, мСписокДокументов) Экспорт
	
	СхемаСКД = ПолучитьИзВременногоХранилища(АдресСхемы);
	
	// Получим результат СКД в таблицу значений
	КомпановщикМакета 	= Новый КомпоновщикМакетаКомпоновкиДанных;
	ИсточникДанных 		= Новый Структура("ТаблицаДанных", СписокДокументов.Выгрузить());
	Макет = КомпановщикМакета.Выполнить(СхемаСКД, КомпановщикНастроекОтбора.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпановки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпановки.Инициализировать(Макет, ИсточникДанных);
	ТЗРезультат 		= Новый ТаблицаЗначений;
	ПроцессорВывода 	= Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ПроцессорВывода.УстановитьОбъект(ТЗРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпановки, Истина);
	
	// нас интересует только номера строк попавшие в отбор
	ТЗРезультат.Свернуть("НомерСтроки");
	ТЗРезультат.Индексы.Добавить("НомерСтроки");
	
	Для Каждого Стр Из мСписокДокументов Цикл
		Стр.Видимость = НЕ (ТЗРезультат.Найти(Стр.НомерСтроки, "НомерСтроки") = Неопределено);
	КонецЦикла;
	
КонецПроцедуры


Функция ДиадокЮрФизЛица_ПолучитьСКД(Колонки) Экспорт
		
	СхемаСКД= ПолучитьМакет("МакетОтбора_ДиадокЮрФизЛица");
	Настройки= 		СхемаСКД.НастройкиПоУмолчанию;	
	НаборДанных= 	СхемаСКД.НаборыДанных.Найти("НаборДанных_ЮрФизЛица");
	ПоляНабора= 	НаборДанных.Поля;
	ПоляНабора.Очистить();
	
	Для Каждого Колонка Из Колонки Цикл
		
		НовПоле= ПоляНабора.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовПоле.Поле= 			Колонка.Имя;
		НовПоле.ПутьКДанным= 	Колонка.Имя;
		НовПоле.Заголовок= 		Колонка.Имя;
		НовПоле.ТипЗначения=	Колонка.ТипЗначения;
		
		// теперь особые случаи для нескольких колонок
		Если Колонка.Имя = "Связь1" ИЛИ Колонка.Имя = "Связь2" ИЛИ Колонка.Имя = "Связь3" Тогда
			
			Попытка
				НовПоле.ТипЗначения= Новый ОписаниеТипов(ЭДО_Модуль_ТипЗначенияОбъекта("Контрагенты"));
			Исключение
			КонецПопытки;
					
		КонецЕсли;
		
	КонецЦикла;
	
	ГруппировкаСтрока= Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаСтрока.Использование= Истина;
	
	ПолеСтрока= ГруппировкаСтрока.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеСтрока.Использование= Истина;
	ПолеСтрока.Поле= Новый ПолеКомпоновкиДанных("НомерСтроки");
	
	ВыбранныеПоляДляСтроки= ГруппировкаСтрока.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ВыбранныеПоляДляСтроки.Использование= Истина;
	
	ПорядокДляСтроки= ГруппировкаСтрока.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
	ПорядокДляСтроки.Использование= Истина;
		
	Возврат СхемаСКД;
	
КонецФункции

Функция МассивИзвестныхСтатусовДокументов()
	
	Результат= ЭДО_Служебные_РазложитьСтрокуВМассивСлов(
	
			"Отправлен
			|Не отправлен			
			|Ожидается извещение о получении
			|Доставлен
			|Требуется подпись
			|Подписан
			|Отказано в подписи
			|Ошибка подписи			
			|Ожидается извещение от покупателя
			|Документооборот не завершен
			|Документооборот завершен"
			// Список не полный: продумать этот момент.
			
	);
	Возврат Результат;
	
КонецФункции

Функция ПолучитьПараметрыИзДереваОтборов(Дерево) Экспорт
	
	Результат = Новый Структура;
	СтрокиВторогоУровня = Неопределено;
	
	Для Каждого Строка Из Дерево.Строки Цикл
		Если Строка.Пометка Тогда
			Результат.Вставить("Режим", Строка.Имя);
			СтрокиВторогоУровня = Строка.Строки;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если Результат.Режим = "ОтправкаПакетов"
		Или Результат.Режим = "ОтправленныеДокументы" Тогда
	
		МассивВыбранныхВидов = Новый Массив;
		
		Для Каждого ТекСтрокаВида Из СтрокиВторогоУровня Цикл
			
			Если ТекСтрокаВида.Пометка Тогда
				
				Если ЭДО_Использовать1СЭДО() Тогда
					МассивВыбранныхВидов.Добавить(ТекСтрокаВида.Имя);
				Иначе
					МассивВыбранныхВидов.Добавить(ТекСтрокаВида.Значение);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		Результат.Вставить("МассивВыбранныхВидов", МассивВыбранныхВидов);
			
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции


//}		ИНТЕРФЕЙС


//**************************************
//{		HTTP API Диадока
//

// Возвращает авторизационный токен
Функция DD_API_Gettoken(РежимАвторизации,Логин="",Пароль="",ВыбранныйСертификат=Неопределено) Экспорт
	
	Результат = "";
	
	Адрес		= "/Authenticate";
	
	Параметры	= "";//"login="+Логин+"&password="+Пароль;
	ТелоЗапроса = "";
	
	Если РежимАвторизации = "Пароль" Тогда //авторизация по логину/паролю      
		Параметры = "login="+Логин+"&password="+Пароль;   
	Иначе	//авторизация по сертификату
		//поместим в тело запроса выбранный сертификат.
		ТелоЗапроса = ВыбранныйСертификат;
	КонецЕсли;
	
	Заголовки	= Новый Соответствие;
	Заголовки.Вставить("Authorization","DiadocAuth ddauth_api_client_id="+ЭДО_Транспорт_КлючРазработчикаAPI());//+" , konturediauth_login="""+УчетнаяЗапись.Логин+""" , konturediauth_password="""+УчетнаяЗапись.Пароль+"""";
	
	Попытка
		
		Результат = ЭДО_Транспорт_СобственноВыполнениеЗапроса(Адрес,Параметры,Заголовки,"POST", ТелоЗапроса, РежимАвторизации = "Сертификат");
		
	Исключение
		
		Сообщить(ОписаниеОшибки());
		
	КонецПопытки;	
	
	Возврат Результат;
	
КонецФункции

Функция DD_API_GetDocflowEvents(boxId,RequestBody) Экспорт
	
	//http://api-docs.diadoc.ru/ru/latest/http/GetDocflowEvents.html
	
	_Параметры = "";
	Если Не ПустаяСтрока(boxId) Тогда
		_Параметры = _Параметры+"?boxId="+boxId;
	КонецЕсли;
	
	Возврат ЭДО_Транспорт_ВызватьМетодAPI("/V2/GetDocflowEvents"+_Параметры,"POST",RequestBody,,boxId);
	
КонецФункции

// готовит тело запроса для GetDocflowEvents
Функция DD_API_GetDocflowEventsRequest(tick_start="", tick_final="", AfterIndexKey="", PopulateDocuments=false, InjectEntityContent=false, PopulatePreviousDocumentStates=false) Экспорт
	
	// http://api-docs.diadoc.ru/ru/latest/proto/GetDocflowEventsRequest.html
	
	Контент = Новый Структура;

	Если ЗначениеЗаполнено(tick_start) или ЗначениеЗаполнено(tick_final) Тогда
		
		Контент.Вставить("Filter", Новый Структура);
		
		Если ЗначениеЗаполнено(tick_start) Тогда
			Контент.Filter.Вставить("FromTimestamp",	Новый Структура("Ticks",tick_start));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(tick_final) Тогда
			Контент.Filter.Вставить("ToTimestamp",		Новый Структура("Ticks",tick_final));
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЗначениеЗаполнено(AfterIndexKey) Тогда
		Контент.Вставить("AfterIndexKey",AfterIndexKey);
	КонецЕсли;
	
	Если PopulateDocuments=Истина Тогда
		Контент.Вставить("PopulateDocuments",Истина);
	КонецЕсли;
	
	Если InjectEntityContent=Истина Тогда
		Контент.Вставить("InjectEntityContent",Истина);
	КонецЕсли;
	
	Если PopulatePreviousDocumentStates=Истина Тогда
		Контент.Вставить("PopulatePreviousDocumentStates",Истина);
	КонецЕсли;
	
	Возврат ЭДО_Служебные_СтруктураВJSON(Контент);
	
КонецФункции

Функция DD_API_GeneratePrintForm(boxId, messageId, documentId) Экспорт
	
	//http://api-docs.diadoc.ru/ru/latest/http/GeneratePrintForm.html
	
	Возврат ЭДО_Транспорт_ВызватьМетодAPI("/GeneratePrintForm?boxId="+boxId+"&messageId="+messageId+"&documentId="+documentId, "GET",, Истина, boxID, Ложь);
	
КонецФункции

//Функция возвращаяет файл сгенерированной сервером Диадок печатной формы документа
Функция ЭДО_ПолучитьПечатнуюФормуДокумента(boxId, messageId, documentId, МаксВремяОжиданияОтвета=0, Логин="", Пароль="") Экспорт
	
	Результат = Неопределено;
		
	// 1. Выполним авторизацию при необходимости
	
	ТокенДляBoxID = ПолучитьТокенДляBoxID(ЭДО_Служебные_АдресЯщикаКонтрагента(BoxID));
	
	Если ТокенДляBoxID = Неопределено И Логин <> "" Тогда
				
		ТокенДляBoxID = DD_API_Gettoken("Пароль", Логин, Пароль);
		
		Если ТипЗнч(ТокенДляBoxID) = Тип("Строка") И (Найти(НРег(ТокенДляBoxID), "invalid") > 0 ИЛИ Найти(НРег(ТокенДляBoxID), "wrong") > 0 ИЛИ Найти(НРег(ТокенДляBoxID), "error") > 0) Тогда
			Возврат Неопределено;
		КонецЕсли;
				
		СоответствиеТокеновBoxID.Вставить("", ТокенДляBoxID);
		
	КонецЕсли;	
	
	// 2. Сделаем запрос серверу на генерацию печатной формы - результатом будут двоичные данные
	Если ТокенДляBoxID <> Неопределено Тогда
		
		МаксКоличествоИтераций = 3; //пробуем 3 раза дождаться готового ответа от сервера
		МаксВремяОжиданияОтвета = 30; //время ожидания готового ответа от сервера в секундах
		ИмяЗаголовкаВремениОжидания = "Retry-After"; // в этом заголовке ответа приходит примерное время ожидания (в секундах) готового ответа
		
		МетодРаботыAPI = ЭДО_Транспорт_МетодРаботыAPI();		
		
		НомерИтерации = 1;
		
		СтруктураОтветаСервера = DD_API_GeneratePrintForm(boxId, messageId, documentId);	
		
		Если МетодРаботыAPI = "Native" Тогда
			
			ВремяОжиданияОтветаСтрокой = СтруктураОтветаСервера.ОтветСервера.Заголовки.Получить(ИмяЗаголовкаВремениОжидания);
			ВремяОжиданияОтвета = ?(ВремяОжиданияОтветаСтрокой = Неопределено, 0, Число(ВремяОжиданияОтветаСтрокой));
			
			Пока ВремяОжиданияОтвета > 0 И НомерИтерации <= МаксКоличествоИтераций Цикл
				
				Таймаут(Мин(ВремяОжиданияОтвета, МаксВремяОжиданияОтвета));
				
				СтруктураОтветаСервера = DD_API_GeneratePrintForm(boxId, messageId, documentId);
				ВремяОжиданияОтветаСтрокой = СтруктураОтветаСервера.ОтветСервера.Заголовки.Получить(ИмяЗаголовкаВремениОжидания);
				ВремяОжиданияОтвета = ?(ВремяОжиданияОтветаСтрокой = Неопределено, 0, Число(ВремяОжиданияОтветаСтрокой));
				
				НомерИтерации = НомерИтерации + 1;
				
			КонецЦикла;
			
		ИначеЕсли МетодРаботыAPI = "COM" Тогда
		
			ВремяОжиданияОтвета = ЭДО_Транспорт_XMLHTTP_ПолучитьЗначениеЗаголовка(СтруктураОтветаСервера.Соединение, ИмяЗаголовкаВремениОжидания, Истина);			
						
			Пока ВремяОжиданияОтвета > 0 И НомерИтерации <= МаксКоличествоИтераций Цикл
				
				Таймаут(Мин(ВремяОжиданияОтвета, МаксВремяОжиданияОтвета));					
				
				СтруктураОтветаСервера = DD_API_GeneratePrintForm(boxId, messageId, documentId);
				ВремяОжиданияОтвета = ЭДО_Транспорт_XMLHTTP_ПолучитьЗначениеЗаголовка(СтруктураОтветаСервера.Соединение, ИмяЗаголовкаВремениОжидания, Истина);
				
				НомерИтерации = НомерИтерации + 1;
				
			КонецЦикла;
			
		КонецЕсли;
		
		Результат = СтруктураОтветаСервера.Результат;
		
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

//{ служебные обертки низкого уровня
	
// Возвращает объект HTTPСоединение для платформы 8.3 и COM-объект Microsoft.XMLHTTP для старых
Функция ЭДО_Транспорт_СоединениеДД()
	
	Результат = ЭДО_Кэш_Прочитать("СоединениеДД");
	
	Если Результат=Неопределено Тогда
		
		Сервер = "diadoc-api.kontur.ru";
		Прокси = Неопределено;
		
		Порт = 443;
		ЗащищенноеСоединение = Истина;//для 8.3 будет по-другому. Точнее, на месте этого параметра будет стоять таймаут. Бред, короче.
		
		Если ЭДО_Транспорт_МетодРаботыAPI() = "Native" Тогда
			
			Результат = Вычислить("Новый HTTPСоединение(Сервер, Порт, , , Прокси, , Новый ЗащищенноеСоединениеOpenSSL)");
		
		ИначеЕсли ЭДО_Транспорт_МетодРаботыAPI() = "COM" Тогда	
			
			//Результат = Новый COMОбъект("WinHttp.WinHttpRequest.5.1");
			Результат = ПолучитьCOMОбъект("","Microsoft.XMLHTTP"); //WinHttpRequest не работает с двоичными данными.
			//Результат.Option(2,"UTF-8");                   
		
		КонецЕсли;
		
		ЭДО_Кэш_Поместить("СоединениеДД",Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает "Native" для платформ 8.3 и "COM" для более старых
Функция ЭДО_Транспорт_МетодРаботыAPI()
	
	Если ПлатформаСтаршеЧем_8_3_6_1977() Тогда
		// старые платформы не умеют соединяться по современным защищенным протоколам
		// и ИспользованиеByteOrderMark появилось непонятно когда
		Возврат "COM";
	Иначе
		Возврат "Native";
	КонецЕсли;
	
КонецФункции

Функция ЭДО_Транспорт_КлючРазработчикаAPI() Экспорт
	Возврат "1C-DDPro-v1-0-e5a50553-4ba9-46f3-b5d3-c611f678051d";
КонецФункции

// Выполняет HTTP-запрос средствами платформы или COM-объекта
// ТекстФайла - для POST
Функция ЭДО_Транспорт_СобственноВыполнениеЗапроса(АдресЗапроса, Параметры="", Заголовки, Метод, ТекстФайла="", ОтветБудетВДвоичныхДанных=Ложь) Экспорт
	
	СтруктураОтветаЗапросаКСерверу = ЭДО_Транспорт_ВыполнитьЗапросКСерверу(АдресЗапроса, Параметры, Заголовки, Метод, ТекстФайла, ОтветБудетВДвоичныхДанных);
	
	Возврат СтруктураОтветаЗапросаКСерверу.Результат;	
	
КонецФункции

//Возвращает структуру с соединением, результатом и заголовками ответа, полученными от сервера
Функция ЭДО_Транспорт_ВыполнитьЗапросКСерверу(АдресЗапроса, Параметры="", Заголовки, Метод, ТекстФайла="", ОтветБудетВДвоичныхДанных=Ложь) Экспорт
	
	Соединение = ЭДО_Транспорт_СоединениеДД();
	
	Результат		= Неопределено;
	ОтветСервера	= Неопределено;
	
	УжеБылиПараметры = (Найти(АдресЗапроса, "?")>0);
	ПолныйАдрес = АдресЗапроса + ?(УжеБылиПараметры, "&", "?") + Параметры;
	
	УжеБылиПараметры = (Найти(ПолныйАдрес, "?")>0);
	ПолныйАдрес = ПолныйАдрес + ?(УжеБылиПараметры, "&", "?") + "nocache=" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "");  // чтобы избежать кэширования ответов на NGINX
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();
	МетодРаботыAPI = ЭДО_Транспорт_МетодРаботыAPI();
		
	Если МетодРаботыAPI = "Native" Тогда
		
		ОтветСервера = ЭДО_Транспорт_HTTPСоединение_ОтправитьЗапрос(Соединение, Метод, Заголовки, ПолныйАдрес, ТекстФайла, ИмяФайлаОтвета);
						
		Если ОтветБудетВДвоичныхДанных Тогда
			Результат = Новый ДвоичныеДанные(ИмяФайлаОтвета);
		Иначе
			ТД=Новый ТекстовыйДокумент;
			ТД.Прочитать(ИмяФайлаОтвета,КодировкаТекста.UTF8);
			Результат=ТД.ПолучитьТекст();
		КонецЕсли;
		
		УдалитьФайлы(ИмяФайлаОтвета);
	
	ИначеЕсли МетодРаботыAPI = "COM" Тогда
		
		АдресАпи = "https://diadoc-api.kontur.ru";
		ЭДО_Транспорт_XMLHTTP_ОтправитьЗапрос(Соединение, Метод, Заголовки, АдресАпи+ПолныйАдрес, ТекстФайла);
        		
		Если ОтветБудетВДвоичныхДанных Тогда			
			Если Соединение.responseBody <> Неопределено Тогда
				Результат = ЭДО_Транспорт_XMLHTTP_ПолучитьДвоичныеДанныеОтвета(Соединение);
			Иначе
				Результат = Неопределено;
			КонецЕсли;
		Иначе
			Результат = Соединение.ResponseText();
		КонецЕсли;
		
	КонецЕсли;
	
	СтруктураОтветаЗапросаКСерверу = Новый Структура("Соединение, ОтветСервера, Результат", Соединение, ОтветСервера, Результат);
	
	Возврат СтруктураОтветаЗапросаКСерверу;
	
КонецФункции

Функция ЭДО_Транспорт_HTTPСоединение_ОтправитьЗапрос(Соединение, Метод, Заголовки, ПолныйАдрес, ТекстФайла, ИмяФайлаОтвета)
	
	// Предполагаем этот режим работы с 8.3.6.1977, где уже однозначно есть HTTPЗапрос
	
	Если Метод = "GET" Тогда
		
		ОтветСервера = Соединение.Получить(ПолныйАдрес,ИмяФайлаОтвета,Заголовки);
		
	ИначеЕсли Метод = "POST" Тогда
		
		_Запрос = Вычислить("Новый HTTPЗапрос(ПолныйАдрес)");
		Если ТипЗнч(ТекстФайла) = Тип("Строка") Тогда
			NoBOM = Вычислить("ИспользованиеByteOrderMark.НеИспользовать");
			_Запрос.УстановитьТелоИзСтроки(ТекстФайла,"UTF-8",NoBOM);//BOM обязательно отключить!
		Иначе
			_Запрос.УстановитьТелоИзДвоичныхДанных(ТекстФайла);//BOM обязательно отключить!
		КонецЕсли;
		
		_Запрос.Заголовки = Заголовки;
		
		ОтветСервера = Соединение.ОтправитьДляОбработки(_Запрос,ИмяФайлаОтвета);
		
	КонецЕсли;
	
	Возврат ОтветСервера;
	
КонецФункции

Процедура ЭДО_Транспорт_XMLHTTP_ОтправитьЗапрос(Соединение, Метод, Заголовки, Адрес, ТекстФайла)
	
	Соединение.Open(Метод, Адрес, 0);
	
	Для Каждого мЗаголовок Из Заголовки Цикл
		Соединение.SetRequestHeader(мЗаголовок.Ключ, мЗаголовок.Значение);
	КонецЦикла;
		
	Соединение.Send(ТекстФайла); // Параметром передаем POST-данные
	
КонецПроцедуры

Функция ЭДО_Транспорт_XMLHTTP_ПолучитьЗначениеЗаголовка(Соединение, ИмяЗаголовка, ЗначениеЗаголовкаЧислом=Ложь)
	
	// Для просмотра всех заголовков XMLHTTP-объекта можно использовать метод: Соединение.getAllResponseHeaders()
	
	Результат = Соединение.getResponseHeader(ИмяЗаголовка);
	
	Если ЗначениеЗаголовкаЧислом Тогда
		Результат = ?(Результат="", 0, Число(Результат));
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭДО_Транспорт_XMLHTTP_ПолучитьДвоичныеДанныеОтвета(XMLHTTP)
	
	ИмяФайлаОтвета = ПолучитьИмяВременногоФайла();

	Поток = Новый COMОбъект("ADODB.Stream");
    Поток.Type = 1;  //Бинарный
    Поток.Mode = 3; 
    Поток.Open();
    Поток.Write(XMLHTTP.responseBody);
    Поток.SaveToFile(ИмяФайлаОтвета);
    Поток.Close();	
	
	Результат = Новый ДвоичныеДанные(ИмяФайлаОтвета);
	
	УдалитьФайлы(ИмяФайлаОтвета);
	
	Возврат Результат;
	
КонецФункции

// API возвращает ответы в JSON, разберем их и вернем Структуру или Масссив
Функция ЭДО_Транспорт_РазобратьОтветAPI(Ответ) Экспорт
	
	Если ПлатформаСтаршеЧем_8_3_6_1977() Тогда
		
		Результат = ЭДО_Служебные_ПарсерJSON().DoParse(Ответ);
		//читаем своим парсером
		
	Иначе
	
		//читаем платформенным парсером, он быстрее
		ИмяВремФайла = ПолучитьИмяВременногоФайла();
		ТД = Новый ТекстовыйДокумент;
		ТД.УстановитьТекст(Ответ);
		ТД.Записать(ИмяВремФайла,"UTF-8");
		
		Чтение = Вычислить("Новый ЧтениеJSON");//8.3
	//	Чтение.УстановитьСтроку(Ответ);
		Чтение.ОткрытьФайл(ИмяВремФайла,"UTF-8");
		Результат = Вычислить("ПрочитатьJSON(Чтение)");
		Чтение.Закрыть();
		УдалитьФайлы(ИмяВремФайла);

	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПлатформаСтаршеЧем_8_3_6_1977()
	
	СИ = Новый СистемнаяИнформация;
	ВерсияПлатформы = СИ.ВерсияПриложения;
	
	ВерсияПлатформыМассивом = ЭДО_Служебные_РазложитьСтрокуВМассивСлов(СИ.ВерсияПриложения,".");
	ВтораяЦифраВерсии = Число(ВерсияПлатформыМассивом[1]);
	ТретьяЦифраВерсии = Число(ВерсияПлатформыМассивом[2]);
	
	Если ВтораяЦифраВерсии < 3
		Или (ВтораяЦифраВерсии = 3 И ТретьяЦифраВерсии < 6)  Тогда
		// 8.3.6 - самая первая официальная платформа на https://releases.1c.ru/project/Platform83
		// Предполагаем, что старше нее в линейке 8.3.6 ничего нет.
		Возврат Истина;
	ИначеЕсли ВтораяЦифраВерсии = 4 Тогда
		// А 8.4 пока не выпущена толком. Будем считать, что ее функционал соответствует более старым 8.3
		Возврат Ложь;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

Функция ЭДО_Транспорт_ВызватьМетодAPI(АдресЗапроса, Метод, ТекстФайла="", ОтветБудетВДвоичныхДанных=Ложь, boxId="", ПолучитьТолькоРезультатОтветаЗапроса=Истина) Экспорт
	
	Результат = Неопределено;
		
	Для НомерПопытки=1 По 2 Цикл  // После первой попытки можем переподключиться
		
		Заголовки = Новый Соответствие;
		Заголовки.Вставить("Accept",		"application/json");  // без этого вернется протобуфер
		Заголовки.Вставить("Content-Type",	"application/json; charset=utf-8");  // для отправки в JSON вместо protobuf
		Заголовки.Вставить("Authorization",	"DiadocAuth ddauth_api_client_id=" + ЭДО_Транспорт_КлючРазработчикаAPI() + ",ddauth_token=" 
							+ ПолучитьТокенДляBoxID(?(boxId="", "", ЭДО_Служебные_АдресЯщикаКонтрагента(boxId))));//+"1" эмулируем кривой токен
		
		Попытка
			
			СтруктураОтветаЗапросаКСерверу = ЭДО_Транспорт_ВыполнитьЗапросКСерверу(АдресЗапроса, "", Заголовки, Метод, ТекстФайла, ОтветБудетВДвоичныхДанных);
	
			Если ПолучитьТолькоРезультатОтветаЗапроса Тогда
				Возврат СтруктураОтветаЗапросаКСерверу.Результат;
			Иначе
			    Возврат СтруктураОтветаЗапросаКСерверу;
			КонецЕсли;
						
		Исключение
			
			_Ошибка = ОписаниеОшибки();
			Сообщить(_Ошибка);
			Возврат Неопределено;
			
		КонецПопытки;
		
	КонецЦикла;	//Попытки
		
	Возврат Результат;
	
КонецФункции

//} служебные обертки низкого уровня

//}		HTTP API ДИАДОКА


//**********************************************
//{		КОНВЕРТАЦИЯ СООТВЕТСТВИЙ ИЗ СТАРОГО МОДУЛЯ


// Процедура для облегчения перехода со старого модуля на новый.
Процедура ВыполнитьКонвертациюСоответствийКонтрагентов(МаркерКонфигурации) Экспорт
	
	Если ЭДО_Использовать1СЭДО() Тогда
		ВыполнитьКонвертациюСоответствийКонтрагентов_1СЭДО(МаркерКонфигурации);
		Возврат;
	КонецЕсли;
	
	// Возможные значения для МаркерКонфигурации: "ОФ", "УФ"
	
	ТаблицаСоответствий = ТаблицаСтарыхСоответствийКонтрагентов(МаркерКонфигурации);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(парам.ID КАК СТРОКА(50)) КАК ID,
	|	ВЫРАЗИТЬ(парам.Контрагент КАК Справочник.Контрагенты) КАК Контрагент
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТаблицаСоответствий КАК парам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Диадок_ЮрФизЛица.Ссылка,
	|	ВТ.Контрагент
	|ИЗ
	|	ВТ КАК ВТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Диадок_ЮрФизЛица КАК Диадок_ЮрФизЛица
	|		ПО ВТ.ID = Диадок_ЮрФизЛица.ID
	|			И ВТ.Контрагент <> Диадок_ЮрФизЛица.СвязанныйСправочник1
	|			И (Диадок_ЮрФизЛица.ИмяСправочника = ""Контрагенты"")"
	);
	
	Запрос.УстановитьПараметр("ТаблицаСоответствий", ТаблицаСоответствий);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		ОбъектКонтрагента = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектКонтрагента.ОбменДанными.Загрузка = Истина;
		ОбъектКонтрагента.СвязанныйСправочник1 = Выборка.Контрагент;
		ОбъектКонтрагента.Записать();
		
		Сообщить("Изменено соответствие для контрагента: " + ОбъектКонтрагента.Наименование);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьКонвертациюСоответствийКонтрагентов_1СЭДО(МаркерКонфигурации) Экспорт
	
	// Возможные значения для МаркерКонфигурации: "ОФ", "УФ"
	
	ТаблицаСоответствий = ТаблицаСтарыхСоответствийКонтрагентов(МаркерКонфигурации);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	ВЫРАЗИТЬ(парам.ID КАК СТРОКА(50)) КАК ID,
	|	ВЫРАЗИТЬ(парам.Контрагент КАК Справочник.Контрагенты) КАК Контрагент
	|ПОМЕСТИТЬ ВТ
	|ИЗ
	|	&ТаблицаСоответствий КАК парам
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ID
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СоглашенияОбИспользованииЭД.Ссылка,
	|	ВТ.Контрагент
	|ИЗ
	|	ВТ КАК ВТ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.СоглашенияОбИспользованииЭД КАК СоглашенияОбИспользованииЭД
	|		ПО ((ВЫРАЗИТЬ(ВТ.ID КАК СТРОКА(50))) = (ВЫРАЗИТЬ(СоглашенияОбИспользованииЭД.ИдентификаторКонтрагента КАК СТРОКА(50))))
	|			И ВТ.Контрагент <> СоглашенияОбИспользованииЭД.Контрагент"
	);
	
	Запрос.УстановитьПараметр("ТаблицаСоответствий", ТаблицаСоответствий);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		ОбъектКонтрагента = Выборка.Ссылка.ПолучитьОбъект();
		ОбъектКонтрагента.ОбменДанными.Загрузка = Истина;
		ОбъектКонтрагента.Контрагент = Выборка.Контрагент;
		ОбъектКонтрагента.Записать();
		
		Сообщить("Изменено соответствие для контрагента: " + ОбъектКонтрагента.Наименование);
		
	КонецЦикла;
	
КонецПроцедуры

Функция ТаблицаСтарыхСоответствийКонтрагентов(МаркерКонфигурации)
	
	// Пора что-то думать про маршрутизацию.
	
	Запрос = Новый Запрос;
	
	Если МаркерКонфигурации = "УФ" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеСведения.Объект КАК Контрагент,
		|	ВЫРАЗИТЬ(ДополнительныеСведения.Значение КАК СТРОКА(50)) КАК ID
		|ИЗ
		|	РегистрСведений.ДополнительныеСведения КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Свойство.Наименование = ""ДДКонтр_""";
		
	ИначеЕсли МаркерКонфигурации = "ОФ" Тогда
		
		Запрос.Текст = 
		"ВЫБРАТЬ
		|	ДополнительныеСведения.Объект КАК Контрагент,
		|	ВЫРАЗИТЬ(ДополнительныеСведения.Значение КАК СТРОКА(50)) КАК ID
		|ИЗ
		|	РегистрСведений.ЗначенияСвойствОбъектов КАК ДополнительныеСведения
		|ГДЕ
		|	ДополнительныеСведения.Свойство.Наименование = ""ДДКонтр_""";
		
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

//}		КОНВЕРТАЦИЯ СООТВЕТСТВИЙ ИЗ СТАРОГО МОДУЛЯ


//**************************************
//{ 	ЗАГРУЗКА / ОБРАБОТКА ВХОДЯЩИХ ДОКУМЕНТОВ
	
// Прочитаем ленту событий сервера в цикле и запишем в базу со сдвигом границы (AfterIndexKey)
// TODO переименовать с учетом того, что метод будет заодно загружать новые документы, а не только менять статусы отправленных
// МаксимальноеКоличествоЦиклов позволяет прогрузить несколько пачек событий и остановиться. Может пригодиться при использовании в подключаемом модуле,
//   чтобы грузить события порциями, не подвешивая систему.
// 1 цикл = 100 событий.
Функция ЭДО_Модуль_ОбработатьНовыеСобытияДокументов(Организация, МаксимальноеКоличествоЦиклов=Неопределено) Экспорт
	
	boxId = Организация.boxId;
	
	Если ПолучитьТокенДляBoxID(boxId) = Неопределено Тогда
		Сообщить(" - не выполнена авторизация по организации "+Организация.Наименование);
		Возврат -1;
	КонецЕсли;
	
	AfterIndexKey 	= ЭДО_СправочникМенеджер_ЗначениеДопРеквизита(Организация.Ссылка,"AfterIndexKey");
	
	СчетчикЦиклов = 0;
	
	Пока Истина Цикл
		
		#Если Клиент Тогда
			ОбработкаПрерыванияПользователя();
		#КонецЕсли
		
		ТаблицаСобытий = ЭДО_Модуль_НоваяТаблицаСобытий(); // Разложим полученные события в плоскую таблицу
		
		Если СтрДлина(AfterIndexKey)=8 ИЛИ СтрДлина(AfterIndexKey)=14 Тогда
			// Нам попалась стартовая дата. Ок, начнем с нее.
			Ticks = (Дата(AfterIndexKey)-'00010101')*1000*1000*10;
			DocflowEventsRequest = DD_API_GetDocflowEventsRequest(Ticks,,,Истина);
		Иначе	
			DocflowEventsRequest = DD_API_GetDocflowEventsRequest(,,AfterIndexKey,Истина);
		КонецЕсли;

		Ответ 				= DD_API_GetDocflowEvents(Организация.boxId, DocflowEventsRequest);
		РазобранныйОтвет	= ЭДО_Транспорт_РазобратьОтветAPI(Ответ);
		
		Для каждого Event Из РазобранныйОтвет.Events Цикл
			
			AfterIndexKey = Event.IndexKey;
			Ticks = Event.Timestamp.Ticks;
			
			СтрокаСобытия = ТаблицаСобытий.Добавить();

			// По следующим 4 полям мы однозначно идентифицируем документ
			СтрокаСобытия.BoxId 			= ЭДО_Служебные_КаноническийГуид(boxId);
			СтрокаСобытия.LetterId 			= Event.DocumentId.MessageId;
			СтрокаСобытия.DocumentId 		= Event.DocumentId.EntityId;
			СтрокаСобытия.DocumentDirection	= Event.Document.DocumentInfo.DocumentDirection;
			
			// Остальное можно взять из Event
			СтрокаСобытия.Event				= Event;
			
			// Timestamp - возможно, будем по нему сворачивать
			СтрокаСобытия.TimestampTicks	= Event.Timestamp.Ticks;
			
		КонецЦикла;
		
		// Поскольку в одной порции может приехать несколько последовательных событий по одному и тому же документу, мы не будем обрабатывать их все, а возьмем только последнее.
		ТаблицаСобытийСвернутая = СвернутьТаблицуСобытий(ТаблицаСобытий); 
		ЭДО_Модуль_СоединитьСобытияСДокументами1С(ТаблицаСобытийСвернутая);
		
		Если ЭДО_Модуль_ОбщиеНастройки().ЗагружатьИсходящиеДокументы = Истина
			ИЛИ ЭДО_Модуль_ОбщиеНастройки().ЗагружатьВходящиеДокументы = Истина Тогда
			ЭДО_Модуль_ЗагрузитьНовыеДокументы(ТаблицаСобытийСвернутая, Организация);
		КонецЕсли;
		
		ЭДО_Модуль_ОбновитьСтатусыОтправленныхДокументов(ТаблицаСобытийСвернутая);
		
		//////////////////////////////////////////////////////////////////////////////////////////////////
		//// ЭТОТ БЛОК ПО ЗАПИСИ ПОЛНОЙ ИСТОРИИ СТАТУСОВ ДОКУМЕНТОВ БУДЕТ ВКЛЮЧЕН В СЛЕДУЮЩИЙ РЕЛИЗ,  ////
		//// В ПОДСИСТЕМУ ТАКЖЕ БУДЕТ ДОБАВЛЕН НОВЫЙ РЕГИСТР СВЕДЕНИЙ "Диадок_СтатусыДокументов"      ////
		//////////////////////////////////////////////////////////////////////////////////////////////////
		// Теперь входящие документы созданы (по свернутой таблице), поэтому определим: к каким документам относятся все события из сотни и запишем их полную историю
		Если НЕ ЭДО_Использовать1СЭДО() Тогда
			ЭДО_Модуль_СоединитьСобытияСДокументами1С(ТаблицаСобытий); 
			ЭДО_Модуль_ЗаписатьИсториюСтатусовДокументов(ТаблицаСобытий);
		КонецЕсли;
		//////////////////////////////////////////////////////////////////////////////////////////////////
		
		Если ЗначениеЗаполнено(AfterIndexKey) Тогда
			Если ЭДО_Использовать1СЭДО() Тогда				
				Если ЗначениеЗаполнено(Ticks) Тогда //в некоторых конфигурациях в доп.свойствах нельзя хранить строки больше 50 символов (AfterIndexKey - 76 символов)
					ДатаВремяПоследнегоСобытия = Формат(Ticks_2_Date(Ticks), "ДФ=yyyyMMddHHmmss");
					ЭДО_УстановитьЗначениеСвойства1СЭДО("AfterIndexKey", ДатаВремяПоследнегоСобытия, Организация.ПрофильНастроекЭДО);
				Иначе //проверять возможность хранения полного AfterIndexKey
					ЭДО_УстановитьЗначениеСвойства1СЭДО("AfterIndexKey", AfterIndexKey, Организация.ПрофильНастроекЭДО);
				КонецЕсли;
			Иначе
				ЭДО_СправочникМенеджер_УстановитьЗначениеДопРеквизита(Организация.Ссылка, "AfterIndexKey", AfterIndexKey);
			КонецЕсли;
		КонецЕсли;
		
		Если РазобранныйОтвет.Events.Количество() = 0 Тогда // ура, события закончились
			Прервать;
		КонецЕсли;
		
		СчетчикЦиклов = СчетчикЦиклов + 1;
		Если ТипЗнч(МаксимальноеКоличествоЦиклов) = Тип("Число") Тогда
			Если СчетчикЦиклов >= МаксимальноеКоличествоЦиклов Тогда
				Прервать;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат РазобранныйОтвет.TotalCount;  // Расскажем, сколько событий впереди еще осталось.
	
КонецФункции

Процедура ЭДО_Модуль_СоединитьСобытияСДокументами1С(ТаблицаСобытий)
	
	Если ЭДО_Использовать1СЭДО() Тогда
		ЭДО_Модуль_СоединитьСобытияСДокументами1С_1СЭДО(ТаблицаСобытий);
		Возврат;
	КонецЕсли;
	
	ТаблицаСобытий.Колонки.Добавить("НомерСтроки",	Новый ОписаниеТипов("Число"));
	ТаблицаСобытий.Колонки.Добавить("Документ1С",	Новый ОписаниеТипов("СправочникСсылка.Диадок_Документы"));

	Для Каждого СтрокаТаблицы Из ТаблицаСобытий Цикл
		// Пронумеруем строки
		СтрокаТаблицы.НомерСтроки = ТаблицаСобытий.Индекс(СтрокаТаблицы);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	События.НомерСтроки,
	|	События.DocumentId,
	|	События.LetterId,
	|	События.BoxId,
	|	События.TimestampTicks
	|ПОМЕСТИТЬ События
	|ИЗ
	|	&События КАК События
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	Диадок_Документы.Ссылка КАК Документ1С,
	|	Диадок_Документы.Статус,
	|	События.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Справочник.Диадок_Документы КАК Диадок_Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ События КАК События
	|		ПО Диадок_Документы.DocumentId = События.DocumentId
	|			И Диадок_Документы.LetterId = События.LetterId
	|			И Диадок_Документы.BoxId = События.BoxId";
		
	Запрос.Параметры.Вставить("События", 		ТаблицаСобытий);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТаблицаСобытий[Выборка.НомерСтроки].Документ1С = Выборка.Документ1С;
	КонецЦикла;

КонецПроцедуры

Процедура ЭДО_Модуль_СоединитьСобытияСДокументами1С_1СЭДО(ТаблицаСобытий)
	
	ТаблицаСобытий.Колонки.Добавить("НомерСтроки",	Новый ОписаниеТипов("Число"));
	ТаблицаСобытий.Колонки.Добавить("Документ1С",	Новый ОписаниеТипов("СправочникСсылка.ЭДПрисоединенныеФайлы"));

	Для Каждого СтрокаТаблицы Из ТаблицаСобытий Цикл
		// Пронумеруем строки
		СтрокаТаблицы.НомерСтроки = ТаблицаСобытий.Индекс(СтрокаТаблицы);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	События.НомерСтроки,
	|	События.DocumentId,
	|	События.LetterId,
	|	События.BoxId,
	|	События.TimestampTicks
	|ПОМЕСТИТЬ События
	|ИЗ
	|	&События КАК События
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭлектронныеДокументы.ЭлектронныйДокумент КАК Документ1С,
	|	ЭлектронныеДокументы.ЭлектронныйДокумент.СтатусЭД КАК Статус,
	|	События.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ЭлектронныеДокументы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ События КАК События
	|		ПО ЭлектронныеДокументы.ЭлектронныйДокумент.УникальныйИД = События.DocumentId
	|			И ЭлектронныеДокументы.ЭлектронныйДокумент.УникальныйИДВнешний = События.LetterId
	|			И ((ВЫРАЗИТЬ(ЭлектронныеДокументы.Ссылка.ПрофильНастроекЭДО.ОператорЭДОИд КАК СТРОКА(50))) = События.BoxId)";
		
	Запрос.Параметры.Вставить("События", ТаблицаСобытий);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТаблицаСобытий[Выборка.НомерСтроки].Документ1С = Выборка.Документ1С;
	КонецЦикла;

КонецПроцедуры

// Инициализирует пустую ТаблицуЗначений, в которую будут записаны события из ленты GetDocFlowEvents
Функция ЭДО_Модуль_НоваяТаблицаСобытий()

	Результат = Новый ТаблицаЗначений; 
	
	ОписаниеБулева 	= Новый ОписаниеТипов("Булево");
	ОписаниеЧисла 	= Новый ОписаниеТипов("Число",	,, 		Новый КвалификаторыЧисла(18));
	ОписаниеСтроки 	= Новый ОписаниеТипов("Строка",	,,,		Новый КвалификаторыСтроки(100));
	ОписаниеДаты	= Новый ОписаниеТипов("Дата",	,,,,	Новый КвалификаторыДаты(ЧастиДаты.Дата));
	                                                            
	Результат.Колонки.Добавить("Event"); // здесь будет описание Event полностью
	
	Результат.Колонки.Добавить("LetterId",				ОписаниеСтроки);
	Результат.Колонки.Добавить("BoxId",					ОписаниеСтроки);
	Результат.Колонки.Добавить("DocumentId",			ОписаниеСтроки);
	Результат.Колонки.Добавить("TimestampTicks",		ОписаниеЧисла);
	Результат.Колонки.Добавить("DocumentDirection",		ОписаниеСтроки); // на всякий случай
	
	//основные поля закончились
	//Результат.Колонки.Добавить("CounteragentBoxId",		ОписаниеСтроки);
	//
	//Результат.Колонки.Добавить("IsFinished",				ОписаниеБулева);
	//Результат.Колонки.Добавить("StatusText",				ОписаниеСтроки);
	//Результат.Колонки.Добавить("SecondaryStatusText",		ОписаниеСтроки);
	//
	//Результат.Колонки.Добавить("DocumentType",			ОписаниеСтроки);
	//Результат.Колонки.Добавить("DocumentDate",			ОписаниеДаты);
	//Результат.Колонки.Добавить("DocumentNumber",			ОписаниеСтроки);
	
	Возврат Результат;                                                   

КонецФункции // ТаблицаСобытий()

Процедура ЭДО_Модуль_ОбновитьСтатусыОтправленныхДокументов(ТаблицаСобытий)

	Если ЭДО_Использовать1СЭДО() Тогда
		ЭДО_Модуль_ОбновитьСтатусыОтправленныхДокументов_1СЭДО(ТаблицаСобытий);
		Возврат;
	КонецЕсли;
			
	Для каждого СтрокаСобытия из ТаблицаСобытий Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаСобытия.Документ1С) Тогда
			Продолжить;
		КонецЕсли;
		
		Документ = СтрокаСобытия.Документ1С.ПолучитьОбъект();
		
		Документ.DepartmentId			= СтрокаСобытия.Event.Document.Docflow.DepartmentId;
		Документ.Статус					= СтрокаСобытия.Event.Document.Docflow.DocflowStatus.PrimaryStatus.StatusText;
		
		Если СтрокаСобытия.Event.Document.Docflow.DocflowStatus.Свойство("SecondaryStatus") Тогда
			Документ.ДополнительныйСтатус 	= СтрокаСобытия.Event.Document.Docflow.DocflowStatus.SecondaryStatus.StatusText;
		КонецЕсли;
		
		Документ.ТребуетсяОбработка		= Не СтрокаСобытия.Event.Document.Docflow.IsFinished;  //???
		
		Документ.Записать();
		
		ЭДО_ПодключаемыйМодуль_ОбработатьСобытие("ПослеУстановкиСтатусаДокумента", Новый Структура("ДокументДД, Статус", Документ.Ссылка, Документ.Статус));
		
	КонецЦикла;

КонецПроцедуры

Процедура ЭДО_Модуль_ОбновитьСтатусыОтправленныхДокументов_1СЭДО(ТаблицаСобытий)
    		
	Для каждого СтрокаСобытия из ТаблицаСобытий Цикл
		
		Если Не ЗначениеЗаполнено(СтрокаСобытия.Документ1С) Тогда
			Продолжить;
		КонецЕсли;
		
		НаименованиеСтатуса = СтрокаСобытия.Event.Document.Docflow.DocflowStatus.PrimaryStatus.StatusText;
		
		Документ = СтрокаСобытия.Документ1С.ПолучитьОбъект();		
		Документ.ДополнительнаяИнформация = НаименованиеСтатуса;				
		Документ.ОбменДанными.Загрузка = Истина;
		Документ.Записать();
		
		//Добавим для СФ статусы в регистр сведений "СостоянияЭД" 
		Если ЭДО_Служебные_ПроверитьНаличиеОбъектаМетаданных("Документы.СчетФактураВыданный")
			И ТипЗнч(СтрокаСобытия.Документ1С.ВладелецФайла) = Тип("ДокументСсылка.СчетФактураВыданный") Тогда//VRN - тип документа по хорошему д.б. в ПМ, но надо посмотреть какие варианты еще есть в конфах с 1С-ЭДО
			
			СостояниеЭД = Новый Структура("ДействияСНашейСтороны,ДействияСоСтороныДругогоУчастника");
			
			Если Найти("Подписан контрагентом|Контрагент отказал в подписи|Документооборот завершен|Аннулирован|Отказано в аннулировании", НаименованиеСтатуса) > 0 Тогда
				
				СостояниеЭД.ДействияСНашейСтороны 				= Перечисления.СводныеСостоянияЭД.ВсеВыполнено;
				СостояниеЭД.ДействияСоСтороныДругогоУчастника 	= Перечисления.СводныеСостоянияЭД.ВсеВыполнено;
				
			ИначеЕсли Найти(ВРег(НаименованиеСтатуса), "ОЖИДАЕТСЯ") > 0 Тогда
				
				СостояниеЭД.ДействияСНашейСтороны 				= Перечисления.СводныеСостоянияЭД.ДействийНеТребуется;
				СостояниеЭД.ДействияСоСтороныДругогоУчастника 	= Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				
			Иначе				
				СостояниеЭД.ДействияСНашейСтороны 				= Перечисления.СводныеСостоянияЭД.ТребуютсяДействия;
				СостояниеЭД.ДействияСоСтороныДругогоУчастника 	= Неопределено;
			КонецЕсли;
			
			МенеджерЗаписи = РегистрыСведений.СостоянияЭД.СоздатьМенеджерЗаписи();
			МенеджерЗаписи.СсылкаНаОбъект = СтрокаСобытия.Документ1С.ВладелецФайла;
			МенеджерЗаписи.ЭлектронныйДокумент = СтрокаСобытия.Документ1С;			
			МенеджерЗаписи.ДействияСНашейСтороны = СостояниеЭД.ДействияСНашейСтороны;
			МенеджерЗаписи.ДействияСоСтороныДругогоУчастника = СостояниеЭД.ДействияСоСтороныДругогоУчастника;
			МенеджерЗаписи.Комментарий = НаименованиеСтатуса;
			МенеджерЗаписи.Записать();
			
		КонецЕсли;
		
		ЭДО_ПодключаемыйМодуль_ОбработатьСобытие("ПослеУстановкиСтатусаДокумента", Новый Структура("ДокументДД, Статус", Документ.Ссылка, НаименованиеСтатуса));
		
	КонецЦикла;

КонецПроцедуры

Процедура ЗаполнитьДанныеДокументаПоСобытию(Документ, Event, ОрганизацияДиадок, boxId)
	
	Если Event.Document.DocumentInfo.DocumentDirection = "Inbound" Тогда
		Документ.Направление		= "Входящее";
	ИначеЕсли Event.Document.DocumentInfo.DocumentDirection = "Outbound" Тогда
		Документ.Направление		= "Исходящее";
		Документ.Метка				= "ЗагруженИзДиадок";
	ИначеЕсли Event.Document.DocumentInfo.DocumentDirection = "Internal" Тогда
		Документ.Направление		= "Внутреннее";
	Иначе
		Документ.Направление		= "Неизвестное";
	КонецЕсли;
	
	Документ.ОрганизацияДиадок	= ОрганизацияДиадок;
	
	// Лучше кэшировать соответствия контрагентов на время выполнения обмена.
	Если ЗначениеЗаполнено(Event.Document.DocumentInfo.CounteragentBoxId) Тогда
		
		CounteragentBoxId = ЭДО_Служебные_АдресЯщикаКонтрагента(Event.Document.DocumentInfo.CounteragentBoxId);
		Документ.КонтрагентДиадок	= ПолучитьСоответствиеЮрФизЛицаПоИД(CounteragentBoxId, "Контрагенты");
		
		Если Не ЗначениеЗаполнено(Документ.КонтрагентДиадок) Тогда
			Документ.КонтрагентДиадок = СоздатьКонтрагентаПоBoxId(CounteragentBoxId);
		КонецЕсли;
		
	КонецЕсли;
	
	Если Event.Document.DocumentInfo.Свойство("UniversalTransferDocumentInfo") Тогда
		Документ.ФункцияДокумента = Event.Document.DocumentInfo.UniversalTransferDocumentInfo.Function;
	КонецЕсли;
	
	Если Event.Document.DocumentInfo.Свойство("DocumentDateAndNumber") Тогда
		_Дата = Event.Document.DocumentInfo.DocumentDateAndNumber.DocumentDate; // пример: "25.11.2016"
		Документ.ДатаДокумента		= Дата(Сред(_Дата,7,4) + Сред(_Дата,4,2) + Сред(_Дата,1,2));
		Документ.НомерДокумента		= Event.Document.DocumentInfo.DocumentDateAndNumber.DocumentNumber;
	КонецЕсли;
	
	Документ.BoxId			= ЭДО_Служебные_КаноническийГуид(BoxId);
	Документ.LetterId		= Event.DocumentId.MessageId;
	Документ.DocumentId		= Event.DocumentId.EntityId;
	Документ.DepartmentId	= Event.Document.Docflow.DepartmentId;
	Документ.Статус			= Event.Document.Docflow.DocflowStatus.PrimaryStatus.StatusText;
	
	Если Event.Document.Docflow.DocflowStatus.Свойство("SecondaryStatus") Тогда
		Документ.ДополнительныйСтатус 	= Event.Document.Docflow.DocflowStatus.SecondaryStatus.StatusText;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Документ.ДатаЗагрузки) И Event.Document.Docflow.Свойство("DeliveryTimestamp") Тогда
		
		Документ.ДатаЗагрузки = Ticks_2_Date(Event.Document.Docflow.DeliveryTimestamp.Ticks);  // дата получения документа
		
	КонецЕсли;
	
	Документ.ТипДокумента = Event.Document.DocumentInfo.DocumentType;
	
	ОписаниеТипаДокумента= ЭДО_ОписаниеТипаДокумента(Event.Document.DocumentInfo.DocumentType);
	Если Не ОписаниеТипаДокумента = Неопределено Тогда
		
		ИмяСекцииСвойствДокумента= ЭДО_ОписаниеТипаДокумента(Event.Document.DocumentInfo.DocumentType).ИмяМеты;
		
		СекцияСвойств= Неопределено;
		Если ЗначениеЗаполнено(ИмяСекцииСвойствДокумента) и Event.Document.DocumentInfo.Свойство(ИмяСекцииСвойствДокумента, СекцияСвойств) Тогда
			
			Если СекцияСвойств.Свойство("Total") Тогда
				Документ.СуммаДокумента= ЧислоИзСтроки(СекцияСвойств.Total); 
			КонецЕсли;
			
		КонецЕсли;

	КонецЕсли;
	
КонецПроцедуры

Процедура ЭДО_Модуль_ЗаписатьИсториюСтатусовДокументов(ТаблицаСобытий)
	
	Если ЭДО_Использовать1СЭДО() Тогда		
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаСобытия Из ТаблицаСобытий Цикл
		
		Если ЗначениеЗаполнено(СтрокаСобытия.Документ1С) Тогда
			
			Запись = РегистрыСведений.Диадок_СтатусыДокументов.СоздатьМенеджерЗаписи();
			
			Запись.Документ 	= СтрокаСобытия.Документ1С;			
			Запись.Ticks 		= СтрокаСобытия.Event.Timestamp.Ticks;			
			Запись.Severity 	= СтрокаСобытия.Event.Document.Docflow.DocflowStatus.PrimaryStatus.Severity;
			Запись.StatusText 	= СтрокаСобытия.Event.Document.Docflow.DocflowStatus.PrimaryStatus.StatusText;
			Запись.StatusHint 	= СтрокаСобытия.Event.Document.Docflow.DocflowStatus.PrimaryStatus.StatusHint;
			Запись.IsFinished 	= СтрокаСобытия.Event.Document.Docflow.IsFinished;
			
			Если СтрокаСобытия.Event.Document.Docflow.DocflowStatus.Свойство("SecondaryStatus") Тогда
				Запись.SecondarySeverity 	= СтрокаСобытия.Event.Document.Docflow.DocflowStatus.SecondaryStatus.Severity;
				Запись.SecondaryStatusText 	= СтрокаСобытия.Event.Document.Docflow.DocflowStatus.SecondaryStatus.StatusText;
				Запись.SecondaryStatusHint 	= СтрокаСобытия.Event.Document.Docflow.DocflowStatus.SecondaryStatus.StatusHint;
			КонецЕсли;
			
			Запись.ДатаСтатуса = Ticks_2_Date(Запись.Ticks);
			
			Запись.Записать();
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция Ticks_2_Date(Ticks)
	Возврат '00010101' + (Ticks/1000/1000/10);
КонецФункции

Процедура Таймаут(ДлительностьВСекундах) Экспорт

   Попытка
      WshShell= Новый COMОбъект("WScript.Shell");
	  ДлительностьВМиллиСекундах = ДлительностьВСекундах * 1000;
      WshShell.Run("ping -n 1 -w "+Формат(ДлительностьВМиллиСекундах, "ЧГ=0")+" 127.255.255.255", 0, -1);
   Исключение
   КонецПопытки;
    
КонецПроцедуры

Функция ЧислоИзСтроки(Знач Строка)
	
	Строка= СтрЗаменить(Строка, ",", ".");
	Строка= СтрЗаменить(Строка, " ", "");
	Строка= СтрЗаменить(Строка, Символы.НПП, "");
	Строка= ?(Строка="", "0", Строка);
	
	Возврат Число(Строка);
	
КонецФункции

// Сворачивает ТаблицуЗначений События по 3 полям - BoxId, LetterId, DocumentId
Функция СвернутьТаблицуСобытий(ТаблицаСобытий)
	
	Результат = ТаблицаСобытий.СкопироватьКолонки(); // создадим новую ТЗ
	
	ИменаКолонокСвертки = "BoxId,LetterId,DocumentId";
	ТаблицаСобытий.Индексы.Добавить(ИменаКолонокСвертки);
	
	ТаблицаСвернутая = ТаблицаСобытий.Скопировать(,ИменаКолонокСвертки);
	ТаблицаСвернутая.Свернуть(ИменаКолонокСвертки);
	СтруктураПоиска = Новый Структура(ИменаКолонокСвертки);
	
	Для Каждого СтрокаКлючей Из ТаблицаСвернутая Цикл
		
		ЗаполнитьЗначенияСвойств(СтруктураПоиска,СтрокаКлючей);
		СтрокиИсходнойТаблицы = ТаблицаСобытий.НайтиСтроки(СтруктураПоиска);
		НовСтрока = Результат.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока,СтрокиИсходнойТаблицы[СтрокиИсходнойТаблицы.Количество()-1]);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция СоздатьКонтрагентаПоBoxId(BoxId)
	
	НовЭлемент = Справочники.Диадок_ЮрФизЛица.СоздатьЭлемент();
	
	НовЭлемент.Наименование			= "<новый контрагент>";
	НовЭлемент.ИмяСправочника		= "Контрагенты";
	НовЭлемент.ID					= BoxId;
	
	НовЭлемент.УстановитьНовыйКод();
	НовЭлемент.Записать();
	ЭДО_ОбновитьДанныеКонтрагента(НовЭлемент.Ссылка);  // и сразу заполним все его реквизиты
	
	Возврат НовЭлемент.Ссылка;
	
КонецФункции

Функция СоздатьКонтрагентаПоBoxId_1СЭДО(ПрофильНастроекЭДО, ID)
	
	ЭлементОбъект = Справочники.СоглашенияОбИспользованииЭД.СоздатьЭлемент();
	ЭлементОбъект.УстановитьНовыйКод();
	
	ЭлементОбъект.Наименование				= "<новый контрагент>";
	ЭлементОбъект.ИдентификаторОрганизации	= СокрЛП(ПрофильНастроекЭДО.ИдентификаторОрганизации);
	ЭлементОбъект.ИдентификаторКонтрагента	= СокрЛП(ID);
	ЭлементОбъект.ПрофильНастроекЭДО		= ПрофильНастроекЭДО;				
	ЭлементОбъект.СтатусПодключения			= ПолучитьСтатусКонтрагента_1СЭДО("IsMyCounteragent");	
	
	ЭлементОбъект.ОбменДанными.Загрузка = Истина;
	ЭлементОбъект.Записать();
			
	Возврат ЭлементОбъект.Ссылка;
	
КонецФункции

Процедура ЭДО_Модуль_ЗагрузитьНовыеДокументы(ТаблицаСобытий, ДанныеОрганизации)

	Если ЭДО_Использовать1СЭДО() Тогда
		ЭДО_Модуль_ЗагрузитьНовыеДокументы_1СЭДО(ТаблицаСобытий, ДанныеОрганизации);
		Возврат;
	КонецЕсли;
	
	ОрганизацияДиадок = ДанныеОрганизации.Ссылка;
	
	Для каждого СтрокаСобытия из ТаблицаСобытий Цикл
		
		Если СтрокаСобытия.DocumentDirection = "Outbound" И ЭДО_Модуль_ОбщиеНастройки().ЗагружатьИсходящиеДокументы <> Истина
			ИЛИ СтрокаСобытия.DocumentDirection = "Inbound" И ЭДО_Модуль_ОбщиеНастройки().ЗагружатьВходящиеДокументы <> Истина Тогда
			Продолжить;
		КонецЕсли;
			
		Если ЗначениеЗаполнено(СтрокаСобытия.Документ1С) Тогда
			Док = СтрокаСобытия.Документ1С;
		Иначе
			
			Запрос = Новый Запрос(
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	Диадок_Документы.Ссылка
			|ИЗ
			|	Справочник.Диадок_Документы КАК Диадок_Документы
			|ГДЕ
			|	Диадок_Документы.DocumentId = &DocumentId
			|	И Диадок_Документы.LetterId = &LetterId
			|	И Диадок_Документы.BoxId = &BoxId"
			);
			
			Запрос.УстановитьПараметр("DocumentId",	СтрокаСобытия.DocumentId);
			Запрос.УстановитьПараметр("LetterId",	СтрокаСобытия.LetterId);
			Запрос.УстановитьПараметр("BoxId",		СтрокаСобытия.BoxId);
			
			Док = ЭДО_Служебные_ПолучитьРезультатЗапроса(Запрос);
				
		КонецЕсли;
		
		ЭтоЗаблокированныйПакет = Ложь;
		Если Док = Неопределено Тогда
			
			// Если документ уже сохранен в базу, то запрашиваем его контент.
			// Иначе - не запрашиваем и предполагаем, что он уже в базе.
			ДокументПрямогоAPI= API_GetDocument(СтрокаСобытия.BoxId, СтрокаСобытия.LetterId, СтрокаСобытия.DocumentId);
			ЭтоЗаблокированныйПакет = ДокументПрямогоAPI.PacketIsLocked;
			// TODO перевести на http://api-docs.diadoc.ru/ru/latest/http/GetEntityContent.html
			
			ДокОбъект = Справочники.Диадок_Документы.СоздатьЭлемент();
			
			Попытка
				
				ДокОбъект.ХранилищеКонтента= Новый ХранилищеЗначения(Base64Значение(ДокументПрямогоAPI.Content.Data));
				
				Если ДокументПрямогоAPI.Свойство("AttachmentVersion") Тогда
					ДокОбъект.ТипКонтента = ДокументПрямогоAPI.AttachmentVersion;
				КонецЕсли;
				
			Исключение
				ЭДО_Служебные_СообщитьОбОшибке(
				"Контент документа не загружен: 
				|boxId: " + СтрокаСобытия.BoxId + "
				|LetterId: " + СтрокаСобытия.LetterId + "
				|DocumentId: " + СтрокаСобытия.DocumentId
					, ОписаниеОшибки());
			КонецПопытки;
			
		Иначе
			
			ДокОбъект = Док.ПолучитьОбъект();

		КонецЕсли;
		
		ЗаполнитьДанныеДокументаПоСобытию(ДокОбъект, СтрокаСобытия.Event, ОрганизацияДиадок, СтрокаСобытия.BoxId);
		
		Если ДокОбъект.ЭтоНовый() Тогда
			
			// также надо найти / создать пакет
			ПакетСсылка = НайтиПакетДокументов(СтрокаСобытия.BoxId, СтрокаСобытия.LetterId);
			Если ПакетСсылка = Неопределено Тогда
				
				НовыйПакет = Справочники.Диадок_ПакетыДокументов.СоздатьЭлемент();
				ЗаполнитьЗначенияСвойств(НовыйПакет, ДокОбъект, "Направление, BoxId, LetterId, КонтрагентДиадок, ОрганизацияДиадок, Метка");
				НовыйПакет.ЗаблокированныйПакет = ЭтоЗаблокированныйПакет;
				НовыйПакет.УстановитьНовыйКод();
				НовыйПакет.Записать();
				
				ПакетСсылка = НовыйПакет.Ссылка;
				
			КонецЕсли;
			
			ДокОбъект.Пакет = ПакетСсылка;
			ДокОбъект.УстановитьНовыйКод();
			
		КонецЕсли;
		
		ДокОбъект.Записать();
			
		// Контрагента можно будет дозаполнить в форме соответствия контрагентов
			
	КонецЦикла;

КонецПроцедуры

Функция НайтиПакетДокументов(BoxId, LetterId)
	
	Результат = Неопределено;
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Диадок_ПакетыДокументов.Ссылка
	|ИЗ
	|	Справочник.Диадок_ПакетыДокументов КАК Диадок_ПакетыДокументов
	|ГДЕ
	|	Диадок_ПакетыДокументов.BoxId = &BoxId
	|	И Диадок_ПакетыДокументов.LetterId = &LetterId"
	);
	Запрос.УстановитьПараметр("BoxId",		BoxId);
	Запрос.УстановитьПараметр("LetterId",	LetterId);
	Возврат ЭДО_Служебные_ПолучитьРезультатЗапроса(Запрос);
	
КонецФункции


Процедура ЭДО_Модуль_ЗагрузитьНовыеДокументы_1СЭДО(ТаблицаСобытий, ДанныеОрганизации)
	
	Для каждого СтрокаСобытия из ТаблицаСобытий Цикл
		
		Если СтрокаСобытия.DocumentDirection <> "Inbound" Тогда
			Продолжить; 
		КонецЕсли;
		
		Event = СтрокаСобытия.Event;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектронныеДокументы.Ссылка КАК ПакетСсылка,
		|	ЭлектронныеДокументы.ЭлектронныйДокумент КАК ДокументСсылка,
		|	ЭлектронныеДокументы.ЭлектронныйДокумент.УникальныйИД КАК DocumentId
		|ИЗ
		|	Документ.ПакетЭД.ЭлектронныеДокументы КАК ЭлектронныеДокументы
		|ГДЕ
		|	ЭлектронныеДокументы.ЭлектронныйДокумент.УникальныйИДВнешний = &LetterId
		|	И (ВЫРАЗИТЬ(ЭлектронныеДокументы.Ссылка.ПрофильНастроекЭДО.ОператорЭДОИд КАК СТРОКА(50))) = &BoxId"
		);
		
		Запрос.УстановитьПараметр("DocumentId",	СтрокаСобытия.DocumentId);
		Запрос.УстановитьПараметр("LetterId",	СтрокаСобытия.LetterId);
		Запрос.УстановитьПараметр("BoxId",		СтрокаСобытия.BoxId);
		
		РезультатЗапроса = Запрос.Выполнить();
		
		ПакетСсылка 	= Неопределено;
		ДокументСсылка 	= Неопределено;
		
		Если НЕ РезультатЗапроса.Пустой() Тогда
			
			Выборка = РезультатЗапроса.Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ПакетСсылка = Выборка.ПакетСсылка;
				Если Выборка.DocumentId = СтрокаСобытия.DocumentId Тогда
					ДокументСсылка = Выборка.ДокументСсылка;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПакетСсылка) Тогда
			ОбъектПакета = ПакетСсылка.ПолучитьОбъект();
		Иначе

			ОбъектПакета = Документы.ПакетЭД.СоздатьДокумент();
			ОбъектПакета.УстановитьНовыйНомер();			

			ОбъектПакета.Дата 		  		= ТекущаяДата();
			ОбъектПакета.Направление  		= Перечисления.НаправленияЭД.Входящий;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокументСсылка) Тогда				
			ОбъектДокумента = ДокументСсылка.ПолучитьОбъект();
		Иначе
			ОбъектДокумента = Справочники.ЭДПрисоединенныеФайлы.СоздатьЭлемент();
			ОбъектДокумента.УстановитьНовыйКод();			

			ОбъектДокумента.НаправлениеЭД 			= Перечисления.НаправленияЭД.Входящий;
			ОбъектДокумента.УникальныйИД 			= СтрокаСобытия.DocumentId;
			ОбъектДокумента.УникальныйИДВнешний 	= СтрокаСобытия.LetterId;
		КонецЕсли;
		
		ДокументПрямогоAPI= API_GetDocument(СтрокаСобытия.BoxId, СтрокаСобытия.LetterId, СтрокаСобытия.DocumentId);
		// TODO перевести на http://api-docs.diadoc.ru/ru/latest/http/GetEntityContent.html
		
		ОбъектПакета.ПрофильНастроекЭДО = ДанныеОрганизации.ПрофильНастроекЭДО;
		ОбъектПакета.НастройкаЭДО	  	= ПолучитьСоответствиеЮрФизЛицаПоИД_1СЭДО("Контрагенты", ДокументПрямогоAPI.CounteragentBoxId, ДанныеОрганизации.ПрофильНастроекЭДО.ИдентификаторОрганизации);
		
		// TODO кэшировать соответствия контрагентов на время выполнения обмена.
		
		Если Не ЗначениеЗаполнено(ОбъектПакета.НастройкаЭДО) Тогда
			Сообщить("Не найдено соответствие для контрагента с boxId " + ДокументПрямогоAPI.CounteragentBoxId + ".
			|Зайдите в настройки контрагентов и нажмите ""Синхронизировать с сервером"".");
			ОбъектПакета.НастройкаЭДО = СоздатьКонтрагентаПоBoxId_1СЭДО(ДанныеОрганизации.ПрофильНастроекЭДО, ДокументПрямогоAPI.CounteragentBoxId);
		КонецЕсли;
		
		Попытка					
			ОбъектДокумента.ФайлХранилище = Новый ХранилищеЗначения(Новый Структура("ХранилищеКонтента", Base64Значение(ДокументПрямогоAPI.Content.Data)));
		Исключение
			ЭДО_Служебные_СообщитьОбОшибке(
			"Контент документа не загружен: 
			|boxId: " + СтрокаСобытия.BoxId + "
			|LetterId: " + СтрокаСобытия.LetterId + "
			|DocumentId: " + СтрокаСобытия.DocumentId
			, ОписаниеОшибки());
		КонецПопытки;
		
		
		ДатаДокумента = ""; НомерДокумента = ""; ТипДокумента = ""; СуммаДокумента = "";
		
		Если Event.Document.DocumentInfo.Свойство("DocumentDateAndNumber") Тогда
			ДатаДокументаИсходная = Event.Document.DocumentInfo.DocumentDateAndNumber.DocumentDate;
			ДатаДокумента = Сред(ДатаДокументаИсходная,7,4) + Сред(ДатаДокументаИсходная,4,2) + Сред(ДатаДокументаИсходная,1,2);
			НомерДокумента= Event.Document.DocumentInfo.DocumentDateAndNumber.DocumentNumber;
		КонецЕсли;
		
		ТипДокумента = Event.Document.DocumentInfo.DocumentType;			
		ОписаниеТипаДокумента = ЭДО_ОписаниеТипаДокумента(Event.Document.DocumentInfo.DocumentType);
		
		Если ОписаниеТипаДокумента <> Неопределено Тогда
			
			ИмяСекцииСвойствДокумента = ЭДО_ОписаниеТипаДокумента(Event.Document.DocumentInfo.DocumentType).ИмяМеты;				
			СекцияСвойств = Неопределено;
			
			Если ЗначениеЗаполнено(ИмяСекцииСвойствДокумента) И Event.Document.DocumentInfo.Свойство(ИмяСекцииСвойствДокумента, СекцияСвойств) Тогда				
				Если СекцияСвойств.Свойство("Total") Тогда
					СуммаДокумента = ЧислоИзСтроки(СекцияСвойств.Total); 
				КонецЕсли;					
			КонецЕсли;
			
			ОбъектДокумента.Наименование = Врег(Лев(ОписаниеТипаДокумента.Описание,1))+Прав(ОписаниеТипаДокумента.Описание, СтрДлина(ОписаниеТипаДокумента.Описание)-1)+" №"+СокрЛП(НомерДокумента)+" от "+ДатаДокументаИсходная;			
			
		Иначе
			ОбъектДокумента.Наименование = "Документ в формате "+ТипДокумента;
		КонецЕсли;			
				
		ОбъектДокумента.Описание= Лев(ТипДокумента+СтрокаЗаданнойДлины(40),40)
								+ Лев(СтрЗаменить(Строка(СуммаДокумента),Символы.НПП, "")+СтрокаЗаданнойДлины(20),20)
								+ Лев(ДатаДокумента+СтрокаЗаданнойДлины(15),15)
								+ НомерДокумента;		
		
		ОбъектДокумента.ДатаСоздания = Ticks_2_Date(Event.Document.Docflow.DeliveryTimestamp.Ticks);
		ОбъектДокумента.ДополнительнаяИнформация = Event.Document.Docflow.DocflowStatus.PrimaryStatus.StatusText;
		
		ОбъектДокумента.ОбменДанными.Загрузка = Истина;
		ОбъектДокумента.Записать();
		
		Если ОбъектПакета.ЭлектронныеДокументы.Найти(ОбъектДокумента.Ссылка) = Неопределено Тогда
			СтрокаТЧ = ОбъектПакета.ЭлектронныеДокументы.Добавить();
			СтрокаТЧ.ЭлектронныйДокумент = ОбъектДокумента.Ссылка;
		КонецЕсли;
		
		ОбъектПакета.ОбменДанными.Загрузка = Истина;
		ОбъектПакета.Записать();
					
	КонецЦикла;

КонецПроцедуры
	
Функция API_GetDocument(boxId, messageId, entityId) Экспорт
	
	// http://api-docs.diadoc.ru/ru/latest/http/GetDocument.html
	
	Ответ = ЭДО_Транспорт_ВызватьМетодAPI("/V3/GetDocument?boxId="+boxId+"&messageId="+messageId+"&entityId="+entityId, "GET",,,boxId);
	РазобранныйОтвет = ЭДО_Транспорт_РазобратьОтветAPI(Ответ);
	Возврат РазобранныйОтвет;
	
КонецФункции

// Скоростной парсер XML без схем
Функция XML_В_XDTO(Текст) Экспорт
	
	Чтение = Новый ЧтениеXML;
	Чтение.УстановитьСтроку(Текст);
	
	Возврат ФабрикаXDTO.ПрочитатьXML(Чтение);
	
КонецФункции

Функция ДвоичныеДанные_В_Текст(ДД) Экспорт
	
	Результат= Неопределено;
	
	ВФ= ПолучитьИмяВременногоФайла();
	ДД.Записать(ВФ);
	
	ТД= Новый ТекстовыйДокумент;
	ТД.Прочитать(ВФ);
	
	УдалитьФайлы(ВФ);
	
	Возврат ТД.ПолучитьТекст();
	
КонецФункции

//}		ЗАГРУЗКА / ОБРАБОТКА ВХОДЯЩИХ ДОКУМЕНТОВ


//**************************************
//{		ОБРАБОТКА ВХОДЯЩИХ - ДЕЙСТВИЯ С ДОКУМЕНТАМИ
	
Процедура ЗаписатьСопоставлениеДокументаДД_С_Документом_1С(ДокументДД, Документ1С, ПроверятьСуществующееСопоставление=Истина) Экспорт
	
	ДокДДОбъект= ДокументДД.ПолучитьОбъект();
	Если ПроверятьСуществующееСопоставление И ЗначениеЗаполнено(ЭДО_ПолучитьСвязанныйДокумент1С(ДокДДОбъект)) Тогда
		ВызватьИсключение "Документ уже сопоставлен "+ДокументДД;
	КонецЕсли;
	
	Если ЭДО_Использовать1СЭДО() Тогда
		ДокДДОбъект.ОбменДанными.Загрузка = Истина;
		ДокДДОбъект.ВладелецФайла = Документ1С;
	Иначе
		ДокДДОбъект.Документ= Документ1С;
	КонецЕсли;
	
	ДокДДОбъект.Записать();
	
КонецПроцедуры
	
Процедура ОтменитьСопоставлениеДокументаДД(ДокументДД) Экспорт
	
	Если ЭДО_Использовать1СЭДО() Тогда
		 ОтменитьСопоставлениеДокументаДД_1СЭДО(ДокументДД);
		 Возврат;
	КонецЕсли;
	
	ДокДДОбъект= ДокументДД.ПолучитьОбъект();
	ДокДДОбъект.Документ= Неопределено;
	ДокДДОбъект.Записать();
	
КонецПроцедуры

Процедура ОтменитьСопоставлениеДокументаДД_1СЭДО(ДокументДД) Экспорт
	
	ДокДДОбъект = ДокументДД.ПолучитьОбъект();
	ДокДДОбъект.ВладелецФайла = Неопределено;
	ДокДДОбъект.ОбменДанными.Загрузка = Истина;
	ДокДДОбъект.Записать();
	
КонецПроцедуры
	
// Структура с ключами, соответствующими вариантам ответа на входящий документ
Функция ЭДО_Перечисление_ВариантыОтветаПоДокументу() Экспорт
	
	Результат= ЭДО_Кэш_Прочитать("ВариантыОтветаПоДокументу");
	Если Результат = Неопределено Тогда
		
		Результат= Новый Структура;
		
		РежимыСтрокой= 
		"Подписать
		|ОтказатьВПодписи
		|ЗапроситьУточнение";
		
		Для Каждого Элемент Из ЭДО_Служебные_РазложитьСтрокуВМассивСлов(РежимыСтрокой) Цикл
			Результат.Вставить(Элемент, Элемент);
		КонецЦикла;
			
		ЭДО_Кэш_Поместить("ВариантыОтветаПоДокументу", Результат);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ДД_Компонента_ИмяКонтентаОтветаДляТипаДокумента(ТипДокумента, Вердикт) Экспорт
	
	Результат= Неопределено;
	
	ОписаниеДокумента= ЭДО_ОписаниеТипаДокумента(ТипДокумента);
	
	Если Вердикт = "Подписать" Тогда
		
		Результат= ОписаниеДокумента.ТипКонтентаПодписи;  // Torg12BuyerContent, AcceptanceCertificateBuyerContent, UtdBuyerContent, AcceptanceContent
		
	ИначеЕсли Вердикт = "ОтказатьВПодписи" Тогда
		
		Результат= ОписаниеДокумента.ТипКонтентаОтказаПодписи;  // RejectionContent, FormalizedRejectionContent
		
	ИначеЕсли Вердикт = "ЗапроситьУточнение" Тогда
		
		Результат= ОписаниеДокумента.ТипКонтентаЗапросаУточнения;  // CorrectionRequestContent
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Результат) Тогда
		ВызватьИсключение "Неизвестный тип ответа " + Вердикт + " по документу " + ТипДокумента;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает Массив действий в Диадоке, которые в данный момент можно совершить с ДокументДД
Функция ЭДО_ВариантыОтветныхДействийПоДокументу(ДокументДД) Экспорт
	
	// Проверить, если документ "требует подписи" - то добавить подписание и отказ
	// Если это ЭСФ всех видов - добавить запрос на уточнение
	// Если УПД - непонятно.  TODO проработать.
	
	Результат= Новый СписокЗначений;
	
	Если ЭДО_ВходящийДокументМожноПодписать(ДокументДД) Тогда
		Результат.Добавить( ЭДО_Перечисление_ВариантыОтветаПоДокументу().Подписать );
		Результат.Добавить( ЭДО_Перечисление_ВариантыОтветаПоДокументу().ОтказатьВПодписи );
	КонецЕсли;	
	
	ТипДокументаСтрокой = ЭДО_ПолучитьТипВходящегоДокумента(ДокументДД);
	Если ЭДО_Служебные_РазложитьСтрокуВМассивСлов("Invoice, InvoiceCorrection, UniversalTransferDocumentRevision").Найти(ТипДокументаСтрокой)<>Неопределено
		И (ЭДО_ПолучитьСтатусДокумента(ДокументДД) = "Документооборот завершен"
			или ЭДО_ПолучитьСтатусДокумента(ДокументДД) = "Требуется подпись") Тогда
		Результат.Добавить( ЭДО_Перечисление_ВариантыОтветаПоДокументу().ЗапроситьУточнение );
		
	ИначеЕсли ЭДО_ПолучитьТипВходящегоДокумента(ДокументДД) = "UniversalTransferDocument" Тогда
		Результат.Добавить( ЭДО_Перечисление_ВариантыОтветаПоДокументу().ЗапроситьУточнение );  // в каких случаях?
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭДО_ПолучитьТипВходящегоДокумента(ДокументДД) Экспорт
	
	Если ЭДО_Использовать1СЭДО() Тогда
		Возврат СокрЛП(Сред(ДокументДД.Описание, 1, 40));
	Иначе
		Возврат ДокументДД.ТипДокумента;
	КонецЕсли;
	
КонецФункции

Функция ЭДО_ПолучитьСтатусДокумента(ДокументДД) Экспорт
	
	Если ЭДО_Использовать1СЭДО() Тогда
		Возврат СокрЛП(ДокументДД.ДополнительнаяИнформация);
	Иначе
		Возврат ДокументДД.Статус;
	КонецЕсли;
	
КонецФункции

Функция ЭДО_ПолучитьСвязанныйДокумент1С(ДокументДД) Экспорт
	
	Если ЭДО_Использовать1СЭДО() Тогда
		Возврат ДокументДД.ВладелецФайла;
	Иначе
		Возврат ДокументДД.Документ;
	КонецЕсли;
	
КонецФункции

Функция ЭДО_ПолучитьХранилищеКонтента(ДокументДД) Экспорт
	
	Если ЭДО_Использовать1СЭДО() Тогда
		Возврат ДокументДД.ФайлХранилище.Получить().ХранилищеКонтента;
	Иначе
		Возврат ДокументДД.ХранилищеКонтента.Получить();
	КонецЕсли;
	
КонецФункции

// Подписать либо отказать в подписи можно только по тому документу, для которого требуеся ответная подпись
Функция ЭДО_ВходящийДокументМожноПодписать(ДокументДД) Экспорт
	
	Возврат (ЭДО_ПолучитьСтатусДокумента(ДокументДД) = "Требуется подпись");
	
КонецФункции

Функция СоздатьИСопоставитьДокументДД(ДокументДД, ПакетДД) Экспорт
	
	Пояснение = "Не создан входящий документ " + ДокументДД + " по причине:" + Символы.ПС;
	
	Если ЗначениеЗаполнено(ЭДО_ПолучитьСвязанныйДокумент1С(ДокументДД)) Тогда
		Возврат ЗарегистрироватьОшибкуФункции(ДокументДД, Пояснение + "Документ уже создан");
	КонецЕсли;
	
	ДвоичныеДаныеКонтента= ЭДО_ПолучитьХранилищеКонтента(ДокументДД);
	
	НачатьТранзакцию();
	
	Попытка
		
		Документ1СОбъект= ЭДО_ПодключаемыйМодуль_ОбработатьСобытие("ПолучитьЗаполненныйОбъектДокумента1С", Новый Структура("ДокументДД, ПакетДД, Контент", ДокументДД, ПакетДД, ДвоичныеДаныеКонтента));
	
		Если Документ1СОбъект = Неопределено Тогда
			ОтменитьТранзакцию();
			Возврат ЗарегистрироватьОшибкуФункции(ДокументДД, Пояснение + "Документ не создан в подключаемом модуле");
		КонецЕсли;
	
		Если Документ1СОбъект.Модифицированность() Тогда
			Документ1СОбъект.Записать();
		КонецЕсли;
			
		ЗаписатьСопоставлениеДокументаДД_С_Документом_1С(ДокументДД, Документ1СОбъект.Ссылка);
		
		ЗафиксироватьТранзакцию();
		Возврат НовыйРезультатФункции(ДокументДД);
		
	Исключение
		
		ОтменитьТранзакцию();
        Возврат ЗарегистрироватьОшибкуФункции(ДокументДД, Пояснение + ОписаниеОшибки());
		
	КонецПопытки;
	
КонецФункции

Функция НайтиИСопоставитьДокументДД(ДокументДД, ПакетДД) Экспорт
	
	Пояснение = "Не сопоставлен входящий документ " + ДокументДД + " по причине:" + Символы.ПС;
	
	Попытка
		
		Если ЗначениеЗаполнено(ЭДО_ПолучитьСвязанныйДокумент1С(ДокументДД)) Тогда
			Возврат ЗарегистрироватьОшибкуФункции(ДокументДД, Пояснение + "Документ уже сопоставлен");
		КонецЕсли;
		
		РезультатПоиска= ЭДО_ПодключаемыйМодуль_ОбработатьСобытие("НайтиСопоставлениеДокумента", Новый Структура("ДокументДД, ПакетДД", ДокументДД, ПакетДД));
		// Назад может вернуться Неопределено, Ссылка (на справочник или на документ) или Массив таких ссылок.
		
		Если ТипЗнч(РезультатПоиска) = Тип("Массив")
			И РезультатПоиска.Количество() = 1 Тогда
			РезультатПоиска = РезультатПоиска[0];  // Будем обрабатывать единственный элемент массива.
		КонецЕсли;
		
		Если РезультатПоиска = Неопределено Тогда
			
			Возврат ЗарегистрироватьОшибкуФункции(ДокументДД, Пояснение + "Не найдено документов для сопоставления");
			
		ИначеЕсли Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(РезультатПоиска))
			Или Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(РезультатПоиска)) Тогда  // Ссылка на справочник или документ
			
			ЗаписатьСопоставлениеДокументаДД_С_Документом_1С(ДокументДД, РезультатПоиска);
			Возврат НовыйРезультатФункции(ДокументДД);
			
		ИначеЕсли ТипЗнч(РезультатПоиска) = Тип("Массив") Тогда
			
			Если РезультатПоиска.Количество() > 1 Тогда
				
				// В этом случае дадим пользователю выбор - но уже в какой-нибудь интерактивной форме, когда будет ручное сопоставление
				Возврат ЗарегистрироватьОшибкуФункции(ДокументДД, Пояснение + "Найдено более одного документа для сопоставления");
				
			Иначе
				
				Возврат ЗарегистрироватьОшибкуФункции(ДокументДД, Пояснение + "Не найдено документов для сопоставления");
				
			КонецЕсли;
			
		Иначе
			
			Возврат ЗарегистрироватьОшибкуФункции(ДокументДД, Пояснение + "Неверный тип возврата в событии подключаемого модуля ""НайтиСопоставлениеДокумента""");
			
		КонецЕсли;
		
	Исключение
		
		Возврат ЗарегистрироватьОшибкуФункции(ДокументДД, Пояснение + ОписаниеОшибки());
		
	КонецПопытки;
	
КонецФункции

Функция ПолучитьВердиктИСодержимоеОтветаПоДокументу(ДокументДД)

	Результат = Новый Структура;
	
	Если ЭДО_Использовать1СЭДО() Тогда
		
		Результат.Вставить("Вердикт",	ЭДО_СправочникМенеджер_ЗначениеДопРеквизита_1СЭДО(ДокументДД, "ДействиеВДД"));
		СохраненныйОтвет = ЭДО_СправочникМенеджер_ЗначениеДопРеквизита_1СЭДО(ДокументДД, "ОтветХранилище");
		
	Иначе	
		
		Результат.Вставить("Вердикт",	ДокументДД.ТребуемоеДействиеВДД);
		СохраненныйОтвет = ДокументДД.ХранилищеОтвета;
		
	КонецЕсли;
	
	Если СохраненныйОтвет<>Неопределено Тогда
		СохраненнаяСтруктура = СохраненныйОтвет.Получить();
	КонецЕсли;
	
	Если ТипЗнч(СохраненнаяСтруктура) = Тип("Структура") Тогда
		Результат.Вставить("КонтентОтвета", СохраненнаяСтруктура);
	Иначе
		// дополнительная проверка на случай, если что-то пошло не так в ПМ.
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьИдентификаторыДокумента(ДокументДД, ПакетДД)
	
	Результат = Новый Структура;
	
	Если ЭДО_Использовать1СЭДО() Тогда
		Результат.Вставить("boxId",			ПакетДД.ПрофильНастроекЭДО.ИдентификаторОрганизации);
		Результат.Вставить("documentId",	ДокументДД.УникальныйИД);
		Результат.Вставить("letterId",		ДокументДД.УникальныйИДВнешний);
	Иначе	
		Результат.Вставить("boxId",			ЭДО_Служебные_АдресЯщикаКонтрагента(ДокументДД.BoxId));
		Результат.Вставить("documentId",	ДокументДД.DocumentId);
		Результат.Вставить("letterId",		ДокументДД.LetterId);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЭДО_ПолучитьСохраненныеДанныеДляОтправкиОтвета(ДокументДД, ПакетДД) Экспорт
	// Для отправки ответа в том случае, когда он уже подготовлен и сохранен в базу.
	
	ДанныеОтправки = Новый Структура;
	
	СохраненныеДанные = ПолучитьВердиктИСодержимоеОтветаПоДокументу(ДокументДД);
	
	Если Не ЗначениеЗаполнено(СохраненныеДанные) Тогда
		// Данные не сохранялись в базу
		Возврат Неопределено;
	КонецЕсли;
	
	ДанныеОтправки.Вставить("ДокументДД",		ДокументДД);
	ДанныеОтправки.Вставить("ПакетДД",			ПакетДД);
	ДанныеОтправки.Вставить("СтруктураОтвета",	СохраненныеДанные.КонтентОтвета);
	ДанныеОтправки.Вставить("Вердикт",			СохраненныеДанные.Вердикт);
	ДанныеОтправки.Вставить("Идентификаторы",	ПолучитьИдентификаторыДокумента(ДокументДД, ПакетДД));
	
	// как вариант - пока писать некий общий статус вроде "выполните обмен"
	// Но стоит ли это делать в случае, если операция не завершилась или по какой-то причине откатилась?
	Если СохраненныеДанные.Вердикт = ЭДО_Перечисление_ВариантыОтветаПоДокументу().Подписать Тогда
		ДанныеОтправки.Вставить("ВидОтвета",	"AcceptDocument");
		ДанныеОтправки.Вставить("НовыйСтатус",	"Подписан");
	ИначеЕсли СохраненныеДанные.Вердикт = ЭДО_Перечисление_ВариантыОтветаПоДокументу().ОтказатьВПодписи Тогда
		ДанныеОтправки.Вставить("ВидОтвета",	"RejectDocument");
		ДанныеОтправки.Вставить("НовыйСтатус",	"В подписи отказано");
	ИначеЕсли СохраненныеДанные.Вердикт = ЭДО_Перечисление_ВариантыОтветаПоДокументу().ЗапроситьУточнение Тогда
		ДанныеОтправки.Вставить("ВидОтвета",	"CorrectionRequest");
		ДанныеОтправки.Вставить("НовыйСтатус",	"Ожидается уточнение");
	КонецЕсли;
	
	Возврат ДанныеОтправки;
	
КонецФункции

Процедура ЭДО_СохранитьОтветПоДокументу(ДокументДД, Вердикт, Ответ) Экспорт
	
	ДокументОбъект = ДокументДД.ПолучитьОбъект();
	
	ДокументОбъект.ТребуемоеДействиеВДД	= Вердикт; // а что будет после его выполнения?
	ДокументОбъект.ХранилищеОтвета		= Новый ХранилищеЗначения(Ответ);
	
	Если ЭДО_Использовать1СЭДО() Тогда
		
		ЭДО_СправочникМенеджер_УстановитьЗначениеДопРеквизита_1СЭДО(ДокументОбъект, "ДействиеВДД",		Вердикт);
		ЭДО_СправочникМенеджер_УстановитьЗначениеДопРеквизита_1СЭДО(ДокументОбъект, "ОтветХранилище",	Новый ХранилищеЗначения(Ответ));
		
	Иначе
		
		ДокументОбъект.ТребуемоеДействиеВДД	= Вердикт; // а что будет после его выполнения?
		ДокументОбъект.ХранилищеОтвета		= Новый ХранилищеЗначения(Ответ);
		
	КонецЕсли;
	
	ДокументОбъект.Записать();
	
КонецПроцедуры

// Интерфейс для результата анализа входящего документа
Функция ЭДО_НовыйРезультатАнализаВходящегоДокумента() Экспорт
	
	Возврат Новый Структура(
	"Ошибки, 
	//  Массив строк с описаниями ошибок
	
	|ДокументДляСопоставления,
	//  Ссылка на документ/справочник 1С, сооответствующий данному документу
	
	|ДействиеВ1С,
	//  Действие, которое необходимо выполнить с данным документом в 1С (Строка). Например, "СоздатьСчетФактуру", "ПометитьНаУдаление" и т.д.
	
	|ДействиеВДД,
	//  Действие, которое необходимо выполнить с данным документом в ядре сервиса (Строка). Допустимые варианты - "Подписать", "ОтказатьВПодписи", "ЗапроситьУточнение"
	
	|ТипОшибкиВалидации,
	//  Произвольный текст, отображаемый в списке. Просто для классификации ошибок
	
	|КонтентОтвета"
	//  ОбъектXDTO, соответствующий титулу покупателя (для формализованных документов) или отказу в подписи. Именно такой ответ будет отправлен в ядро, если заполнено поле "ДействиеВДД".
	
	);
	
КонецФункции

Процедура СохранитьРезультатАнализа(ДокументДД, РезультатАнализа) Экспорт

	ОбъектЭлДокумента = ДокументДД.ПолучитьОбъект();
	
	ОбъектЭлДокумента.АнализПроведен		= Истина;
	
	Если ТипЗнч(РезультатАнализа.Ошибки) = Тип("Массив") Тогда
		ОбъектЭлДокумента.ТекстОшибки	= ЭДО_Служебные_МассивВСтроку(РезультатАнализа.Ошибки);
		
	ИначеЕсли ТипЗнч(РезультатАнализа.Ошибки) = Тип("Строка") Тогда
		ОбъектЭлДокумента.ТекстОшибки	= РезультатАнализа.Ошибки;
		
	Иначе
		ОбъектЭлДокумента.ТекстОшибки	= "";
		
	КонецЕсли;
	
	ОбъектЭлДокумента.ТребуемоеДействиеВ1С	= РезультатАнализа.ДействиеВ1С;
	ОбъектЭлДокумента.ТребуемоеДействиеВДД	= РезультатАнализа.ДействиеВДД;
	Если РезультатАнализа.Свойство("КонтентОтвета") Тогда
		мКонтентОтвета = ОбъектXDTOВСтруктуру(РезультатАнализа.КонтентОтвета);
		ОбъектЭлДокумента.ХранилищеОтвета		= Новый ХранилищеЗначения(мКонтентОтвета);
	КонецЕсли;
	
	// МассивОшибок не будем хранить Массивом - оставим Строкой с переносами
	ОбъектЭлДокумента.Документ = РезультатАнализа.ДокументДляСопоставления;
	
	ОбъектЭлДокумента.Записать();
	
КонецПроцедуры

Процедура ЭДО_ВыполнитьТребуемоеДействиеПоВходящемуДокументу(ДокументДД, ПакетДД) Экспорт

	Попытка
		Результат = ЭДО_ПодключаемыйМодуль_ОбработатьСобытие("ВыполнитьТребуемоеДействие", 
			Новый Структура("ДокументДД, ПакетДД", ДокументДД, ПакетДД)
			);
			
	Исключение
		ЭДО_Служебные_СообщитьОбОшибке("Не удалось обработать требуемое действие над документом с кодом " + ДокументДД.Код, ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

Функция ЭДО_ПровестиАнализВходящегоДокумента(ДокументДД, ПакетДД) Экспорт
	
	Попытка
		
		// первым делом сбросим результат предыдущего анализа, если он проводился
		Если Не ЭДО_Использовать1СЭДО() Тогда
			
			Если ДокументДД.АнализПроведен Тогда
				СброситьРезультатыАнализаДокумента(ДокументДД);
			КонецЕсли;
			
		КонецЕсли;
		
		Результат = ЭДО_ПодключаемыйМодуль_ОбработатьСобытие("ПровестиАнализДокумента", 
			Новый Структура("ДокументДД, ПакетДД, РезультатАнализа", ДокументДД, ПакетДД, ЭДО_НовыйРезультатАнализаВходящегоДокумента())
			);
		
		Если Результат<>Неопределено Тогда
			СохранитьРезультатАнализа(ДокументДД, Результат);
		КонецЕсли;
		
		Возврат Результат;
		
	Исключение
		
		ЭДО_Служебные_СообщитьОбОшибке("Не удалось провести анализ документа с кодом " + ДокументДД.Код, ОписаниеОшибки());	
		Возврат Неопределено;
		
	КонецПопытки;	
	
КонецФункции

// Приводит документ в "первозданный" вид до начала анализа, сбросив все предыдущие результаты.
Процедура СброситьРезультатыАнализаДокумента(ДокументДД)
	
	ДокументДДОбъект = ДокументДД.ПолучитьОбъект();
	
	ДокументДДОбъект.ТребуемоеДействиеВ1С	= "";
	ДокументДДОбъект.ТребуемоеДействиеВДД	= "";
	ДокументДДОбъект.АнализПроведен			= Ложь;
	ДокументДДОбъект.ХранилищеОтвета		= Неопределено;
	ДокументДДОбъект.ТекстОшибки			= "";
	
	ДокументДДОбъект.ОбменДанными.Загрузка = Истина;
	ДокументДДОбъект.Записать();
	
КонецПроцедуры

Процедура ЭДО_ПровестиАнализВходящегоПакета(ПакетДД) Экспорт
	
	Если ЭДО_Использовать1СЭДО() Тогда
		ВызватьИсключение "Не реализовано";
		// данная функция заблокирована в интерфейсе для режима 1С-ЭДО, но на всякий случай подстрахуемся
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Пакет", ПакетДД);
	
	Запрос.Текст =
	"ВЫБРАТЬ
	|	Диадок_Документы.Ссылка,
	|	Диадок_Документы.ТипДокумента,
	|	Диадок_Документы.ДатаДокумента,
	|	Диадок_Документы.НомерДокумента
	|ИЗ
	|	Справочник.Диадок_Документы КАК Диадок_Документы
	|ГДЕ
	|	Диадок_Документы.Пакет = &Пакет
	|
	|УПОРЯДОЧИТЬ ПО
	|	Диадок_Документы.Код";
	
	ВыполненоУспешно = Истина;
	ДокументыПакета = Запрос.Выполнить().Выгрузить();
	
	Для Каждого Строка Из ДокументыПакета Цикл
		
		РезультатАнализа = ЭДО_ПровестиАнализВходящегоДокумента(Строка.Ссылка, ПакетДД);
		ВыполненоУспешно = ВыполненоУспешно И ЗначениеЗаполнено(РезультатАнализа);
		// также можно результаты анализа упаковывать в какую-нибудь ТЗ. Например, прямо в эту.
		
	КонецЦикла;
	
	Если ВыполненоУспешно Тогда
		
		Попытка
			
			// вот здесь можно проверять комплектность и т.д.
			ЭДО_ПодключаемыйМодуль_ОбработатьСобытие("ПослеАнализаПакета",
					Новый Структура("Пакет", ПакетДД));
			
			ПакетОбъект = ПакетДД.ПолучитьОбъект();
			ПакетОбъект.АнализПроведен = Истина;
			ПакетОбъект.Записать();
			
		Исключение
			
			ЭДО_Служебные_СообщитьОбОшибке("Не удалось провести анализ пакета с кодом " + ПакетДД.Код, ОписаниеОшибки());
			
		КонецПопытки;
		
	КонецЕсли;
	
КонецПроцедуры

Функция ЭДО_МассивОшибокВалидацииДокумента(ДокументДД) Экспорт
	
	ОшибкиХранилище = ЭДО_СправочникМенеджер_ЗначениеДопРеквизита(ДокументДД, "ОшибкиПроверкиХранилище");
	Если ТипЗнч(ОшибкиХранилище) = Тип("ХранилищеЗначения") Тогда
		Возврат ОшибкиХранилище.Получить();
	Иначе
		Возврат Новый Массив;	
	КонецЕсли;
	
КонецФункции

Процедура ЭДО_ПометитьВходящийДокументКакЗавершенный(ДокументДД) Экспорт
	
	Если ЭДО_Использовать1СЭДО() Тогда
		//???
	Иначе
		
		ДокументОбъект = ДокументДД.ПолучитьОбъект();
		
		ДокументОбъект.ТребуемоеДействиеВ1С	= "";
		ДокументОбъект.ТребуемоеДействиеВДД	= "";
		ДокументОбъект.АнализПроведен		= Истина;
		
		ДокументОбъект.Записать();
		
	КонецЕсли;
	
КонецПроцедуры



//}		ОБРАБОТКА ВХОДЯЩИХ - ДЕЙСТВИЯ С ДОКУМЕНТАМИ


//**************************************
//{		ОБРАБОТКА ОШИБОК

Процедура ОбработатьРезультатФункции(РезультатФункции) Экспорт
	
	// Некоторые функции предполагается использовать в массовых действиях (например, создание документов в 1С по данным из электронных документов).
	// Ошибки в данных функциях должны всегда перехватываться, но при этом должна оставаться возможность просмотреть общий список ошибок по неуспешным действиям.
	// Результаты выполнения данных функций (успешные или нет) и будем помещать в НовыйРезкльтатФункции. При появлении ошибки будем записывать ее содержание в ОписаниеОшибки
	//   и интерпретировать потом на клиенте (либо писать в лог).
	
	Если ЗначениеЗаполнено(РезультатФункции.ОписаниеОшибки) Тогда
		Сообщить(РезультатФункции.ОписаниеОшибки + Символы.ПС);
	КонецЕсли;
	
КонецПроцедуры
	
Функция ЗарегистрироватьОшибкуФункции(Объект=Неопределено, Ошибка)
	
	НовОшибка = НовыйРезультатФункции(Объект);
	НовОшибка.ОписаниеОшибки = Ошибка;
	
	Возврат НовОшибка;
	
КонецФункции

Функция НовыйРезультатФункции(ОсновнойОбъект=Неопределено)
	
	Возврат Новый Структура("ОписаниеОшибки, ОсновнойОбъект", "", ОсновнойОбъект)
	
КонецФункции

//}		ОБРАБОТКА ОШИБОК


//**************************************
//{		РЕДАКТИРОВАНИЕ ОБЪЕКТОВ XDTO НА ФОРМАХ В ВИДЕ ДЕРЕВА ЗНАЧЕНИЙ
	
// ДеревоЗначений -> ОбъектXDTO, рекурсивная
Функция ОбъектXDTOИзДереваЗначений(ИмяТипаXDTO, ДеревоИлиСтрока) Экспорт
	
	Результат= ДД_Компонента_ПолучитьПустойКонтент(ИмяТипаXDTO, Ложь);
	
	Для Каждого СтрокаДерева Из ДеревоИлиСтрока.Строки Цикл
		
		Свойство= Результат.Свойства().Получить(СтрокаДерева.ИмяРеквизита);
		Если Свойство=Неопределено Тогда
			Продолжить;  // неизвестное свойство
		КонецЕсли;
		
		Если ТипЗнч(Свойство.Тип) = Тип("ТипОбъектаXDTO") Тогда
			// Добавим вложенные элементы. TODO проработать массивы.
			
			Результат[Свойство.Имя] = ОбъектXDTOИзДереваЗначений(Свойство.Тип.Имя, СтрокаДерева);
			
		Иначе
			
			// Добавим конечные элементы
			Если СтрокаДерева.Значение<>Неопределено Тогда
				
				Если ЗначениеЗаполнено(СтрокаДерева.Значение) Тогда
					Результат[Свойство.Имя] = СтрокаДерева.Значение;
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;	
	
	Возврат Результат;
	
КонецФункции

// ОбъектXDTO -> ДеревоЗначений, рекурсивная
Процедура ЗаполнитьДеревоЗначенийПоОбъектуXDTO(ДеревоИлиСтрока, ОбъектXDTO)
	
	Для Каждого Свойство Из ОбъектXDTO.Свойства() Цикл
		
		Если ЭтоСкрытоеСвойство(Свойство.Имя) Тогда
			Продолжить;
		КонецЕсли;
		
		НовСтрокаДерева= ДеревоИлиСтрока.Строки.Добавить();
		
		НовСтрокаДерева.ИмяРеквизита= Свойство.Имя;
		НовСтрокаДерева.ИмяРеквизитаРусское= ПеревестиИмяРеквизитаВКонтентеОтвета(Свойство.Имя);
		
		Если ТипЗнч(Свойство.Тип) = Тип("ТипОбъектаXDTO") Тогда
			
			Если ТипЗнч(ОбъектXDTO[Свойство.Имя]) = Тип("СписокXDTO") Тогда
				НовСтрокаДерева.ТипЗначения = Новый ОписаниеТипов("Массив");
				Для Каждого ЭлементСписка Из ОбъектXDTO[Свойство.Имя] Цикл
					ЗаполнитьДеревоЗначенийПоОбъектуXDTO(НовСтрокаДерева, ЭлементСписка);
				КонецЦикла;
			Иначе	
				ЗаполнитьДеревоЗначенийПоОбъектуXDTO(НовСтрокаДерева, ОбъектXDTO[Свойство.Имя]);
			КонецЕсли;
			
		Иначе
			// Добавим конечное значение
			ИмяТипа= ТипЗначения1СПоТипуXDTO(Свойство.Тип);
			НовСтрокаДерева.ТипЗначения= Новый ОписаниеТипов(ИмяТипа);
			
			Если ИмяТипа="Строка" Тогда
				НовСтрокаДерева.Значение= "";
			ИначеЕсли ИмяТипа="Дата" Тогда
				НовСтрокаДерева.Значение= Дата("00010101");
			ИначеЕсли ИмяТипа="Булево" Тогда
				НовСтрокаДерева.Значение= Ложь;
			ИначеЕсли ИмяТипа="Число" Тогда
				НовСтрокаДерева.Значение= 0;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Русскоязычное название для элемента контента ответной подписи.
Функция ПеревестиИмяРеквизитаВКонтентеОтвета(ИмяРеквизита)
	
	Если ИмяРеквизита= "Complaints" Тогда
		Возврат "Претензии";

	ИначеЕсли ИмяРеквизита= "FirstName" Тогда
		Возврат "Имя";
		
	ИначеЕсли ИмяРеквизита= "Surname" Тогда
		Возврат "Фамилия";
		
	ИначеЕсли ИмяРеквизита= "Patronymic" Тогда
		Возврат "Отчество";
		
	ИначеЕсли ИмяРеквизита= "JobTitle" Тогда
		Возврат "Должность";
		
	ИначеЕсли ИмяРеквизита= "SignatureDate" Тогда
		Возврат "Дата подписи";
		
	ИначеЕсли ИмяРеквизита= "ShipmentReceiptDate" Тогда
		Возврат "Дата получения";
		
	ИначеЕсли ИмяРеквизита= "IsSoleProprietor" Тогда
		Возврат "Индивидуальный предприниматель";

	ИначеЕсли ИмяРеквизита= "Inn" Тогда
		Возврат "ИНН";
		
	ИначеЕсли ИмяРеквизита= "Attorney" Тогда
		Возврат "Доверенность";
		
	ИначеЕсли ИмяРеквизита= "Date" Тогда
		Возврат "Дата";
		
	ИначеЕсли ИмяРеквизита= "Number" Тогда
		Возврат "Номер";

	ИначеЕсли ИмяРеквизита= "Recipient" Тогда
		Возврат "Получил";
		
	ИначеЕсли ИмяРеквизита= "Issuer" Тогда
		Возврат "Выдал";

	ИначеЕсли ИмяРеквизита= "Official" Тогда
		Возврат "Ответственный";

	ИначеЕсли ИмяРеквизита= "Receiver" Тогда
		Возврат "Лицо, получившее груз";

	ИначеЕсли ИмяРеквизита= "Accepter" Тогда
		Возврат "Лицо, принявшее груз";

	ИначеЕсли ИмяРеквизита= "Signer" Тогда
		Возврат "Подписант";

	ИначеЕсли ИмяРеквизита= "AdditionalInfo" Тогда
		Возврат "Дополнительные сведения";
		
	ИначеЕсли ИмяРеквизита= "SoleProprietorRegistrationCertificate" Тогда
		Возврат "Свидетельство о регистрации ИП";
		
	ИначеЕсли ИмяРеквизита= "IssuerAdditionalInfo" Тогда
		Возврат "Дополнительные сведения о выдавшем";
		
	ИначеЕсли ИмяРеквизита= "IssuerOrganizationName" Тогда
		Возврат "Организация выдавшего доверенность";
		
	ИначеЕсли ИмяРеквизита= "RecipientAdditionalInfo" Тогда
		Возврат "Дополнительные сведения о получателе";
		
	ИначеЕсли ИмяРеквизита= "Comment" Тогда
		Возврат "Комментарий";
		
	// УПД	
	ИначеЕсли ИмяРеквизита= "Creator" Тогда
		Возврат "Составитель файла (покупатель)";

	ИначеЕсли ИмяРеквизита= "CreatorBase" Тогда
		Возврат "Основания составителя";
		
	ИначеЕсли ИмяРеквизита= "OperationCode" Тогда
		Возврат "Код операции";

	ИначеЕсли ИмяРеквизита= "OperationContent" Тогда
		Возврат "Содержание операции";

	ИначеЕсли ИмяРеквизита= "AcceptanceDate" Тогда
		Возврат "Дата приемки";

	ИначеЕсли ИмяРеквизита= "Employee" Тогда
		Возврат "Работник организации";
		
	ИначеЕсли ИмяРеквизита= "OtherIssuer" Тогда
		Возврат "Иное лицо";
		
	ИначеЕсли ИмяРеквизита= "AdditionalInfoId" Тогда
		Возврат "Информационное поле";

	ИначеЕсли ИмяРеквизита= "EmployeePosition" Тогда
		Возврат "Должность работника";

	ИначеЕсли ИмяРеквизита= "EmployeeInfo" Тогда
		Возврат "Иные сведения";

	ИначеЕсли ИмяРеквизита= "EmployeeBase" Тогда
		Возврат "Основание полномочий";

	ИначеЕсли ИмяРеквизита= "OrganizationName" Тогда
		Возврат "Наименование организации";
		
	ИначеЕсли ИмяРеквизита= "OrganizationBase" Тогда
		Возврат "Основание для доверенности";
		
	ИначеЕсли ИмяРеквизита= "Signers" Тогда
		Возврат "Подписанты";
		
	Иначе
		Возврат ИмяРеквизита;  // не переводим
		
	КонецЕсли;
	
КонецФункции

// Определяет, надо ли показывать данное свойство на форме в дереве контента.
Функция ЭтоСкрытоеСвойство(ИмяСвойства)
	
	Возврат (
		ИмяСвойства = "Signer"
		Или ИмяСвойства = "_Type_ReadOnly"
		);
	
КонецФункции

// Преобразует некоторые примитивные типы значений XML в строковые названия типов 1С для возможности отображения в элементах управления
Функция ТипЗначения1СПоТипуXDTO(ТипXDTO)
	
	Результат= Неопределено;
	
	ИмяТипа= ТипXDTO.Имя;
	
	Если ТипXDTO.URIПространстваИмен<>"http://www.w3.org/2001/XMLSchema" Тогда
		ИмяТипа= ТипXDTO.БазовыйТип.Имя;
	КонецЕсли;
		
	Если ИмяТипа = "date"
		или ИмяТипа = "dateTime" Тогда
		
		Возврат "Дата";
		
	ИначеЕсли ИмяТипа = "string" Тогда
		
		Возврат "Строка";
		
	ИначеЕсли ИмяТипа = "boolean" Тогда
		
		Возврат "Булево";

	ИначеЕсли ИмяТипа = "integer"
		Или ИмяТипа = "int"
		Или ИмяТипа = "double"
		Или ИмяТипа = "decimal" Тогда
		
		Возврат "Число";
		
	Иначе
		Возврат Неопределено;	
	КонецЕсли;
		
	Возврат Результат;
	
КонецФункции

Функция ЭДО_ДеревоЗначенийВСтруктуру(ДеревоИлиСтрока) Экспорт
	
	// Ограничение: на первом уровне дерева не может быть массива
	Если ТипЗнч(ДеревоИлиСтрока) = Тип("СтрокаДереваЗначений")
		И ДеревоИлиСтрока.ТипЗначения = Новый ОписаниеТипов("Массив") Тогда  // не очень оптимально
		
		Результат = Новый Массив;
		Для Каждого СтрокаДерева Из ДеревоИлиСтрока.Строки Цикл  // нужна еще одна колонка - "массив"
			Результат.Добавить(ЭДО_ДеревоЗначенийВСтруктуру(СтрокаДерева));
		КонецЦикла;
		
	Иначе
		
		Результат = Новый Структура;
		Для Каждого СтрокаДерева Из ДеревоИлиСтрока.Строки Цикл  // нужна еще одна колонка - "массив"
			
			Если СтрокаДерева.ТипЗначения = Новый ОписаниеТипов("Массив") Тогда  // не очень оптимально
				// пока оставлю
			ИначеЕсли Не ЗначениеЗаполнено(СтрокаДерева.ТипЗначения) Тогда	
				Результат.Вставить(СтрокаДерева.ИмяРеквизита, ЭДО_ДеревоЗначенийВСтруктуру(СтрокаДерева));
			Иначе
				Если ЗначениеЗаполнено(СтрокаДерева.Значение) Тогда
					Результат.Вставить(СтрокаДерева.ИмяРеквизита, СтрокаДерева.Значение);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Процедура ЭДО_ЗаполнитьДеревоЗначенийПоСтруктуре(СтруктураИлиМассив, ДеревоИлиСтрока) Экспорт
	
	Для Каждого ЭлементСтруктуры Из СтруктураИлиМассив Цикл
		
		Если ТипЗнч(ЭлементСтруктуры) = Тип("Массив") Тогда
			// пока без массивов
		Иначе
			
			Для Каждого СтрокаДерева Из ДеревоИлиСтрока.Строки Цикл
				
				Если СтрокаДерева.ИмяРеквизита = ЭлементСтруктуры.Ключ Тогда
					// теперь типы значений
					Если ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Структура") Тогда
						// это вложенный
						ЭДО_ЗаполнитьДеревоЗначенийПоСтруктуре(ЭлементСтруктуры.Значение, СтрокаДерева);
					ИначеЕсли ТипЗнч(ЭлементСтруктуры.Значение) = Тип("Массив") Тогда	
						// пока оставлю
					ИначеЕсли ЭлементСтруктуры.Значение<>Неопределено Тогда	
						СтрокаДерева.Значение = ЭлементСтруктуры.Значение;
					КонецЕсли;
					
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

// Исключительно для отображения на формах
Функция ЭДО_КонтентОтветаВДеревоЗначений(КонтентОтвета) Экспорт
	
	Результат = Новый ДеревоЗначений;
	ЭДО_Служебные_ДобавитьКолонкиВТаблицуЗначений(Результат, "ИмяРеквизитаРусское, ИмяРеквизита, ТипЗначения, Значение");
	ЗаполнитьДеревоЗначенийПоОбъектуXDTO(Результат, КонтентОтвета);
	
	Возврат Результат;
	
КонецФункции

// Для отрисовки в интерфейсе - тоже вызывается из форм.
Функция ЭДО_ПолучитьПустойКонтентОтвета(ТипДокумента, Вердикт) Экспорт
	
	ТипКонтентаОтвета= ДД_Компонента_ИмяКонтентаОтветаДляТипаДокумента(ТипДокумента, Вердикт);
	КонтентОтвета= ДД_Компонента_ПолучитьПустойКонтент(ТипКонтентаОтвета, Истина);
		
	Возврат КонтентОтвета;
	
КонецФункции

//}		РЕДАКТИРОВАНИЕ ОБЪЕКТОВ XDTO НА ФОРМАХ В ВИДЕ ДЕРЕВА ЗНАЧЕНИЙ


//**************************************
//{		КАРТОЧКА ВХОДЯЩЕГО ДОКУМЕНТА

Процедура ЭДО_ЗаполнитьРеквизитыФормыВходящегоДокумента(Форма, ДокументДД, ПакетДД = Неопределено) Экспорт
	
	Если ЭДО_Использовать1СЭДО() Тогда		
		ЭДО_ЗаполнитьРеквизитыФормыВходящегоДокумента_1СЭДО(Форма, ДокументДД, ПакетДД);
		Возврат;
	КонецЕсли;
	
	Форма.Номер=		ДокументДД.НомерДокумента;
	Форма.Дата=			ДокументДД.ДатаДокумента;
	Форма.Тип=			ДокументДД.ТипДокумента;
	Форма.Сумма=		ДокументДД.СуммаДокумента;
	
	Форма.Контрагент=	ДокументДД.КонтрагентДиадок.СвязанныйСправочник1;
	Форма.Организация=	ДокументДД.ОрганизацияДиадок.СвязанныйСправочник1;

	Форма.ДокументВ1С=	ДокументДД.Документ;
	Форма.Статус=		ДокументДД.Статус;
	
КонецПроцедуры

Процедура ЭДО_ЗаполнитьРеквизитыФормыВходящегоДокумента_1СЭДО(Форма, ДокументДД, ПакетДД) Экспорт
	
	ДатаДокументаСтрокой = СокрЛП(Сред(ДокументДД.Описание, 61, 15));
	Форма.Дата	= ?(ДатаДокументаСтрокой = "", ДокументДД.ДатаСоздания, Дата(ДатаДокументаСтрокой));
	
	Форма.Номер	= СокрЛП(Сред(ДокументДД.Описание, 76, 50));	
	Форма.Тип	= СокрЛП(Сред(ДокументДД.Описание, 1, 40));
	Форма.Сумма	= СокрЛП(Сред(ДокументДД.Описание, 41, 20));
		
	Форма.Контрагент  =	ПакетДД.НастройкаЭДО.Контрагент;
	Форма.Организация =	ПакетДД.ПрофильНастроекЭДО.Организация;
	
	Форма.ДокументВ1С =	ДокументДД.ВладелецФайла;
	Форма.Статус      = ДокументДД.ДополнительнаяИнформация;
	
КонецПроцедуры

Процедура ЭДО_УстановитьСтатусДокумента(ДокументДД, Статус) Экспорт
	
	ОбъектДокумента= ДокументДД.ПолучитьОбъект();
	
	Если ЭДО_Использовать1СЭДО() Тогда
		ОбъектДокумента.ОбменДанными.Загрузка = Истина;
		ОбъектДокумента.ДополнительнаяИнформация = Статус;
	Иначе
		ОбъектДокумента.Статус = Статус;
		ОбъектДокумента.ТребуемоеДействиеВДД = "";  // после отправки ответа считаем, что требуемое действие выполнено.
	КонецЕсли;
	
	ОбъектДокумента.Записать();
	
	ЭДО_ПодключаемыйМодуль_ОбработатьСобытие("ПослеУстановкиСтатусаДокумента", Новый Структура("ДокументДД, Статус", ДокументДД, Статус));
	
КонецПроцедуры

//}		КАРТОЧКА ВХОДЯЩЕГО ДОКУМЕНТА


//{		ОБНОВЛЕНИЕ МОДУЛЯ

Функция ЭДО_ТребуемаяВерсияAPIПодключаемогоМодуля()
	
	Возврат 1;
	
	// До релиза 1.0.0 API основного модуля не версионировался.
	// Версия API 1 будет использоваться с релиза "1.0.0" основного модуля.
	// При обновлениях, потенциально ломающих совместимость со старыми подключаемыми модулями,
	//   необходимо увеличивать версию API, чтобы предупредить пользователей.
	// Будет инструкция в вебе по обновлению ПМ (список рекомендованных изменений).
	
КонецФункции

Функция ЭДО_Модуль_ПроверитьСовместимостьВерсииAPIПодключаемогоМодуля() Экспорт
	
	Результат = Новый Структура;
	
	ВерсияAPIПодключаемогоМодуля = 0;
	
	Попытка
		ПМ = ЭДО_ПодключаемыйМодуль();
		ВерсияAPIПодключаемогоМодуля = ПМ.ЭДО_ВерсияAPIПодключаемогоМодуля();
	Исключение
	КонецПопытки;
	
	Результат.Вставить("ВерсияAPIПодключаемогоМодуля",	ВерсияAPIПодключаемогоМодуля);
	Результат.Вставить("ВерсияAPIОсновногоМодуля",		ЭДО_ТребуемаяВерсияAPIПодключаемогоМодуля());
	Результат.Вставить("ВерсииСовместимы",				(ЭДО_ТребуемаяВерсияAPIПодключаемогоМодуля() = ВерсияAPIПодключаемогоМодуля));
	
	Если ПМ = Неопределено Тогда
		Результат.Вставить("ВерсииСовместимы",				Истина);  // не проверяем, если ПМ не подключем
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

// Возвращает Истина, если сохраненная в базе версия модуля не соответствует текущей.
// Функция используется при старте модуля для открытия окна с описанием обновлений
Функция ЭДО_Модуль_ВерсияИзменена() Экспорт
	
	Если Не ЭДО_Использовать1СЭДО() И Не ЭДО_ПодсистемаДиадок_Установлена() Тогда
		Возврат Ложь;  // это первый запуск модуля
	КонецЕсли;
	
	ПредыдущаяВерсияМодуля = ЭДО_Модуль_ОбщиеНастройки().СохраненнаяВерсияМодуля;
	
	Если Не ЗначениеЗаполнено(ПредыдущаяВерсияМодуля) Тогда
		Возврат Истина; // точно надо обновлять
	КонецЕсли;
	
	ТекущаяВерсияМодуля = ЭДО_НомерРелиза();
	Если ЭДО_Служебные_СравнитьВерсии(ТекущаяВерсияМодуля, ПредыдущаяВерсияМодуля) <> "Равны" Тогда
		// минорная версия при сравнении не учитывается, 
		// т.е. обновления с 1.0.0 на 1.0.5, например, обновлениями не считаются
		// предполагаем, что минорные версии - это только исправления критичных ошибок.
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

// Смотрит в общие настройки - какая версия основного модуля была сохранена в прошлый раз 
//   и проверяет, надо ли обновлять.
Функция ЭДО_Модуль_НеобходимоОбновлениеСохраненныхДанных() Экспорт
	
	Если НЕ ЭДО_Использовать1СЭДО() И ЭДО_Модуль_ВерсияИзменена() Тогда
		
		// При сравнении не учитываем минорную версию - предполагается, что минорные не трогают метаданные и способ хранения
		
		ПредыдущаяВерсияМодуля = ЭДО_Модуль_ОбщиеНастройки().СохраненнаяВерсияМодуля;
		
		Если Не ЗначениеЗаполнено(ПредыдущаяВерсияМодуля)
			И НЕ ЭтоПервыйЗапускМодуля() Тогда
			// надо обновить справочники
			Возврат Истина;
			
		//ИначеЕсли ЭДО_Служебные_СравнитьВерсии("2.0.1", ПредыдущаяВерсияМодуля) = "Равны" Тогда
		//	// например, заполнить подразделение в документах
			
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат Ложь;  // по умолчанию
	
КонецФункции

// Проверяет - есть ли в базе хоть один контрагент
// Если нет, считаем, что модуль запускается впервые
Функция ЭтоПервыйЗапускМодуля()
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	1
	|ИЗ
	|	Справочник.Диадок_ЮрФизЛица КАК Диадок_ЮрФизЛица"
	);
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции

// Возвращает строку: "Равны" / "ПерваяБольше" / "ПерваяМеньше"
Функция ЭДО_Служебные_СравнитьВерсии(Первая, Вторая, УчитыватьМинорнуюВерсию = Ложь, Разделитель = ".") Экспорт
	
	Результат = "Равны";  // ПерваяБольше / ПерваяМеньше
	// здесь не учитываются версии вроде "1.0.1b"
	
	МассивПервойВерсии = ЭДО_Служебные_РазложитьСтрокуВМассивСлов(Первая, Разделитель);
	МассивВторойВерсии = ЭДО_Служебные_РазложитьСтрокуВМассивСлов(Вторая, Разделитель);
	
	Если МассивПервойВерсии.Количество() <> МассивВторойВерсии.Количество() Тогда
		ВызватьИсключение "Не совпадает нумерация первой и второй версии";
	КонецЕсли;
	
	Для Сч = 0 По МассивПервойВерсии.ВГраница() - ?(УчитыватьМинорнуюВерсию, 0, 1) Цикл
		// по умолчанию не сравниваем последнюю версию
		Если Число(МассивПервойВерсии[Сч]) < Число(МассивВторойВерсии[Сч]) Тогда
			
			Результат = "ПерваяМеньше";
			Прервать;
			
		ИначеЕсли Число(МассивПервойВерсии[Сч]) > Число(МассивВторойВерсии[Сч]) Тогда	
			
			Результат = "ПерваяБольше";
			Прервать;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// А каким образом будем обновлять сохраненную версию модуля, если обновление данных между релизами не требовалось?
Функция ЭДО_Модуль_ВыполнитьОбновлениеДанныхМодуля() Экспорт
	
	ПредыдущаяВерсияМодуля = ЭДО_Модуль_ОбщиеНастройки().СохраненнаяВерсияМодуля;
	
	РезультатОбновления = "";  // по умолчанию ок
	Если Не ЗначениеЗаполнено(ПредыдущаяВерсияМодуля) Тогда
		
		// конвертируем справочники
		РезультатОбновления = ЭДО_Обновление_ВыполнитьКонвертациюПакетовИДокументов_Для_Релиза_1_0();
		Если ЗначениеЗаполнено(РезультатОбновления) Тогда
			Возврат РезультатОбновления;
		КонецЕсли;
		
	КонецЕсли;
	
	//Если ЭДО_Служебные_СравнитьВерсии(ПредыдущаяВерсияМодуля, "2.0.0") = "ПерваяМеньше" Тогда
	//	// следующая конвертация, необходимая для 2.0.0
	//КонецЕсли;
	
	ЭДО_Модуль_УстановитьНовуюВерсиюМодуля();
	
	Возврат РезультатОбновления;
	
КонецФункции

// Записывает в общие настройки текущую версию модуля
Процедура ЭДО_Модуль_УстановитьНовуюВерсиюМодуля() Экспорт
	
	мНастройки = ЭДО_Модуль_ОбщиеНастройки();  // прочитаем снова
	мНастройки.СохраненнаяВерсияМодуля = ЭДО_НомерРелиза();  
	ЭДО_Модуль_СохранитьОбщиеНастройки(мНастройки);
	
КонецПроцедуры

// Используется в формах "ОбновлениеМодуля" и "ОбновлениеМодуляУправляемая"
Процедура ЭДО_Модуль_ВывестиОписаниеОбновленийВТабличныйДокумент(ТабДокумент) Экспорт
	
	Макет = ПолучитьМакет("ИсторияИзмененийМодуля");
	
	ОбластиВерхние = Новый Массив;
	Для Каждого Область Из Макет.Области Цикл
		
		Если Лев(Область.Имя, 1) <> "_" Тогда
			ОбластиВерхние.Добавить(Область);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого Область Из ОбластиВерхние Цикл
		
		Макет.Области.Найти(Область.Имя).Сгруппировать();
		Макет.Области.Найти("_" + Область.Имя + "_Функциональность").Сгруппировать();
		Макет.Области.Найти("_" + Область.Имя + "_Техническая").Сгруппировать();
		
	КонецЦикла;
	
	ТабДокумент.Вывести(Макет);
	
КонецПроцедуры


// Конвертации для релиза 1.0.0

Функция ЭДО_Обновление_ВыполнитьКонвертациюПакетовИДокументов_Для_Релиза_1_0()
	
	// в случае ошибки возвращается не пустая строка
	
	РезультатКонвертации = ЭДО_Конвертация_100_КонвертироватьВходящиеДокументы();
	Если ЗначениеЗаполнено(РезультатКонвертации) Тогда
		Возврат РезультатКонвертации;
	КонецЕсли;
	
	РезультатКонвертации = ЭДО_Конвертация_100_КонвертироватьИсходящиеДокументы();
	Если ЗначениеЗаполнено(РезультатКонвертации) Тогда
		Возврат РезультатКонвертации;
	КонецЕсли;
	
	Возврат "";  // все ок
	
КонецФункции

Функция ЭДО_Конвертация_100_КонвертироватьВходящиеДокументы()
	
	// Входящие документы надо:
	// 1. Связать в пакеты
	// 2. Направление "Inbound" поменять на "Входящее"
	// 3. Доп.свойства из доп.реквизитов перенести в основные реквизиты:
	//    ОшибкиПроверкиТекст, ОтветХранилище, ДействиеВ1С, ДействиеВДД, АнализПроведен 
	
	Результат = "";  // возвращаем текст ошибки, если пустой, то все хорошо
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Диадок_Документы.Ссылка,
	|	Диадок_Документы.LetterId КАК LetterId,
	|	Диадок_Документы.ДатаЗагрузки КАК ДатаЗагрузки
	|ИЗ
	|	Справочник.Диадок_Документы КАК Диадок_Документы
	|ГДЕ
	|	(Диадок_Документы.Направление = ""Inbound"")
	|	И Диадок_Документы.Пакет = ЗНАЧЕНИЕ(Справочник.Диадок_ПакетыДокументов.)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаЗагрузки,
	|	LetterId
	|ИТОГИ
	|	МАКСИМУМ(ДатаЗагрузки)
	|ПО
	|	LetterId"
	);
	
//	Запрос.УстановитьПараметр("ГраницаКонвертации", ГраницаКонвертации);
	ВыборкаПакеты = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПакеты.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			// Будем создавать пакеты, связывать в них документы
			ВыборкаДокументы = ВыборкаПакеты.Выбрать();
			ПакетСсылка = ЭДО_Конвертация_100_СоздатьИЗаписатьПакет(ВыборкаДокументы);
			
			// данные в пакет надо взять из первого документа
			Пока ВыборкаДокументы.Следующий() Цикл
				
				ДокОбъект = ВыборкаДокументы.Ссылка.ПолучитьОбъект();
				
				ДокОбъект.Направление = "Входящее";  // Направление тоже приведем к единому виду
				
				ДокОбъект.ТребуемоеДействиеВ1С	= ЭДО_СправочникМенеджер_ЗначениеДопРеквизита(ВыборкаДокументы.Ссылка, "ДействиеВ1С");
				ДокОбъект.ТребуемоеДействиеВДД	= ЭДО_СправочникМенеджер_ЗначениеДопРеквизита(ВыборкаДокументы.Ссылка, "ДействиеВДД");
				ДокОбъект.ТекстОшибки			= ЭДО_СправочникМенеджер_ЗначениеДопРеквизита(ВыборкаДокументы.Ссылка, "ОшибкиПроверкиТекст");
				ДокОбъект.ХранилищеОтвета		= ЭДО_СправочникМенеджер_ЗначениеДопРеквизита(ВыборкаДокументы.Ссылка, "ОтветХранилище");
				// TODO сделать пакетное получение сведений
				                                           
				Если ЗначениеЗаполнено(ДокОбъект.ТребуемоеДействиеВ1С) 
					Или ЗначениеЗаполнено(ДокОбъект.ТребуемоеДействиеВДД)
					Или ЗначениеЗаполнено(ДокОбъект.ТекстОшибки) Тогда
					ДокОбъект.АнализПроведен	= Истина;
				Иначе
					ДокОбъект.АнализПроведен	= ЭДО_СправочникМенеджер_ЗначениеДопРеквизита(ВыборкаДокументы.Ссылка, "АнализПроведен");
				КонецЕсли;
				
				ДокОбъект.Пакет = ПакетСсылка;
				
				ДокОбъект.Записать();
			
			КонецЦикла;
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			
			мОшибка = ОписаниеОшибки();
			Результат = мОшибка;
			Сообщить(мОшибка);
			Возврат Результат;
			
		КонецПопытки;	
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЭДО_Конвертация_100_КонвертироватьИсходящиеДокументы()
	
	// Для исходящих пакетов достаточно проставить дату отправки - в пакет и в документы
	
	Результат = "";  // возвращаем текст ошибки, если пустой, то все хорошо
	
	СоответствиеHexDec = ЭДО_Конвертация_100_ИнициализироватьСоответствиеHexDec();
	ЭДО_Кэш_Поместить("СоответствиеHexDec", СоответствиеHexDec);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Диадок_Документы.Ссылка,
	|	Диадок_ПакетыДокументов.Ссылка КАК Пакет,
	|	Диадок_ПакетыДокументовДополнительныеРеквизиты.Значение КАК ДатаОтправки
	|ИЗ
	|	Справочник.Диадок_Документы КАК Диадок_Документы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Диадок_ПакетыДокументов КАК Диадок_ПакетыДокументов
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Диадок_ПакетыДокументов.ДополнительныеРеквизиты КАК Диадок_ПакетыДокументовДополнительныеРеквизиты
	|			ПО Диадок_ПакетыДокументов.Ссылка = Диадок_ПакетыДокументовДополнительныеРеквизиты.Ссылка
	|				И (Диадок_ПакетыДокументовДополнительныеРеквизиты.ИмяРеквизита = ""ДатаОтправки"")
	|		ПО Диадок_Документы.Пакет = Диадок_ПакетыДокументов.Ссылка
	|ГДЕ
	|	Диадок_ПакетыДокументов.ДатаЗагрузки = ДАТАВРЕМЯ(1, 1, 1)
	|	И Диадок_ПакетыДокументов.Направление = ""Исходящее""
	|
	|УПОРЯДОЧИТЬ ПО
	|	Пакет,
	|	ДатаОтправки
	|ИТОГИ
	|	МАКСИМУМ(ДатаОтправки)
	|ПО
	|	Пакет"
	);
	
	ВыборкаПакеты = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаПакеты.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			
			ВыборкаДокументы = ВыборкаПакеты.Выбрать();
			
			Если ЗначениеЗаполнено(ВыборкаПакеты.ДатаОтправки) Тогда
				ДатаЗагрузки	= ВыборкаПакеты.ДатаОтправки;
			Иначе
				ДатаЗагрузки	= ЭДО_Конвертация_100_ПолучитьДатуСозданияПоГуиду(
						Строка(ВыборкаПакеты.Пакет.УникальныйИдентификатор()));
			КонецЕсли;
			
			// данные в пакет надо взять из первого документа
			Пока ВыборкаДокументы.Следующий() Цикл
				
				ДокОбъект = ВыборкаДокументы.Ссылка.ПолучитьОбъект();
				ДокОбъект.ДатаЗагрузки	= ДатаЗагрузки;
				ДокОбъект.Записать();
			
			КонецЦикла;
			
			ОбъектПакета = ВыборкаПакеты.Пакет.ПолучитьОбъект();
			ОбъектПакета.ДатаЗагрузки = ДатаЗагрузки;
			ОбъектПакета.Записать();
			
			ЗафиксироватьТранзакцию();
			
		Исключение
			
			ОтменитьТранзакцию();
			мОшибка = ОписаниеОшибки();
			Результат = мОшибка;
			Сообщить(мОшибка);
			Возврат Результат;
			
		КонецПопытки;	
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

Функция ЭДО_Конвертация_100_СоздатьИЗаписатьПакет(ВыборкаДокументы)
	
	ВыборкаДокументы.Сбросить();
	ВыборкаДокументы.Следующий();
	
	//создаем пакет
	НовыйПакет = Справочники.Диадок_ПакетыДокументов.СоздатьЭлемент();
	ЗаполнитьЗначенияСвойств(НовыйПакет, ВыборкаДокументы.Ссылка.ПолучитьОбъект(), "Направление, BoxId, LetterId, КонтрагентДиадок, ОрганизацияДиадок");
	
	НовыйПакет.Направление = "Входящее";
	
	НовыйПакет.Записать();
	
	ВыборкаДокументы.Сбросить();
	
	Возврат НовыйПакет.Ссылка;
	
КонецФункции

Функция ЭДО_Конвертация_100_ПолучитьДатуСозданияПоГуиду(ЗНАЧ УИД)
	
	// Взято здесь: https://infostart.ru/public/337631/
	// Часовой пояс не учитываем - пока не принципиально
	
	ЧасПояс = 0;
	
	УИД = СокрЛП(ВРег(СтрЗаменить("" + УИД, "-", "")));
	
	Если Не Сред(УИД, 13, 1) = "1" Тогда
		Возврат '00010101';
	КонецЕсли;
	
	интервал16 = ВРег(Сред(УИД, 14, 3) + Сред(УИД, 9, 4) + Сред(УИД, 1, 8));
	интервал10 = ЭДО_Конвертация_100_HexToDec(интервал16);
	интервалСек = интервал10 / 10000000;
	
	Результат = Дата(1582, 10, 15) + интервалСек + ЧасПояс*3600;
	
	Возврат Результат ;
	
	
КонецФункции
 
Функция ЭДО_Конвертация_100_ByteToDec(знч16) 
	
	Возврат ЭДО_Кэш_Прочитать("СоответствиеHexDec").Получить(знч16);
	
КонецФункции

Функция ЭДО_Конвертация_100_HexToDec(знч16)
	
	знч10 = 0;
	длн = СтрДлина(знч16);
	Для й = 1 По СтрДлина(знч16) Цикл
		знч10 = знч10 + Pow(16, длн - й) * ЭДО_Конвертация_100_ByteToDec(Сред(знч16, й, 1));
	КонецЦикла;
	Возврат знч10;
	
КонецФункции

Функция ЭДО_Конвертация_100_ИнициализироватьСоответствиеHexDec()
	
	СоответствиеHexDec = Новый Соответствие;
	
	СоответствиеHexDec.Вставить("0", 0);
	СоответствиеHexDec.Вставить("1", 1);
	СоответствиеHexDec.Вставить("2", 2);
	СоответствиеHexDec.Вставить("3", 3);
	СоответствиеHexDec.Вставить("4", 4);
	СоответствиеHexDec.Вставить("5", 5);
	СоответствиеHexDec.Вставить("6", 6);
	СоответствиеHexDec.Вставить("7", 7);
	СоответствиеHexDec.Вставить("8", 8);
	СоответствиеHexDec.Вставить("9", 9);
	СоответствиеHexDec.Вставить("A", 10);
	СоответствиеHexDec.Вставить("B", 11);
	СоответствиеHexDec.Вставить("C", 12);
	СоответствиеHexDec.Вставить("D", 13);
	СоответствиеHexDec.Вставить("E", 14);
	СоответствиеHexDec.Вставить("F", 15);
	
	Возврат СоответствиеHexDec;
	
КонецФункции


//}		ОБНОВЛЕНИЕ МОДУЛЯ


// ФУНКЦИЮ НЕДОПУСТИМО ИСПОЛЬЗОВАТЬ В КАКИХ_ЛИБО ЦЕЛЯХ, КРОМЕ ОТЛАДКИ!!
// Должна возвращать ЛОЖЬ после выпуска в Production. На стадии разработки допустимо возвращать ИСТИНА.
Функция ЭДО_Служебные_РежимОтладкиВключен() Экспорт
	Возврат Ложь;
КонецФункции

// Нумерация релизов следующая:
// A.B.C
// A - мажорная версия, увеличивается при кардинальных изменениях
// B - минорная версия, увеличивается при каждом релизе нового функционала
// C - номер патча. Увеличивается между релизами при необходимости исправления критичных ошибок
Функция ЭДО_НомерРелиза() Экспорт
	
	Возврат "1.0.1";
	
	//1.0.1.
	
	// Добавлена визуализация и отправка идентификатора гос.контракта в форматы УПД и УКД.
	// Исправлена ошибка парсинга UtdInvoice.
	// Поле "GovermentContractInfo" переименовано в "GovernmentContractInfo"
	// Добавлена функция "ЭДО_ПолучитьUtdSellerContentИзInvoiceContent()" для упрощенной конвертации счетов-фактур формата 5.02 в формат УПД.
	// Исправлена визуализация старых типов документов (Invoice и XmlTorg12) в формате УПД.
	// Исправлено открытие карточки "завершенного" входящего документа.
	// Добавлена возможность подписывать входящий УКД.
	// Версия внешней компоненты повышена до 5_18_1_226
	
	
	//1.0.0.
	
	// Первый официальный релиз. Дальнейшая история изменений будет вестись в макете "ИсторияИзмененийМодуля".

	
	//0.0.15.01

	// Новые возможности:
	// - Возможность авторизации под несколькими сертификатами одновременно (в нескольких организациях).
	// - Запуск обработки в режиме регламентного задания. В ПМ добавлено новое событие "ВыполнитьРегламентныеДействия", в котором можно прописать любые действия, например, загрузку новых документов.
	// - Отправка УКД. Пока без визуализации и примеров.
	// - Асинхронное подписание входящих документов.
	// - Кастомизация списков документов (возможно вывести 5 дополнительных колонок). Настраивается в событиях ПМ "ПолучитьНастройкиДополнительныхКолонокСпискаДокументов" и "ПослеОбновленияСпискаДокументов".
	
	
	// Исправление выявленных ошибок:
	// - Исправлен конфликт имен при работе в конфигурации "Далион" (общий модуль "События").
	// - В интерфейсе не формировался заголовок документов XmlTorg12 / Invoice / InvoiceRevision в формате УПД.
	// - Ошибки при первоначальной загрузки внешней компоненты DiadocInvoiceApi (прокси, разрядность, старые платформы 8.2).
	// - В интерфейсе Такси сжимался основной список документов.
	// - При отправке УПД не передавались дополнительные поля.
	// - Ошибки при парсинге входящих формализованных документов.
	
	
	//0.0.14.01

	// Новые возможности:
	// - Модуль теперь может работать без изменения конфигурации в случае, если текущая конфигурация содержит подсистему 1С-ЭДО.
	// - Анализ входящих документов для торговых сетей: основная логика, сохранение результата, подготовка ответа.
	// - Визуализация формализованных входящих документов (бета-версия).
	// - Новые события в ПМ - "ПослеУстановкиСтатусаДокумента", "ПровестиАнализДокумента", "ВыполнитьТребуемоеДействие").
	// - В форме списка контрагентов добавлены фильтры: по ИНН, КПП, сопоставленному контрагенту в 1С, наличию сопоставления.
	// - Поддержка 64-битного клиента 1С (работа с 64-битной компонентой Диадок).
	// - Ускорено построение основного списка при большом количестве строк.
	// - Добавлена возможность быстро "прошить" файл компоненты внутрь модуля.
	// - Снижена зависимость от библиотеки CAPICOM.
	
	// Исправление выявленных ошибок:
	// - Парсер JSON некорректно разбирал некоторые даты
	// - Не отправлялись некоторые неформализованные документы
	// - Подразделения организаций не всегда корректно обновлялись из-за кэширования http запросов на серверах
	// - Пакеты со статусом "Подготовлен" не отображались в основном списке.
	
	
	//0.0.13.04
	//Исправление выявленных ошибок: список контрагентов в некоторых случаях грузился не полностью.
		
	//0.0.13.03 
	//Исправление выявленных ошибок: -невозможно было отправить неформализованный акт выполненных работ.
	
	//0.0.13.02
	// Исправление ошибок:
    //- Не визуализировались ТОРГ12 и акт выполненных работ;
    //- Проблемы в формах "ВидыДокументов_ФормаЭлемента" и "ВидыДокументов_ФормаЭлементаУправляемая".
    //В формы Контрагенты_ФормаСписка, Контрагенты_ФормаСпискаУправляемая добавлен отбор по ИНН, КПП, Сопоставленным, Не сопоставленным контрагентам
	
	//0.0.13.01
	// Синхронизация контрагентов/организаций переведена на прямое API, что дает возможность запустить ее в регламентном задании;
	// Добавлены новые типы документов UtdInvoice, UtdAcceptanceCertificate, UtdTorg12 для отправки акта выполненных работ, счета-фактуры и ТОРГ12 в формате УПД;
	// Исправление выявленных ошибок:
	// - При массовой отправке документов были возможны зависания модуля;
	// - Парсер JSON неправильно обрабатывал некоторые экранируемые символы;
	// - Не отправлялись комментарии к документам;
	// - Пакет документов при подготовке в некоторых случаях мог оказаться пустым.
	
	//0.0.12.01
	// ТРЕБУЕТСЯ ОБНОВЛЕНИЕ КОНФИГУРАЦИИ!!!
	// Обновлена структура метаданных.
	// Реализована возможность сопоставлять входящие электронные документы с документами в 1С.
	// При авторизации под сертификатом запускается автоматическое формирование квитанций о получении документов (http://1c-docs.diadoc.ru/ru/latest/ReceiptGenerationProcess.html).
	// Исправление выявленных ошибок.
	
	//0.0.11.04
	// Исправлена ошибка при переотправке сообщений
	
	//0.0.11.03
	// Исправлена ошибка в XSD схеме контента сообщений.
	
	//0.0.11.02
	// Исправлена ошибка в функции ЧислоИзСтроки
	
	//0.0.11.01
	// Реализована переотправка успешно отправленных пакетов.
	// Заполнение неотправленных документов перенесено из ПМ в основной модуль.
	// Подстановка подразделений контрагентов по умолчанию.
	
	// Работа со входящими документами (бета-версия):
	// 1. Реализовано сохранение входящих документов в справочнике "Диадок_Документы"
	// 2. Добавлена форма "КарточкаВходящегоДокумента"
	// 3. Реализована возможность отправки ответов по входящим документам
	// 4. Реализована возможность создания документов в 1С на основании данных из Диадока.	
	
	// Исправление выявленных ошибок:
	// - В режиме совместимости 8.1 внезапно падает запрос в методе "ЭДО_СправочникМенеджер_ЗначениеДопРеквизита";
	// - Сохранение и восстановление периода при открытии модуля;
	// - Возможное зависание при массовой отправке документов.
	
	//0.0.10.01	
	// Добавлена асинхронная отправка пакетов.
	// Модуль адаптирован для работы с ИСФ.
	// Исправлены ошибки в пакете XDTO: не были корректно определены итоги ТОРГ-12, ИСФ, КСФ.
	// Реализована возможность заполнения поля "Комментарий" в исходящих документах.
	// В левой нижней панели отборов типизированы поля "Контрагент" и "Организация".
	
	//0.0.9.02
	//	Версия внешней компоненты повышена до 5_10_4_168

	//0.0.9.01
	//	
	// Добавлен формат УПД для исходящих документов и визуальная настройка в форме организации.
	// Добавлено автосопоставление контрагентов (в форме списка, меню "Групповая обработка").
	// Реализовано добавление произвольных файлов в пакет (на форме исходящего пакета).
	// Требуемая версия компоненты повышена до 5_10_2_165.
	// В ПМ добавлено событие "ПолучитьТекстЗапросаДляСпискаПакетовНаОтправкуПоМассивуВидовПакетов", 
	//   которое заменяет событие "ПолучитьТекстЗапросаДляСпискаПакетовНаОтправку" и позволяет более эффективно строить списки на отправку.
	// В форме исходящего пакета добавлена возможность вручную указывать подразделение отправителя и получателя.
	// Рефакторинг основного модуля, ПМ.
	// На форме исходящего пакета теперь отправляется описание последней ошибки при отправке, а также реализована возможность переотправки.
	// В заголовке основной формы отображается информация о пользователе, авторизовавшемся в сервисе.
	// В меню "Настройки" добавлена возможность смены текущего пользователя.
	// Исправлены выявленные ошибки.
		
	//0.0.8.01
	//
	// ВНИМАНИЕ! Формат подключаемого модуля изменен! 
	// Необходимо привести его в соответствие с тем, который формируется по кнопке "Генерировать пример подключаемого модуля"!
	//
	// Добавлена возможность первоначальной подгрузки настроек (пакеты + виды документов) из подключаемого модуля. Обновлен шаблон ПМ.
	// Добавлены произвольные настройки прокси (ОФ,УФ).
	// Исправлена ошибка сопоставления организаций/контрагентов в УФ.
	// Устаревшая кнопка сохранения шаблона ПМ выпилена.
	// Фикс в функции определения версии платформы.
	// Исправлен модальный ввод даты начала синхронизации событий.
	// Исправлено: формы, открываемые из основной формы, не закрывались при закрытии основной.
	// Прочие интерфейсные исправления.
	
	//0.0.7.02
	//
	// Исправление выявленных ошибок:
	// - Не визуализировалась печатная форма корректировочного счета-фактуры
	// - Неправильное имя события "ПолучитьТекстЗапросаДляВидаПакета" в макете "Шаблоны кода": правильно - "ПолучитьТекстЗапросаДляСпискаПакетовНаОтправку"
	// - Некорректный формат контента для корректировочного счета-фактуры в XSD схеме.
	
	
	//0.0.7.01
	//
	// Пересмотрен подход к размещению кода: теперь весь код подготовки пакетов и тексты запросов построения списков должны находиться в подключаемом модуле.
	// В связи с этим в справочниках "Виды пакетов" и "Виды электронных документов" удалены соответствующие поля ввода.
	// Для их просмотра можно воспользоваться предыдущей версией модуля.
	// Пример кода подключаемого модуля можно увидеть в макете "ШаблоныКода" либо сгенерировать кнопкой "Генерировать пример подключаемого модуля" в форме настроек.
	// Алгоритм подготовки единичного документа стандартизирован, а потому удален из настроек. Теперь рекомендуется пользоваться функцией "ЭДО_ДокументМенеджер_ПодготовитьИДобавитьДокументВПакет".
	// Добавлена возможность в подключаемом модуле переопределять типы значений для справочников "Контрагенты" и "Организации".
	//
	// Интерфейсные улучшения:
	// - Изменено поведение отборов в левой панели основной формы
	// - Добавлена типизация поля основной связи в формах справочников "Контрагенты" и "Организации" на управляемых формах
	//
	// Исправлены ошибки:
	// - Не было возможности отправить документ с типом "ReconciliationAct" и прочие неформализованные.
	// - Возникало исключение при попытке собрать контент документа с типом "InvoiceCorrection"
	// - Платформа старше 8.3.6 по-прежнему пыталась ходить в интернет через COM-объект, вместо собственного объекта HTTPЗапрос.
	
	//0.0.6.02
	// Исправлена ошибка в форме настроек (обычной): не работал переключатель для подключаемого модуля.
	
	//0.0.6.01
	// Добавлена поддержка маршрутизации исходящих сообщений (можно в подключаемом модуле указать ID подразделений - отправителя и получателя).
	// Параметр "ВидПакета" протянут в запросы на построение списка пакетов для отправки.
	// Добавлена возможность назначать соответствия для подразделений организации и для подразделений контрагентов (ОФ+УФ).
	// Конвертация соответствий контрагентов - начало.
	// Исправлена возможность размещения ПМ в справочнике внешних обработок на УФ.
	// Разрешено отправлять электронные документы из элементов справочников (например, договоры или массовые рассылки).
	// Соответственно изменен файл обновления конфигурации (cf). Версия файла повышена до 2.03.
	// Требуемая версия компоненты повышена до 5_8_0_138.
	// Изменен механизм первоначальной загрузки компоненты с сервера (транспорт, сжатие).
	
	//0.0.5.1
	// Добавлен шаблон кода "СведенияОВнешнейОбработке()" для подключаемого модуля.
	// Переработаны отборы в ОФ и УФ.
	// Добавлена возможность работы через прокси IE.
	// Рефакторинг механизмов отправки (ОФ и УФ).
	// Исправлена ошибка в парсере JSON.
	// Процедура ЗаполнитьРеквизитыФормы переименована в мЗаполнитьРеквизитыФормы для совместимости с некоторыми старыми конфигурациями.
	// Массовая отправка документов больше не останавливает процесс отправки: просто документы помечаются как ошибочные, потом их можно переотправить.
	// Требуется изменение текстов запросов построения списка документов!
	
	//0.0.4.04
	// Рефакторинг агоритмов авторизации в ОФ и УФ: продолжение. Теперь все работает как надо.
	
	//0.0.4.03
	// Исправлена большая часть ошибок в режиме немодальных окон в УФ.
	// Исправлена ошибка: при первом открытии модуля на не настроенной конфигурации служебное окно сразу закрывалось.
	// Исправлена ошибка в CF с объектами: не было прав на РС "Диадок_НастройкиКонтрагентов".
	// Рефакторинг агоритмов авторизации в ОФ и УФ.
	// Из Модуль_РаботаСКонтентом" удалены все директивы компиляции.
	// Отправка пакетов из формы завернута на ОбработкаОповещения
	// Добавлено связывание документов через InitialDocumentIds и SubordinateDocumentIds при отправке пакета.
	// Исправлена XSD схема в Torg12Commons (были неправильные типы некоторых свойств)
	
	//0.0.4.02
	// Исправлено несколько ошибок в управляемой форме контрагента (элемент).
	// Исправлена ошибка синхронизации списка контрагентов (ОФ и УФ).
	// Версия компоненты повышена до 5_7_3_135.
	
	//0.0.4.01
	// Добавлены недостающие управляемые формы.
	// Добавлена панель отборов слева. В данный момент позволяет переключать вид между пакетами и отдельными документами, потом будет расширяться.
	// Исправлена авторизация при первой массовой отправке пакетов в ОФ.
	
	//0.0.3.01
	// Добавлены управляемые формы: основная, авторизация, контрагенты/организации, пакет, карточка документа.
	// В УФ работает просмотр и отправка пакета (одиночная и массовая).
	// Добавлена возможность задавать начальную дату загрузки событий из API (в карточке организации).
	// Исправлена ошибка в парсере JSON и в преобразовании XDTO -> Структура.

	//0.0.2.02
	// Исправлена ошибка в алгоритме обновления статусов отправленных документов.

	//0.0.2.01
	// По всему коду Комплекты переименованы в Пакеты (ради единого стандарта в вебе, 1С, компоненте и т.д.).
	// Обновлен CF с подсистемой хранения данных.
	// После обновления ОБЯЗАТЕЛЬНО зайти в справочник "Диадок: Дополнительные справочники" и переименовать все строки с "ИмяСправочника = КомплектыДокументов" в "ВидыПакетов".
	// А также поменять код и запрос подготовки пакета: заменить "Комплект" на "Пакет" везде.
	
	// При переключении функции "ЭДО_Служебные_РежимОтладкиВключен" в "Истина" предполагается следующее:
	// 1) Модуль запускается из файла epf на диске
	// 2) В той же папке на диске лежат выгруженные "ЭмуляторТабличногоДокумента.epf" и "component_types.xsd"
	
	// Добавлена типизация справочников при сопоставлении контрагентов и организаций.
	// Пока рассчитана на типовые конфигурации: справочник "Организации" и "Контрагенты", в дальнейшем планируется расширение.
	
	// При генерации кода подключаемого модуля вставлен пример использования парсера печатных форм
	
	
	//0.0.1.0
	// Первая бета-версия.
	// Добавлена функция "ЭДО_Служебные_РежимОтладкиВключен", можно использовать при отладке.
	// Список вызовов можно просмотреть глобальным поиском.
	// Приборка в чтении ленты событий.

	//0.0.0.21а
	// Начал приборку в статусных
	
	//0.0.0.20а
	// Немного прибрался в коде
	
	//0.0.0.19а
	// Инициализацию ПМ перевел на значения из настроек.
	
	//0.0.0.18а
	// Сделал сохранение настроек подключаемого модуля в черновом варианте, надо прибраться.
	// Починил некорректное связывание ID документов с элементами справочника при отправке.
	
	//0.0.0.17а
	// Оживил форму настроек, добавил в нее кнопку с генератором кода для подключаемого модуля.
	// И сам кодогенератор.
	// Обновил требуемую версию компоненты до 5_6_2_109.
	// В функции ЭДО_ПодключаемыйМодуль() есть локальная переменная "НеКэшировать" - помогает не перезагружать основной модуль при отладке.
	
	
	//0.0.0.16а
	// Немного прибрался в коде, разложил по секциям Снегопата
	
	//0.0.0.15а
	// Merge с веткой Любы по чтению статусов.
	// Добавил сериализатор JSON для старых платформ.
	// Пофиксил багов по версиям платформы (8.3.сколько-то). 
	// Теперь до 8.3.6.1977 будет Microsoft.XMLHTTP и неродной JSON, поэтому тестить удобнее и быстрее именно на этой или более свежей платформе.
	
	//0.0.0.14а
	// Типы компоненты Диадока - в XSD, добавлен кодогенератор для ПМ на основе этих типов.
	
	//0.0.0.13а
	// Начал объединять работу в 8.2 и 8.3
	// Много переименования/перестройки функций работы с API
	// Починил вызов парсера JSON
	
	
	//0.0.0.12а
	// Залил изменения по чтению ленты API от Любы
	
	//0.0.0.11а
	// Распилил DocumentId на 2 части - LetterId и DocumentId. BoxId теперь тоже в реквизитах справочника. Надо обновить конфигурацию, обновлялка тоже обновлена.
	
	//0.0.0.10а
	// Начата работа с чтением event'ов
	
	
	//0.0.0.9а
	
	// Очень сильно изменена логика работы в сторону комплектов документов.
	// Добавлены кнопки вроде "Вставить пример, как это все работает".
	// Изменена структура данных! (CF в макете "ОбновлениеДляХраненияДанных" обновлен, имеет версию 1.02).
	
	//0.0.0.8а
	
	// Заработала отправка документов комплектом (http://1c-docs.diadoc.ru/ru/latest/CreatePackageSendTask.html).
	// Требуемая версия компоненты Диадок повышена до 5.5.9.93.
	
	//0.0.0.7а
	
	// Отправка реализована двумя функциями: Транспорт_ОтправитьКомплектДокументов_разом и Транспорт_ОтправитьКомплектДокументов_поштучно.
	// Первая красиво связывает документы в комплект (http://1c-docs.diadoc.ru/ru/latest/CreatePackageSendTask.html), вторая работает стабильнее.
	
	// Добавил в интерфейсе флаг "Показывать архивные", удалось вместо 2 разных треб.действий в интерфейсе оставить одно.
	// Компонента пока выпилена из модуля и подтягивается со страницы EDI по необходимости.
	
	// Обновлена версия компоненты до 5.5.5.86.
	// Добавил авторизацию по логину/паролю.
	

	//0.0.0.6а
	//Добавил отправку Nonformalized документов.
	
	//0.0.0.5а
	//Сделал отправку акта выполненных работ в формализованном виде, без визуализации
	//Сделал отправку счета на оплату
	
	//0.0.0.4а
	//Поправил поставку конфигурации: добавил справочник "Диадок_Документы"
	
	
	//0.0.0.3а
	//Поправил сохранялку, протестировал показ отправленных сообщений
	//Форма просмотра комплекта теперь может отправлять
	
	//0.0.0.2а
	//Поменял структуру Комплекта
	//Поправил обновление форм списков
	//Вычистил немного мусора
	//Приделал отправку и сохранение
	//Добавил макеты классификаторов ОКЕИ и стран
	//Пофиксил диадоковскую форму
	//Поменял логику формы просмотра документов
	
	
	//0.0.0.1а
	//Отладка полученных Структур, запись их в справочник для маппинга.
	//Заголовок главного окна.
	//В настройке маппинга Drag&Drop.
	//Все новые методы в модуле объекта пока пишу с префиксом "нов_"
	
	
КонецФункции
